<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity游戏开发基础知识之Unity部分</title>
      <link href="2022/09/26/unity-you-xi-kai-fa-ji-chu-zhi-shi-zhi-unity-bu-fen/"/>
      <url>2022/09/26/unity-you-xi-kai-fa-ji-chu-zhi-shi-zhi-unity-bu-fen/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity游戏开发基础知识</title>
      <link href="2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/"/>
      <url>2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>记录日志：<br>Debug.Log()</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>含义：帮助我们降低对象之间的耦合度常用的方法称为设计模式。使用设计模式是为了可重用代码，让代码更容易被其他人所理解，保证代码可靠性，使代码编制真正工程化，这是软件工程的基石。<br>分类：<br>创建型模式：工厂方法模式、抽象工厂模式、单例模式、建造者模式、组合模式、原型模式。<br>结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>含义：一个类只有一个实例，只在内部实例一次，外部无法实例化，全局唯一。一般应用于各种管理器，如角色管理器、声音管理器，场景管理器。</p><pre class=" language-C#"><code class="language-C#">public class MySingleton{  private static MySingleton __instance;  public static MySingleton instance{    get{      if(__instance == null){        __instance = new MySIngleton();      }    }  }  public MySingleton(){    Debug.Log("执行构造函数");  }  public void Show(){    Debug.Log("show");  }}MySingleton.instance.Show();</code></pre><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>含义：可称为发布/订阅模式，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象(多播委托）。主题对象发生变化时，它们能够自动更新自己，通常用作实现事件处理系统。</p><pre class=" language-C#"><code class="language-C#">Using System;using UnityEngine;public class Animal{  protected string Name;  public Animal(string name){    this.Name = name;  }  public virtual void Run(){  }}public class Cat:Animal{  public Action actions;  //发布者  public Cat(string name):base(name){  }  public void Coming(/*MouseA mouseA,MouseB mouseB,MouseC mouseC*/){    Debug.Log(Name + "猫来了");    //mouseA.Run();    //mouseB.Run();    //mouseC.Run();    this.Run();    if(actions!= null){      actions();    }  }  public override void Run(){    Debug.Log(Name + "追老鼠");  }}public class Mouse:Animal{  public Mouse(string name,Cat cat):base(name){    cat.actions += this.Run;  //订阅者  }  public override void Run(){    Debug.Log(Name + "老鼠跑");  }}public class Visit:monoBehaviour{  void Start(){    Cat cat = New Cat("小野猫");    Mouse mouseA = new Mouse("mouseA",cat);    Mouse mouseB = new Mouse("mouseB",cat);    Mouse mouseC = new Mouse("mouseC",cat);    // 在老鼠数量不确定的情况下，这样的设计是不合理的    //cat.Coming(mouseA,mouseB,mouseC);    // 这样合理    cat.Coming();  }}</code></pre><h3 id="简单工厂-工厂-抽象工厂"><a href="#简单工厂-工厂-抽象工厂" class="headerlink" title="简单工厂/工厂/抽象工厂"></a>简单工厂/工厂/抽象工厂</h3><p>简单工厂模式：又叫静态工厂方法模式，由一个工厂对象决定创建出哪一种产品类的实例。只生产一个品类的产品，在工厂中动态创建。<br>工厂模式：避免简单工厂模式中，新增产品品牌（类型）时，直接修改工厂类。通过多个工厂创建不同的产品。<br>抽象工厂模式：解决系列产品问题，生产多种产品。</p><p>简单工厂模式：</p><img src="/2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/1.png" class=""><pre class=" language-C#"><code class="language-C#">namespace Factor{  public abstract class AbstractMouse{    public abstract void Print();  }}</code></pre><pre class=" language-C#"><code class="language-C#">using UnityEngine;namespace Factor{  public class DellMouse: AbstractMouse{    public override void Print(){      Debug.Log("生产了一个Dell鼠标");    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">using UnityEngine;namespace Factor{  public class HpMouse: AbstractMouse{    public override void Print(){      Debug.Log("生产了一个Hp鼠标");    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class SampleFactor{    public AbstractMouse CreateMouse(MouseType emMouseType){      AbstractMouse mouse = null;      switch(emMouseType){        case MouseType.HpMouse:          mouse = new HpMouse();          break;        case MouseType.DellMouse:          mouse = new DellMouse();          break;        default:          break;      }      return mouse;    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">using UnityEngine;using Factor;public enum MouseType{  None,  DellMouse,  HpMouse,}public class FactorMain:MonoBehaviour{  void Start(){    RunNormal();    RunSampleFactor();  }  void RunNormal(){    DellMouse dellMouse = new DellMouse();    dellMouse.Print();    HpMouse hpMouse = new HpMouse();    hpMosue.Print();  }  // 外界不需要关注具体的子类对象  void RunSampleFactor(){    SampleFactor factor = new SampleFactor();    AbstactMouse dellMouse = factor.CreateMouse(MouseType.DellMouse);    dellMouse.Print();    AbstactMouse hpMouse = factor.CreateMouse(MouseType.HpMouse);    hpMouse.Print();  }}</code></pre><p>工厂模式：</p><img src="/2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/2.png" class=""><pre class=" language-C#"><code class="language-C#">namespace Factor{  public abstract class FactorBase{    public abstract AbstractMouse CreateMouse();  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class DellFactor:FactorBase{    public override AbstractMouse CreateMouse(){      return new DellMouse();    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class HpMouse:FactorBase{    public override AbstractMouse CreateMouse(){      return new HpMouse();    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">public class FactorMain:MonoBehaviour{  void Start(){    RunFactor();  }--snip--  void RunFactor(){    DellFactor dellFactor = new DellFactor();    AbstractMouse dellmouse = dellFactor.CreateMouse();    dellMouse.Print();    HpFactor hpFactor = new HpFactor();    AbstractMouse hpmouse = hpFactor.CreateMouse();    hpmouse.Print();  }}</code></pre><p>工厂模式的好处在于当新增一个类的时候我们不会对原来的代码进行修改，只新增类本身及其工厂。<br><strong>抽象工厂模式：</strong> 可以生产多个类别产品。</p><img src="/2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/3.png" class=""><pre class=" language-C#"><code class="language-C#">namespace Factor{  public abstract class AbstractKeyBoard{    public abstract void Print();  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class DellKeyBoard:AbstractKeyBoard{    public override void Print(){      Debug.Log("Dell键盘");    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class HpMouse:AbstractKeyBoard{    public override void Print(){      Debug.Log("hp键盘");    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public abstract class FactorBase{    public abstract AbstractMouse CreateMouse();    public abstract AbstractKeyBoard CreateKeyBoard();  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class DellFactor:FactorBase{    public override AbstractMouse CreateMouse(){      return new DellMouse();    }    public override AbstractKeyBoard CreateKeyBoard(){      return new DellKeyBoard();    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Factor{  public class HpMouse:FactorBase{    public override AbstractMouse CreateMouse(){      return new HpMouse();    }    public override AbstractKeyBoard CreateKeyBoard(){      return new HpKeyBoard();    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">--snip--public class FactorMain:MonoBehaviour{  void Start(){    RunAbstractFactor();  }--snip--  void RunAbstractFactor(){    DellFactor dellFactor = new DellFactor();    AbstractMouse dellmouse = dellFactor.CreateMouse();    dellMouse.Print();    AbstractKeyboard dellKeyBoard = dellFactor.CreateKeyBoard();    dellKeyBoard.Print();    HpFactor hpFactor = new HpFactor();    AbstractMouse hpmouse = hpFactor.CreateMouse();    hpmouse.Print();    AbstractKeyboard hpKeyBoard = hpFactor.CreateKeyBoard();    hpKeyBoard .Print();  }}</code></pre><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>概念：可以用同一种方式调用不同平台上的同一个功能。</p><img src="/2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/4.png" class=""><pre class=" language-C#"><code class="language-C#">namespace Adaptor{  public class AndroidLine{    public void AndroidCharge(){      Debug.Log("借助Android数据线充电中");    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Adaptor{  public class IOSLine{    public void IOSCharge(){      Debug.Log("借助IOS数据线充电中");    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Adaptor{  public enum AdaptorType{    None,    Android,    IOS,  }  public interface IAdaptor{    void Charge(AdaptorType adaptorType);  }  public class Adaptor:IAdaptor{    AndroidLine androidLine = new AndroidLine();    IOSLine iosLine = new IOSLine();    public void Charge(AdaptorType adaptorType){      if(adaptorType == AdaptorType.Android)        androidLine.AndroidCharge();      else if(adaptorType == AdaptorType.IOS){        iosLine.IOSCharge();      }    }  }}</code></pre><pre class=" language-C#"><code class="language-C#">namespace Adaptor{  public class AdaptorMain"MonoBehaviour{    void Start(){      // 用的时候统一调用接口即可      IAdaptor adaptor = new Adaptor();      adaptor.Charge(AdaptorType.Android);      adaptor.Charge(AdaptorType.IOS);    }  }}</code></pre><p>注意：考虑到如果还有许多代码的情况下，这里接口用于拓展原始类不足的功能。</p><h2 id="IO操作"><a href="#IO操作" class="headerlink" title="IO操作"></a>IO操作</h2><h3 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C#字符串"></a>C#字符串</h3><p>参考：<a href="https://www.runoob.com/csharp/csharp-string.html">https://www.runoob.com/csharp/csharp-string.html</a><br>举例：</p><pre class=" language-C#"><code class="language-C#">public class StringTest{  void Start(){    Test1();  }  void Test1(){    string str1 = "XIAOXING";    string str2 = "xiaoxing";    Debug.Log(str1.Length); // 长度    Debug.Log(string.Compare(str1,str2));//相等输出整形0，不等输出1    Debug.Log(string.Concat(str1,str2));//拼接    Debug.Log(string.Format("name:{0} age:{1}","张三",14))//格式化输出    Debug.Log(str1.Contains("I"));//判断是否存在目标字符串    Debug.Log(str1.IndexOf("I"));//字符串第一次出现的索引    string [] array = str1.Split(new char[] {'G'});//字符串切割  }}</code></pre><h3 id="StringBuilder的使用"><a href="#StringBuilder的使用" class="headerlink" title="StringBuilder的使用"></a>StringBuilder的使用</h3><p>参考博客：<a href="https://blog.csdn.net/sibaison/article/details/72356393">https://blog.csdn.net/sibaison/article/details/72356393</a><br>用途：创建新的String的系统开销可能非常安规，如果要修改字符串而不创建新的对象，可以用到这个类。</p><pre class=" language-C#"><code class="language-C#">public class StringBuilderTest{  void Start(){    Test1();  }  void Test1(){    stringBuilder sb = new StringBuilder("Hello World",25);//内容和最大长度    Debug.Log(sb.Length + sb.capacity); //长度+容量    sb = sb.Append("What a beautiful day!"); // 添加内容    Debug.Log(sb.ToString());  }}</code></pre><img src="/2022/09/21/unity-you-xi-kai-fa-ji-chu-zhi-shi/5.png" class=""><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>参考链接：<a href="http://c.biancheng.net/csharp/file-io.html">http://c.biancheng.net/csharp/file-io.html</a></p><pre class=" language-C#"><code class="language-C#">using UnityEngine;public class FileStreamTest:MonoBehaviour{  void CreateFile(){    string path = @"E:\WorkSpace\Project\Assets\Resources\student.txt";    FileStream fileStream = new FileStream(path,FileMode.OpenOrCreate,FileAccess.ReadWrite,FileShare.ReadWrite);    string msg = "1710026"    byte[] bytes = Encoding.UTF8.GetBytes(msg);//字符串转换为字节数组    fileStream.Write(bytes,0,bytes.Length);    fileStream.Flush();//刷新缓冲区    fileStream.Close();//关闭流  }  void ReadFile(){    string path = @"E:\WorkSpace\Project\Assets\Resources\student.txt";    if(File.Exists(path)){      FileStream fileStream = new FileStream(path,FileMode.Open,FileAccess.Read);      byte[] bytes = new byte(fileStream.Length);      fileStream.Read(bytes,0,bytes.Length);      string s = Encoding.UTF8.GetString(bytes);      Debug.Log(s)      fileStream.Close();    }    else{      Console.WriteLine("您查看的文件不存在");    }  }  void WriteAndRead{                         //另一种方法    // 要写入文件中的数据    string[] str = new string[]{        "C语言中文网",        "http://c.biancheng.net/",        "C# 教程"    };    // 创建 StreamWriter 类的对象    StreamWriter file = new StreamWriter("demo.txt");    // 将数组中的数据写入文件    foreach(string s in str){        file.WriteLine(s);    }    file.Close();    // 读取文件中的内容    string line = "";    StreamReader readfile = new StreamReader("demo.txt");    while((line = readfile.ReadLine()) != null){        Console.WriteLine(line);    }    readfile.Close();    Console.ReadKey();  }}</code></pre><h3 id="用Directory和DirectoryInfo操作文件夹"><a href="#用Directory和DirectoryInfo操作文件夹" class="headerlink" title="用Directory和DirectoryInfo操作文件夹"></a>用Directory和DirectoryInfo操作文件夹</h3><p>参考链接：<a href="http://c.biancheng.net/csharp/directory.html">http://c.biancheng.net/csharp/directory.html</a><br>一个是静态操作，一个是创建对象后操作</p><pre class=" language-C#"><code class="language-C#">string strDir = @"E:\"Directory.CreateDirectory(strDir);Directory.Exists(strDir);  //判断文件夹是否存在Directory.Delete(strDir);  //删除文件夹，如果有子文件夹需要加参数trueDirectory.Move(strDir,@"D:\");//移动文件夹DirectoryInfo directoryInfo = new DirectoryInfo(strDir);directoryInfo.Create(); //创建文件夹directoryInfo.CreateSubdirectory("code-1"); //创建子文件夹directoryInfo.Delete(); //删除文件夹，如果有子文件夹需要加参数truedirectoryInfo.MoveTo("D:\"); // 移动文件夹</code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>含义：数组是用来储存数据的集合，元素类型相同，固定长度，顺序集合。</p><pre class=" language-C#"><code class="language-C#">int[] array1 = new int[3];int[] array2 = new int[3]{1,2,3};int[] array3 = {1,2,3,4,5};array1[0] = 5;        //赋值Debug.Log(array1[0]); //读取foreach(var v in array2){  Debug.Log(v);}</code></pre><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p>动态数组会自动调整大小，可以在指定位置添加删除项目，允许在列表中动态分配内存。</p><pre class=" language-C#"><code class="language-C#">ArrayList arraylist1 = new ArrayList();arraylist1.Add(45);          //添加一个数据int[] array3 = {1,2,3,4,5};arraylist1.AddRange(array3); //添加一组数据arraylist1.Clear();  //清空arraylist1.Contains(12);  //判断是否包含特定元素arraylist1.IndexOf(12); //返回第一次出现的元素索引，没有返回-1arraylist1.Insert(3,66); //索引+插入元素arraylist1.Remove(12); // 删除第一次出现的元素arraylist1.Reverse(); //翻转元素arraylist1.Sort(); //按顺序排列</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>和泛型结合使用，作用与功能类似arraylist，无需装箱拆箱，类型转换,提前定义元素类型，比较安全，编译时就能检查错误。</p><pre class=" language-C#"><code class="language-C#">List<int> list1 = new List<int>();list1.Add(1);// 和arraylist函数类似</code></pre><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表代表了键值对集合，使用键访问集合中的元素。用法比较简单。</p><pre class=" language-C#"><code class="language-C#">Hashtable ht1 = new Hshtable();ht1.Add("1",99);ht1.Clear();if(ht1.ContainsKey("1")){  Debug.Log("包含键为“1”的数据");}ht1.Remove("1");Debug.Log(ht1["1"]);   //读取ht1["1"]=99;           //修改ICollection key = ht1.Keys;foreach(var k in key){      //遍历  Debug.Log(ht1[k]);}</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典也存储键值对，但字典也是和泛型一起用的，提前指导好键值的数据类型。</p><pre class=" language-C#"><code class="language-C#">Dictionary<string,string> dict1 = new Dictionary<string,string>();dict.add("1","100");if(dict1.ContainsKey("1")){  Debug.Log("键存在");}dict1["1"] = 100;foreach(KeyValuePair<string,string> kvp in dict1){  Debug.Log(kvp.Key + " " + kvp.Value);}dict1.Remove("2");dict1.Clear();</code></pre><h3 id="哈希集"><a href="#哈希集" class="headerlink" title="哈希集"></a>哈希集</h3><p>包含不重复项的无序集合</p><pre class=" language-C#"><code class="language-C#">HashSet<int> hs1 = new HashSet<int>();HashSet<int> hs2 = new HashSet<int>();hs1.Add(1);hs1.Add(2);hs1.Add(2); //重复无效Debug.Log(hs1.count); //计算个数hs2.Add(2);hs2.Add(3);hs1.IntersectWith(hs2);  //h1取交集hs1.UnionWith(hs2);  // h1取并集hs1.ExceptWith(hs2);  //h1取差集hs1.SymmetricExceptWith(hs2); //对称差集，即并集中去掉交集的部分</code></pre><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>C#中是有前驱和后驱的双向链表。链表在内存中是离散的，不连续。通过两个指针指向上一个存储位置和上一个存储位置。<br>链表在删除和插入的时候效率比列表和数组快，但查找的时候只能靠遍历，比较慢。</p><pre class=" language-C#"><code class="language-C#">LinkedList<int> linList = new LinkedList<int>();LinkedListNode<int> node;  node = linList.AddFirst(1); //第一个节点linlist.AddAfter(node,2); //添加在某节点后面+具体值linlist.AddBefore(node,0); //添加在某节点前面+具体值Debug.Log(linList.Count);Debug.Log(linList.First.Value); //第一个值Debug.Log(linList.Last.Value); //最后一个值Debug.Log(node.Previous.Value); //节点前一个值Debug.Log(node.Next.Value); //节点后一个值</code></pre><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>先进后出的对象集合</p><pre class=" language-C#"><code class="language-C#">Stack st1 = new Stack();st1.Push("a");st1.Push("b");st1.Push("c");Debug.Log(st1.Count);string v = (string)st1.Pop();v = st1.Peek();  //拿到栈顶的值，不出栈foreach(var v in st1){  Debug.Log(v1);}// 自己实现，使用链表的形式class MyStack{  class StackData{    public StackData nextItem;    public object topData;    public StackData(StackData next,object data){      this.nextItem = next;      this.topData = data;    }    StackData top;    public void Push(object data){      top = new StackData(top,data);    }    public object Pop(){      object rs1 = top.topData;      top = top.nextItem;      return rs1;    }  }}MyStack ms = new MyStack();ms.Push("a");ms.Push("b");ms.Push("c");string v = ms.Pop();</code></pre><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>先进先出的队列集合</p><pre class=" language-C#"><code class="language-C#">Queue queue1 = new Queue();Queue<int> queue2 = new Queue<int>();  // 更多使用这种，效率高，不用装箱拆箱queue2.Enqueue(1);    //入队queue2.Enqueue(2); int v = queue2.Dequeue(); // 自己实现class MyQueue{  class QueueData{    public QueueData nextItem;    public object topData;    public QueueData(QueueData last,object data){      last.nextItem = this;      this.topData = data;    }    QueueData top;    QueueData lastData;    public void Enqueue(object data){      if(top == null){        top = new QueneData(data);      }      else{        lastData = new QueueData(lastData,data);      }    }    public object Dequeue(){      object rs1 = top.topData;      top = top.nextItem;      return rs1;    }  }}Queue mq1 = new MyQueue();mq1.Enqueue(1);    //入队mq1.Enqueue(2); int v = mq1.Dequeue(); int v = mq1.Dequeue(); </code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习的探索性（论文准备）</title>
      <link href="2022/08/18/qiang-hua-xue-xi-de-tan-suo-xing-lun-wen-zhun-bei/"/>
      <url>2022/08/18/qiang-hua-xue-xi-de-tan-suo-xing-lun-wen-zhun-bei/</url>
      
        <content type="html"><![CDATA[<p>参考论文：<a href="https://arxiv.org/pdf/2109.06668.pdf">https://arxiv.org/pdf/2109.06668.pdf</a><br>参考链接：<br><a href="https://zhuanlan.zhihu.com/p/432198920">https://zhuanlan.zhihu.com/p/432198920</a><br><a href="https://zhuanlan.zhihu.com/p/188714833">https://zhuanlan.zhihu.com/p/188714833</a></p><h2 id="类型一：基于不确定性"><a href="#类型一：基于不确定性" class="headerlink" title="类型一：基于不确定性"></a>类型一：基于不确定性</h2><p>这类做法认为智能体对某区域更⾼的不确定性（Uncertainty）往往是因为对该区域不充分的探索导致的，因此乐观地对待不确定性，也即引导智能体去探索不确定性⾼的地⽅，可以实现⾼效探索的⽬的。但访问不确定性高的区域又会导致学习过程的不稳定，因此要做到平衡。<br>代表算法Bootstrapped DQN：通过训练多个网络来使网络产生差异性，网络之间就能学习到不同的信息，从而使得决策不那么片面。<br>参考链接：<a href="https://zhuanlan.zhihu.com/p/192484077">https://zhuanlan.zhihu.com/p/192484077</a></p><h2 id="类型二：内在奖励形式"><a href="#类型二：内在奖励形式" class="headerlink" title="类型二：内在奖励形式"></a>类型二：内在奖励形式</h2><p>ICM:好奇心机制<br>RND：随机网络蒸馏<br>参考链接：<a href="https://blog.csdn.net/tianjuewudi/article/details/121692726">https://blog.csdn.net/tianjuewudi/article/details/121692726</a></p><h2 id="类型三：其他形式"><a href="#类型三：其他形式" class="headerlink" title="类型三：其他形式"></a>类型三：其他形式</h2><ol><li>使用具有不同探索行为的异构actor，以不同的方式探索环境。例如Ape-x、R2D2。</li><li>基于参数空间噪声的探索，不同于对策略输出增加噪声，采⽤噪声对策略参数进⾏扰动，可以使得探索更加多样化，同时保持⼀致性，典型⼯作包括NoisyNet等。</li><li>其他的有Go-Explore，MAVEN等。</li></ol><h2 id="探索策略的四大挑战"><a href="#探索策略的四大挑战" class="headerlink" title="探索策略的四大挑战"></a>探索策略的四大挑战</h2><ol><li><strong>⼤规模状态动作空间</strong>。状态动作空间的增加意味着智能体需要探索的空间变⼤，就⽆疑导致了探索难度的增加。</li><li><strong>稀疏、延迟奖励信号</strong>。稀疏、延迟的奖励信号会使得智能体的学习⾮常困难，⽽探索机制合理与否直接影响了学习效率。</li><li><strong>观测中的⽩噪声</strong>。现实世界的环境通常具有很⾼的随机性，即状态或动作空间中通常会出现不可预测的内容，在探索过程中避免⽩噪声的影响也是提升效率的重要因素。</li><li><strong>多智能体探索挑战</strong>。多智能体任务下，除了上述挑战，指数级增长的状态动作空间、智能体间协同探索、局部探索和全局探索的权衡都是影响多智能体探索效率的重要因素。</li></ol><h2 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h2><p>有三种：<strong>蒙特祖玛的复仇</strong>，<strong>雅达利</strong>，<strong>Vizdoon</strong>。<br>蒙特祖玛的复仇由于其稀疏、延迟的奖励成为⼀个较难解决的任务，需要RL智能体具有较强的探索能⼒才能获得正反馈；⽽穿越多个房间并获得⾼分则进⼀步需要⼈类⽔平的记忆和对环境中事件的控制。整个雅达利系列侧重于对提⾼RL 智能体学习性能的探索⽅法进⾏更全⾯的评估。Vizdoom是另⼀个具有多种奖励配置(从密集到⾮常稀疏)的代表性任务。与前两个任务不同的是，Vizdoom是⼀款带有第⼀⼈称视⻆的导航(和射击)游戏。这模拟了⼀个具有严重的局部可观测性和潜在空间结构的学习环境，更类似于⼈类⾯对的现实世界的学习环境。</p><h2 id="未来的研究方向"><a href="#未来的研究方向" class="headerlink" title="未来的研究方向"></a>未来的研究方向</h2><ol><li>在⼤规模动作空间的探索。在⼤规模动作空间上，融合表征学习、动作语义等⽅法，降低探索算法的计算复杂度仍然是⼀个急需解决的问题。</li><li>在复杂任务（时间步较长、极度稀疏、延迟的奖励设置）上的探索，虽然取得了一定的进展，⽐如蒙特祖玛的复仇，但这些解决办法代价通常较⼤，甚⾄要借助⼤量⼈类先验知识。这其中还存在较多普遍性的问题值得探索。</li><li>⽩噪声问题。现有的⼀些解决⽅案都需要额外估计动态模型或状态表征，这⽆疑增加了计算消耗。除此之外，针对⽩噪声问题，利⽤对抗训练等⽅式增加探索的鲁棒性也是值得研究的问题。</li><li>收敛性。在⾯向不确定性的探索中，线性MDP下认知不确定性是可以收敛到0的，但在深度神经⽹络下维度爆炸使得收敛困难。对于⾯向内在激励的探索，内在激励往往是启发式设计的，缺乏理论上合理性论证。</li><li>多智能体探索。多智能体探索的研究还处于起步阶段，尚未很好地解决上述问题，如局部观测、不稳定、协同探索等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 论文写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习领域方向的期刊、会议、牛人推荐</title>
      <link href="2022/07/21/qiang-hua-xue-xi-ling-yu-fang-xiang-de-qi-kan-hui-yi-niu-ren-tui-jian/"/>
      <url>2022/07/21/qiang-hua-xue-xi-ling-yu-fang-xiang-de-qi-kan-hui-yi-niu-ren-tui-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="有必要关注的网站"><a href="#有必要关注的网站" class="headerlink" title="有必要关注的网站"></a>有必要关注的网站</h2><ol><li><a href="https://www.xueshufan.com/field/97541855?fieldId=97541855&amp;s=001001011001011">学术范</a>，入门者的福音，强推。</li><li><a href="https://www.letpub.com.cn/">Letpub</a>，上面包含所有的SCI期刊，已经在上面投过稿的作者的评论，挑选期刊的好帮手。</li><li><a href="https://www.annualreviews.org/">Annual Reviews</a>,大量综述文献，帮你在本领域入门。</li><li><a href="https://www.researchgate.net/">Research Gate</a>,科研人员的社交网站，关注上面的大牛，能获取到许多的最新资讯。</li><li><a href="https://www.connectedpapers.com/">Connected Papers</a>,通过一篇论文，就能顺藤摸瓜找到同领域的重要论文，迅速扫盲。</li><li><a href="https://paperswithcode.com/">Paper with Code</a>，通过论文找其实现代码。</li></ol><h2 id="期刊推荐"><a href="#期刊推荐" class="headerlink" title="期刊推荐"></a>期刊推荐</h2><ol><li>MACHINE LEARNING,SCI 3区。影响因子：5.414。审稿速度：慢，录取比例：容易。年文章数：159</li><li>Neural Networks，SCI 2区，影响因子：9.657。审稿速度：平均10.5周，其实时间很长，最长可达12个月。难度：一般，年文章数：418.</li><li>ARTIFICIAL INTELLIGENCE，SCI 2区，影响因子：14.5。审稿速度：平均9个月。录取难度：较难。年文章数：130。人工智能的老牌顶级期刊，最近影响因子有所下滑。</li><li>IEEE Transactions on Neural Networks and Learning Systems<br>，SCI 1区，影响因子：14.255。审稿速度：一般半年到一年，有可能两年，一审三个月到一年不等。录取难度：较容易。年文章数：1403。<strong>推荐</strong></li><li>IEEE Access，SCI 3区，影响因子：3.476，审稿速度：6周左右（很快）。录取难度：容易。年文章数：12388。<strong>推荐</strong></li><li>IEEE Transactions on Pattern Analysis and Machine Intelligence，SCI 1区，影响因子：24.314。审稿速度：平均8个月。录取难度：难。年文章数：312。AI领域和CV领域的Top1期刊，含金量极高。</li><li>IEEE Internet of Things Journal，SCI 1区，影响因子：10.238，审稿速度：5到8个月不等。录取难度：较难。年文章数：1341.</li><li>ARTIFICIAL INTELLIGENCE REVIEW，SCI 2区，影响因子：9.588.审稿速度：平均5.3个月。录取难度：一般。年文章数：171。</li><li>Computational Intelligence and Neuroscience，SCI 4区。影响因子：3.120 。审稿速度：2个月左右。录取难度：容易。年文章数：488。如果着急毕业建议多关注期刊旗下特刊（special issue），尤其是国人担任客座编辑的，处理速度快，接受率高。<strong>推荐</strong></li><li>Mobile Information Systems，SCI 4区。影响因子：1.863。审稿速度：一到两个月（速度快）。录取难度：容易。年文章数：506。</li></ol><h2 id="会议推荐"><a href="#会议推荐" class="headerlink" title="会议推荐"></a>会议推荐</h2><ol><li><a href="https://aminer.cn/conf/search/ICML">ICML</a></li><li><a href="https://aminer.cn/conf/search/NeurlPS">NeurlPS</a></li><li><a href="https://aminer.cn/conf/search/ICLR">ICLR</a></li><li><a href="https://aminer.cn/conf/search/AAAI">AAAI</a></li></ol><h2 id="论文数据库"><a href="#论文数据库" class="headerlink" title="论文数据库"></a>论文数据库</h2><ol><li>谷歌学术：不仅能搜索论文，还有众多网络文章，比较庞杂。</li><li>中国知网：中国的行业老大。主要用来搜索硕士博士的毕业论文以及中文期刊，中文论文阅读门槛低，适合新手入门。但用户体验较为一般。</li><li>维普：期刊起家，期刊资源众多，用户体验好。其他资源有点捉襟见肘。</li><li>万方：行业老二，用户体验较好，数据量不如知网。</li><li>掌桥科研：中文外文数据库都有，推荐自己使用看看，不做评价。</li><li>IEEE Xplore：要提供计算机科学、电机工程学和电子学等相关领域文献的索引、摘要以及全文下载服务。它基本覆盖了电气电子工程师学会（IEEE）和工程技术学会（IET）的文献资料，收录了超过2百万份文献。</li><li>SCI Hub：免费阅读论文，在没有学校购买的数据库的支持下的选择。</li><li>AMiner：强推。对人工智能领域十分友好，能够很方便地搜索会议论文。</li><li>Web of Science：收录各学科领域中权威、有影响力的期刊，包括著名的三大引文索引数据库(SCI,SSCI,A&amp;HCI)。</li><li>Proquest：支持多种语言，是目前世界上规模最大、使用最广泛的博硕士论文数据库。</li><li>Wiley InterScience：收录了360多种科学、工程技术、医疗领域及相关专业期刊、30多种大型专业参考书、13种实验室手册的全文和500多个题目的Wiley学术图书的全文。</li></ol><h2 id="领域牛人"><a href="#领域牛人" class="headerlink" title="领域牛人"></a>领域牛人</h2><ol><li>Richard S. Sutton：现代强化学习之父，开山鼻祖型牛人。</li><li>David Silver：DeepMind的首席研究科学家和伦敦大学学院的教授，AlphaGo创始人之一，Sutton的学生。</li><li>Andrew Barto：Sutton的老师，马萨诸塞大学安姆斯特分校的计算机科学教授。</li></ol><h2 id="顶尖机构"><a href="#顶尖机构" class="headerlink" title="顶尖机构"></a>顶尖机构</h2><ol><li>Google旗下前沿人工智能企业Deepmind。强化学习的两大派系之一的开创者，拥有开山鼻祖级的大牛Richard S. Sutton及超级大牛David Silver。</li><li>University of California, Berkeley，加利福尼亚大学伯克利分校。</li><li>Stanford University，斯坦福大学。</li><li>Georgia Institute of Technology，佐治亚理工学院。</li><li>OpenAI，人工智能公司，强化学习的两大派系之一的开创者。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 论文写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCI写作指南</title>
      <link href="2022/07/19/sci-xie-zuo-zhi-nan/"/>
      <url>2022/07/19/sci-xie-zuo-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://space.bilibili.com/230105574/channel/seriesdetail?sid=1569600">期刊审稿人手把手教你写一篇SCI</a><br>我的相关文章：<a href="https://blog.csdn.net/tianjuewudi/article/details/112503959">科研方法笔记</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人为学术菜鸟，这篇文章是我初入学术圈，收集网上的资料，归纳总结而来，请各位大佬多多指教。</p><h2 id="研究前"><a href="#研究前" class="headerlink" title="研究前"></a>研究前</h2><p>确定研究方向。<br>大量阅读论文。<br>阅读时做一个word文档，五列的表格。<br>第一列，文献标题。第二列，期刊名称。第三列，研究对象、问题。第四列，研究方法、理论、视角。第五列，数据来源。</p><h2 id="论文写作"><a href="#论文写作" class="headerlink" title="论文写作"></a>论文写作</h2><p>首先，要明白一篇论文由几个部分构成，首先是标题（Title），然后是摘要（Abstract），然后是引言或文献综述（Introduction），研究方法（method），结果和讨论（result/discussion），结论（conclusion），参考文献（reference）。<br>其中题目和摘要是浓缩的精华,需要以简洁明了的语言在很短的篇幅介绍文章的内容，而引言和文献综述的目的在于讲别人的故事想办法引出自己的故事。研究方法里包含你的实验，你的公式，你的算法。结果和讨论是论文中的重头戏，通过现象看本质，通过实验结果得出有意义的东西。最后是结论，用来阐述文章的贡献。结论后面会附上参考文献，是我们对于前人和同行的致敬。<br>写作顺序：首先，我们应该从<strong>研究方法</strong>开始写起。当得到一个问题时，我们应该去分析和解决它，得出结论以后，再进入<strong>结果和讨论</strong>的写作部分。然后自然而然地过渡到<strong>结论</strong>部分。在这过程中需要自始至终保持<strong>文献</strong>的阅读量，和别人的工作对比，找到自己工作的独创性。然后把这些形成<strong>引言和文献综述</strong>部分。最后在提交之前精雕细琢写<strong>标题和摘要</strong>。</p><h3 id="引言（Introduction）"><a href="#引言（Introduction）" class="headerlink" title="引言（Introduction）"></a>引言（Introduction）</h3><p>引言的部分应该回答两个问题：</p><ol><li>研究内容是什么？</li><li>研究动机是什么？</li></ol><p>第二个问题要给第一个问题作出合理的解释，能够自圆其说，带领读者走入到作者的逻辑体系。应当包含三个内容：</p><ol><li>背景信息</li><li>文献</li><li>课题陈述</li></ol><p>其中前两项解决动机问题，引出后一项的课题陈述。<br>在<strong>背景信息</strong>中，我们可以从一个宽泛的话题入手，逐步走入到我们的研究当中，这当中有数据，有陈述，有现象。具体来说，我们可以在第一段先大范围地阐述本领域的现状，然后第二段缩小范围到我们的研究领域中，反映出我们研究的重要性，突出目前领域的现状和存在的一些缺陷，而我们的研究内容是对解决这个缺陷有帮助的。<br>然后进入到<strong>文献</strong>部分，目的是通过别人的成果引出本领域的一个空白，而我们研究正好填补了这个空白（句式：先陈述别人的成果，Howerver，还有某些缺陷，而本技术应用不广）<br>然后可以介绍我们的技术了，首先介绍其在其他领域中的应用，取得了哪些不错的成果等等。<br>最后进入<strong>课题陈述</strong>，句式如下：本文研究了…..。并提出了…方法，进行了…实验。本文的结构如下：第二部分…，第三部分…. 。</p><p>注意：</p><ol><li>最好引用的是5年以内的文献，也可以有一些十年内的。</li><li>选取核实的文献，能够引导读者进入本文的逻辑观。</li><li>尽量加一张好看的图或表在中间。</li><li>篇幅大约占全文10%</li></ol><h3 id="研究方法（method）"><a href="#研究方法（method）" class="headerlink" title="研究方法（method）"></a>研究方法（method）</h3><p>这部分内容是研究是一开始就能动笔的，也是最好写的部分。好写在于这部分内容最能体现本文做了哪些工作，言之有物，从写作的角度可以视为记流水账。而这部分难点不在于写，而在于写的内容。<br>不同的文章类型在写这部分内容的时候会有较大差别。例如：理论型的文章需要写推导过程，而实证类的文章需要写调查方法（实验过程），数据处理。</p><p><strong>目的</strong>：向读者解释作者是如何得到结果的。在条件允许下，读者应当可以重现结果。<br><strong>要求</strong>：需要提供<strong>足够的、准确的技术细节</strong>，包含假设、数学推导、验证、实验设备。表达逻辑应当是简洁清晰的。<br><strong>具体做法</strong>：参考本领域已经发表的不错的论文照猫画虎。例如控制领域中，有的论文以数学模型作为第二章，控制器建立作为第三章，稳定性分析作为第四章，实验设备作为第五章。这四章都是研究方法的范畴。<br><strong>注意事项</strong>：</p><ol><li>符号命名的一致性。当文章中存在很多符号的时候容易造成混乱，我们需要在文章一开始建立一个表格，当符号第一次出现的时候要对其进行描述。 <img src="/2022/07/19/sci-xie-zuo-zhi-nan/1.png" class><img src="/2022/07/19/sci-xie-zuo-zhi-nan/2.png" class></li><li>强烈建议用Latex编辑你的论文，否则要尤其注意公式的编号问题。</li><li>不要灌水，不要写无关的公式和背景，无关的意思是对后面的推断等内容没有帮助，这时应当考虑把其放到引言部分。</li></ol><h2 id="结果（result）"><a href="#结果（result）" class="headerlink" title="结果（result）"></a>结果（result）</h2><p>这部分内容真正体现了作者的学术水平。对于一个看起来很简单的东西，学术大牛往往能点石成金，妙笔生花，但这种文学功底是通过大量的科研、阅读、写作训练出来的，没有捷径可走。<br>但是，对于一个刚刚接触论文写作的人来说，这里可以有一套入门级的模板可供参考。这里用的是结果+讨论的写作模式，可分为三步：</p><ol><li><strong>描述结果</strong>。视觉描述：一般是描述图和表（重要），还有一种是语言描述，可以进行定性和定理的描述。</li><li><strong>分析结果</strong>。通常用的有论证的方法和对比的方法。</li><li><strong>讨论结果</strong>。可以包含三个层面，第一个层面是意义，结果是如何验证你论文的贡献的（例如实验结果验证了算法的可行性）。 第二个层面是展望，这个成果可以如何得到扩展等。第三个层面是猜想和假设。面对结果不那么符合预期的内容不要回避 ，应当给出自己的猜想，自圆其说。</li></ol><p>我们可以重复上面的三步分析多个结果，要注意详略得当，重要的结果篇幅应当大一些。</p><img src="/2022/07/19/sci-xie-zuo-zhi-nan/3.png" class><img src="/2022/07/19/sci-xie-zuo-zhi-nan/4.png" class><img src="/2022/07/19/sci-xie-zuo-zhi-nan/5.png" class> <p>因为<strong>图表</strong>是审稿人第一时间浏览并对文章作出判断的部分，关系到文章的第一印象，务必重视。<br>注意：</p><ol><li>参考期刊的要求，标题和序号注意规范。</li><li>所有的图表必须在文章中有所提及。</li><li>提及图表要引用图表的编号（According to Fig.5），不能是（The above figure…）</li><li>图表中的表达方式和论文中要保持一致。重点检查符号，单位。</li><li>图表标题清晰、准确、完整，不要担心过长。 </li><li>用颜色和图例区分多个数据，避免过多的数据，图片要清晰可读，重复考虑到黑白打印后的效果。</li><li>当我们需要做对比的时候，需要把几幅图放在一起凑成一幅图，因此需要在每一幅图下放副标题。<img src="/2022/07/19/sci-xie-zuo-zhi-nan/6.png" class> </li><li>杜绝一图多投，每一个图投不同的杂志一定要经过修改。就算要用同样的，也要加上引用。</li><li>保留各种原始数据，以应对审稿人提出的各种问题。</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>结论是对结果与讨论（result）的总结，一般是一到两段。 开头需要用一句话来概括文章的主要研究方法和主题。注意不要重复结果部分，要改写。可以写成发现，扩展，未来方案三个部分。可以用同义词替换等等方法改写，分享一个同义词改写的网站：<a href="http://www.thesaurus.com./">www.thesaurus.com。</a><br>结论部分需要强调你的贡献，和引言部分形成对应。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>含义：摘取每个部分的要点。<br>要求：在写这一段之前需要完成正文所有的其他部分，才能摘取关键信息<br>要点：</p><ol><li>在摘取引言部分：我们可以从引言的三个部分各摘一句话，形成三句话（背景、文献、课题），这三句话的目的是强调文章的重要性。</li><li>摘取研究方法：用一到两句话简练地介绍研究方法。</li><li>摘取结果部分：只选取最重要的几个结果，如果有数据，只列最重要的数据。</li><li> 摘取结论，改写一下，强调文章的贡献。</li></ol><p>这四个部分中，2、3解释做了什么，1、4描述了文章的贡献和重要性。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一般包含研究对象和研究方法，可以隐喻研究结果（Improvment、Reduce）。需要包含所有的关键词。<br>例子：</p><ol><li>Designing an Input-Linearized_Adaptive Sliding Mode Coupled Nonlinear Integral controller，Designing是研究方法，后面是研究内容，其中研究内容包含了所有关键词。</li><li>Distributed Hammerstein modeling for crosscoupling effect of muti-axis piezoelectric micropositioning stages。其中Distributed Hammerstein modeling是研究方法，后面是研究内容。</li></ol><h2 id="如何恢复审稿人的意见"><a href="#如何恢复审稿人的意见" class="headerlink" title="如何恢复审稿人的意见"></a>如何恢复审稿人的意见</h2><p>1.调整心态，休息一天。当等待几个月的审稿意见到手后，可能你辛辛苦苦写出来的文章会遭遇尖锐的批评，为了避免情绪化的行为，我们需要休息一天再处理问题。审稿人是你的朋友，不是你的敌人，能够帮你把跟随你一生的论文中的隐患排除掉。<br>2. 一定要认真，逐一回答审稿人的每一条问题。<br>3. 要在文章中清晰直接地标明所有的修改。每一处的修改都与需要修改的问题对应，高亮标出。<br>4. 要礼貌，客气。同行评审没有报酬（SCI中），要懂得感激编委和评审的时间（The co-authers and I would like thank you for the time and efford spent in reviewing the manuscript），对相应的意见表示赞同（The authers would like to thank the reviewer’s comment on this problem），感激要发自内心，不用每个问题都表示感激。不同意也要委婉表达（The reviewer’s statement is correct in that…Howerver，the authors wish to.. corresponding work in the near future and will publish it at a later time.The reviewer’s comment is very useful and profound.However,the current effort…）<br>5. 当审稿人提出图表文字格式问题时，检查是否还有类似问题，不要说一个地方，改一个地方。<br>6. 当审稿人要求加引用文献，提出忽略了比较重要的工作时，慎重对待，这表示，审稿人对该领域非常熟悉，要浏览他们提到的文章，加入与放入参考文献相关的讨论。如果是要求引用非常多无关领域的文章，可以拒绝。<br>7. 最难回答的问题是创新性相关的问题，需要回顾自己的研究结论并发掘价值，价值不够可能需要做其他实验去补充。对于有些领域最难的是加补实验，如果不能完成，尽量设计其他方案提供其他结果解释审稿人的问题，并说明实验的困难，并找一些其他文章的证据证明观点。<br>8. 回复reviewer的时间在不需要补充实验的情况下是一到两周。如果部分研究工作需要大修，则需要一个月甚至更长。<br>9. 审稿人必问：文章背景相关，贡献，与重要的文献的关系和比较。<br>10. 会被直接拒掉的文章：明显的数学，工程常识错误，图标潦草，错字错词过多，图片信息量不足（灌水）。</p>]]></content>
      
      
      <categories>
          
          <category> 论文写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMDetection简要教程</title>
      <link href="2022/05/17/mmdetection-jian-yao-jiao-cheng/"/>
      <url>2022/05/17/mmdetection-jian-yao-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p> 参考链接：</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习库PARL的使用</title>
      <link href="2022/03/20/qiang-hua-xue-xi-ku-parl-de-shi-yong/"/>
      <url>2022/03/20/qiang-hua-xue-xi-ku-parl-de-shi-yong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习库Tianshou各项功能的使用</title>
      <link href="2022/03/20/qiang-hua-xue-xi-ku-tianshou-ge-xiang-gong-neng-de-shi-yong/"/>
      <url>2022/03/20/qiang-hua-xue-xi-ku-tianshou-ge-xiang-gong-neng-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Tianshou（天授）强化学习库以代码简洁优雅，易修改而闻名，是从事强化学习科研人员的不二之选。不仅支持目前主流的单智能体强化学习算法，还支持模仿学习，好奇心模块，和开发中的多智能体算法。</p><p>github页面:<a href="https://github.com/thu-ml/tianshou">https://github.com/thu-ml/tianshou</a></p><p>说明文档：<a href="https://tianshou.readthedocs.io/en/master/">https://tianshou.readthedocs.io/en/master/</a></p><h1 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h1><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习PPO代码讲解</title>
      <link href="2022/03/20/qiang-hua-xue-xi-ppo-dai-ma-jiang-jie/"/>
      <url>2022/03/20/qiang-hua-xue-xi-ppo-dai-ma-jiang-jie/</url>
      
        <content type="html"><![CDATA[<p> 阅读本文前对PPO的基本原理要有概念性的了解，本文基于我的上一篇文章：<a href="https://blog.csdn.net/tianjuewudi/article/details/120212234">强化学习之PPO</a></p><p>当然，查看代码对于算法的理解直观重要，这使得你的知识不止停留在概念的层面，而是深入到应用层面。</p><p>代码采用了简单易懂的强化学习库PARL，对新手十分友好。</p><p>首先先来复述一下PARL的代码架构。强化学习可以看作智能体和环境交互学习的过程。而环境是独立于算法框架之外的内容。PARL把智能体分成了Agent，Algorthm，Model三个部分，这三个部分是层层嵌套的关系而不是相互独立的关系。Model负责定义神经网络模型，Algorithm负责利用Model的神经网络模型来定义算法。而Agent则负责利用算法来与环境进行交互和训练。</p><img src="/2022/03/20/qiang-hua-xue-xi-ppo-dai-ma-jiang-jie/1.png" class><p>因此我们就分成三个部分来讲解PARL对PPO算法的实际应用。</p><p>如果想了解全貌，可以直接从主程序的main函数开始看。</p><h2 id="神经网络模型"><a href="#神经网络模型" class="headerlink" title="神经网络模型"></a>神经网络模型</h2><p>PPO是一个Actor-Critic算法，我们需要给它定义两个神经网络模型，一个给actor，一个给Critic：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> parl<span class="token keyword">import</span> paddle<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">MujocoModel</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs_dim<span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MujocoModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>actor <span class="token operator">=</span> Actor<span class="token punctuation">(</span>obs_dim<span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>critic <span class="token operator">=</span> Critic<span class="token punctuation">(</span>obs_dim<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">policy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>actor<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>critic<span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs_dim<span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Actor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>obs_dim<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc_mean <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 此处创建了一个Tensor来表示标准差的log，用来提高模型的探索能力，并且这些参数可以自动优化</span>        self<span class="token punctuation">.</span>log_std <span class="token operator">=</span> paddle<span class="token punctuation">.</span>static<span class="token punctuation">.</span>create_parameter<span class="token punctuation">(</span>            <span class="token punctuation">[</span>act_dim<span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">,</span>            default_initializer<span class="token operator">=</span>nn<span class="token punctuation">.</span>initializer<span class="token punctuation">.</span>Constant<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> paddle<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> paddle<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        mean <span class="token operator">=</span> self<span class="token punctuation">.</span>fc_mean<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> mean<span class="token punctuation">,</span> self<span class="token punctuation">.</span>log_std<span class="token keyword">class</span> <span class="token class-name">Critic</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Critic<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>obs_dim<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> paddle<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> paddle<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> value</code></pre><p>可以看到，这个文件非常简单，定义了actor和critic两个网络的结构，然后用再用一个类来封装它们。</p><p>这两个网络都是较为简单的输入状态，经过线性层和激活函数后，输出动作和value。注意这里的价值网络指的是状态价值而不是动作价值，所以只输入了状态而没有输入动作。</p><h2 id="PPO算法"><a href="#PPO算法" class="headerlink" title="PPO算法"></a>PPO算法</h2><p>PPO有两种，第一种是用KL散度来限制更新幅度，第二种是直接clip更新幅度，一般现在用第二种方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> parl<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>distributions <span class="token keyword">import</span> Normal<span class="token keyword">from</span> parl<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>utils <span class="token keyword">import</span> check_model_method__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'PPO'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">PPO</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Algorithm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 model<span class="token punctuation">,</span>                 clip_param<span class="token punctuation">,</span>                 value_loss_coef<span class="token punctuation">,</span>                 entropy_coef<span class="token punctuation">,</span>                 initial_lr<span class="token punctuation">,</span>                 eps<span class="token operator">=</span>None<span class="token punctuation">,</span>                 max_grad_norm<span class="token operator">=</span>None<span class="token punctuation">,</span>                 use_clipped_value_loss<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 检查两个网络</span>        check_model_method<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        check_model_method<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">'policy'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>clip_param <span class="token operator">=</span> clip_param        self<span class="token punctuation">.</span>value_loss_coef <span class="token operator">=</span> value_loss_coef        self<span class="token punctuation">.</span>entropy_coef <span class="token operator">=</span> entropy_coef        self<span class="token punctuation">.</span>max_grad_norm <span class="token operator">=</span> max_grad_norm        self<span class="token punctuation">.</span>use_clipped_value_loss <span class="token operator">=</span> use_clipped_value_loss        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>initial_lr<span class="token punctuation">,</span> eps<span class="token operator">=</span>eps<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs_batch<span class="token punctuation">,</span> actions_batch<span class="token punctuation">,</span> value_preds_batch<span class="token punctuation">,</span> return_batch<span class="token punctuation">,</span>              old_action_log_probs_batch<span class="token punctuation">,</span> adv_targ<span class="token punctuation">)</span><span class="token punctuation">:</span>        values <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value<span class="token punctuation">(</span>obs_batch<span class="token punctuation">)</span>        mean<span class="token punctuation">,</span> log_std <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>policy<span class="token punctuation">(</span>obs_batch<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 建立分布</span>        dist <span class="token operator">=</span> Normal<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> log_std<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># log_prob为计算定义的正态分布中对应的概率密度的对数，sum将其最后一个维度相加，并保持维度不变</span>        action_log_probs <span class="token operator">=</span> dist<span class="token punctuation">.</span>log_prob<span class="token punctuation">(</span>actions_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算熵</span>        dist_entropy <span class="token operator">=</span> dist<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这四行为PPO算法计算目标优化函数的公式，计算actor网络的loss</span>        ratio <span class="token operator">=</span> torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>action_log_probs <span class="token operator">-</span> old_action_log_probs_batch<span class="token punctuation">)</span>        surr1 <span class="token operator">=</span> ratio <span class="token operator">*</span> adv_targ        surr2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>ratio<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>clip_param<span class="token punctuation">,</span>                            <span class="token number">1.0</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>clip_param<span class="token punctuation">)</span> <span class="token operator">*</span> adv_targ        action_loss <span class="token operator">=</span> <span class="token operator">-</span>torch<span class="token punctuation">.</span>min<span class="token punctuation">(</span>surr1<span class="token punctuation">,</span> surr2<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算critic网络的loss</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_clipped_value_loss<span class="token punctuation">:</span>            value_pred_clipped <span class="token operator">=</span> value_preds_batch <span class="token operator">+</span> \                <span class="token punctuation">(</span>values <span class="token operator">-</span> value_preds_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token operator">-</span>self<span class="token punctuation">.</span>clip_param<span class="token punctuation">,</span> self<span class="token punctuation">.</span>clip_param<span class="token punctuation">)</span>            value_losses <span class="token operator">=</span> <span class="token punctuation">(</span>values <span class="token operator">-</span> return_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            value_losses_clipped <span class="token operator">=</span> <span class="token punctuation">(</span>value_pred_clipped <span class="token operator">-</span> return_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            value_loss <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>value_losses<span class="token punctuation">,</span>                                         value_losses_clipped<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            value_loss <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>return_batch <span class="token operator">-</span> values<span class="token punctuation">)</span><span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 三个Loss一定比例相加，其中为了增加探索性，熵越大越好，因此为负</span>        <span class="token punctuation">(</span>value_loss <span class="token operator">*</span> self<span class="token punctuation">.</span>value_loss_coef <span class="token operator">+</span> action_loss <span class="token operator">-</span>         dist_entropy <span class="token operator">*</span> self<span class="token punctuation">.</span>entropy_coef<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>max_grad_norm<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dist_entropy<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># actor和critic的输出</span>    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        mean<span class="token punctuation">,</span> log_std <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>policy<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通过均值和标准差建立高斯分布</span>        dist <span class="token operator">=</span> Normal<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> log_std<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对分布进行采样</span>        action <span class="token operator">=</span> dist<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># log_prob为计算定义的正态分布中对应的概率密度的对数，sum将其最后一个维度相加，并保持维度不变</span>        action_log_probs <span class="token operator">=</span> dist<span class="token punctuation">.</span>log_prob<span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span class="token punctuation">,</span> action<span class="token punctuation">,</span> action_log_probs    <span class="token comment" spellcheck="true"># 通过输入状态到actor来预测动作输出</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        mean<span class="token punctuation">,</span> _ <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>policy<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token keyword">return</span> mean    <span class="token comment" spellcheck="true"># 通过输入状态到critic来计算</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value<span class="token punctuation">(</span>obs<span class="token punctuation">)</span></code></pre><h2 id="智能体"><a href="#智能体" class="headerlink" title="智能体"></a>智能体</h2><p>智能体初始化的参数中传入了algorithm，说明PPO算法是嵌套在智能体中的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> parl<span class="token keyword">import</span> paddle<span class="token keyword">class</span> <span class="token class-name">MujocoAgent</span><span class="token punctuation">(</span>parl<span class="token punctuation">.</span>Agent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MujocoAgent<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过状态来预测动作输出</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        obs <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        action <span class="token operator">=</span> self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token keyword">return</span> action<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 给定状态，预测状态价值，动作，以及动作概率密度的对数的加和</span>    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        obs <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        value<span class="token punctuation">,</span> action<span class="token punctuation">,</span> action_log_probs <span class="token operator">=</span> self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \            action_log_probs<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 重要！调用该函数即进行学习</span>    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_value<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> gae_lambda<span class="token punctuation">,</span> ppo_epoch<span class="token punctuation">,</span> num_mini_batch<span class="token punctuation">,</span>              rollouts<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Learn current batch of rollout for ppo_epoch epochs.        Args:            next_value (np.array): next predicted value for calculating advantage            gamma (float): the discounting factor            gae_lambda (float): lambda for calculating n step return            ppo_epoch (int): number of epochs K            num_mini_batch (int): number of mini-batches            rollouts (RolloutStorage): the rollout storage that contains the current rollout        """</span>        value_loss_epoch <span class="token operator">=</span> <span class="token number">0</span>        action_loss_epoch <span class="token operator">=</span> <span class="token number">0</span>        dist_entropy_epoch <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># PPO中每次学习迭代的次数ppo_epoch</span>        <span class="token keyword">for</span> e <span class="token keyword">in</span> range<span class="token punctuation">(</span>ppo_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 得到采样的数据</span>            data_generator <span class="token operator">=</span> rollouts<span class="token punctuation">.</span>sample_batch<span class="token punctuation">(</span>next_value<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span>                                                   gae_lambda<span class="token punctuation">,</span> num_mini_batch<span class="token punctuation">)</span>            <span class="token keyword">for</span> sample <span class="token keyword">in</span> data_generator<span class="token punctuation">:</span>                obs_batch<span class="token punctuation">,</span> actions_batch<span class="token punctuation">,</span> \                    value_preds_batch<span class="token punctuation">,</span> return_batch<span class="token punctuation">,</span> old_action_log_probs_batch<span class="token punctuation">,</span> \                            adv_targ <span class="token operator">=</span> sample                obs_batch <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>obs_batch<span class="token punctuation">)</span>                actions_batch <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>actions_batch<span class="token punctuation">)</span>                value_preds_batch <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>value_preds_batch<span class="token punctuation">)</span>                return_batch <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>return_batch<span class="token punctuation">)</span>                old_action_log_probs_batch <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>                    old_action_log_probs_batch<span class="token punctuation">)</span>                adv_targ <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>adv_targ<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 使用PPO计算Loss，并自己调整网络参数</span>                value_loss<span class="token punctuation">,</span> action_loss<span class="token punctuation">,</span> dist_entropy <span class="token operator">=</span> self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>                    obs_batch<span class="token punctuation">,</span> actions_batch<span class="token punctuation">,</span> value_preds_batch<span class="token punctuation">,</span> return_batch<span class="token punctuation">,</span>                    old_action_log_probs_batch<span class="token punctuation">,</span> adv_targ<span class="token punctuation">)</span>                value_loss_epoch <span class="token operator">+=</span> value_loss                action_loss_epoch <span class="token operator">+=</span> action_loss                dist_entropy_epoch <span class="token operator">+=</span> dist_entropy        num_updates <span class="token operator">=</span> ppo_epoch <span class="token operator">*</span> num_mini_batch        value_loss_epoch <span class="token operator">/=</span> num_updates        action_loss_epoch <span class="token operator">/=</span> num_updates        dist_entropy_epoch <span class="token operator">/=</span> num_updates        <span class="token keyword">return</span> value_loss_epoch<span class="token punctuation">,</span> action_loss_epoch<span class="token punctuation">,</span> dist_entropy_epoch    <span class="token comment" spellcheck="true"># 给定状态，评估状态价值</span>    <span class="token keyword">def</span> <span class="token function">value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        obs <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        val <span class="token operator">=</span> self<span class="token punctuation">.</span>alg<span class="token punctuation">.</span>value<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token keyword">return</span> val<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h2><p>储存信息的类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>io <span class="token keyword">import</span> BatchSampler<span class="token punctuation">,</span> RandomSampler<span class="token keyword">class</span> <span class="token class-name">RolloutStorage</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> obs_dim<span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num_steps <span class="token operator">=</span> num_steps        self<span class="token punctuation">.</span>obs_dim <span class="token operator">=</span> obs_dim        self<span class="token punctuation">.</span>act_dim <span class="token operator">=</span> act_dim        self<span class="token punctuation">.</span>obs <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> obs_dim<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>actions <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps<span class="token punctuation">,</span> act_dim<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>value_preds <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>returns <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>action_log_probs <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rewards <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>masks <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'bool'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bad_masks <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>num_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'bool'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> action_log_probs<span class="token punctuation">,</span> value_preds<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span>               masks<span class="token punctuation">,</span> bad_masks<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> obs        self<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> actions        self<span class="token punctuation">.</span>rewards<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> rewards        self<span class="token punctuation">.</span>action_log_probs<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> action_log_probs        self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> value_preds        self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> masks        self<span class="token punctuation">.</span>bad_masks<span class="token punctuation">[</span>self<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> bad_masks        self<span class="token punctuation">.</span>step <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>num_steps    <span class="token keyword">def</span> <span class="token function">sample_batch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                     next_value<span class="token punctuation">,</span>                     gamma<span class="token punctuation">,</span>                     gae_lambda<span class="token punctuation">,</span>                     num_mini_batch<span class="token punctuation">,</span>                     mini_batch_size<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># calculate return and advantage first</span>        self<span class="token punctuation">.</span>compute_returns<span class="token punctuation">(</span>next_value<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> gae_lambda<span class="token punctuation">)</span>        advantages <span class="token operator">=</span> self<span class="token punctuation">.</span>returns<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        advantages <span class="token operator">=</span> <span class="token punctuation">(</span>advantages <span class="token operator">-</span> advantages<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>            advantages<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># generate sample batch</span>        mini_batch_size <span class="token operator">=</span> self<span class="token punctuation">.</span>num_steps <span class="token operator">//</span> num_mini_batch        sampler <span class="token operator">=</span> BatchSampler<span class="token punctuation">(</span>            sampler<span class="token operator">=</span>RandomSampler<span class="token punctuation">(</span>range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            batch_size<span class="token operator">=</span>mini_batch_size<span class="token punctuation">,</span>            drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> indices <span class="token keyword">in</span> sampler<span class="token punctuation">:</span>            obs_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>indices<span class="token punctuation">]</span>            actions_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>indices<span class="token punctuation">]</span>            value_preds_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>indices<span class="token punctuation">]</span>            returns_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>returns<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>indices<span class="token punctuation">]</span>            old_action_log_probs_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>action_log_probs<span class="token punctuation">[</span>indices<span class="token punctuation">]</span>            value_preds_batch <span class="token operator">=</span> value_preds_batch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            returns_batch <span class="token operator">=</span> returns_batch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            old_action_log_probs_batch <span class="token operator">=</span> old_action_log_probs_batch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>                <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            adv_targ <span class="token operator">=</span> advantages<span class="token punctuation">[</span>indices<span class="token punctuation">]</span>            adv_targ <span class="token operator">=</span> adv_targ<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> obs_batch<span class="token punctuation">,</span> actions_batch<span class="token punctuation">,</span> value_preds_batch<span class="token punctuation">,</span> returns_batch<span class="token punctuation">,</span> old_action_log_probs_batch<span class="token punctuation">,</span> adv_targ    <span class="token keyword">def</span> <span class="token function">after_update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bad_masks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bad_masks<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">compute_returns</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_value<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> gae_lambda<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> next_value        gae <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> step <span class="token keyword">in</span> reversed<span class="token punctuation">(</span>range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rewards<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            delta <span class="token operator">=</span> self<span class="token punctuation">.</span>rewards<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">+</span> gamma <span class="token operator">*</span> self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>                step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>step<span class="token punctuation">]</span>            gae <span class="token operator">=</span> delta <span class="token operator">+</span> gamma <span class="token operator">*</span> gae_lambda <span class="token operator">*</span> self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> gae            gae <span class="token operator">=</span> gae <span class="token operator">*</span> self<span class="token punctuation">.</span>bad_masks<span class="token punctuation">[</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>returns<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> gae <span class="token operator">+</span> self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>step<span class="token punctuation">]</span></code></pre><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> paddle<span class="token keyword">import</span> gym<span class="token keyword">from</span> mujoco_model <span class="token keyword">import</span> MujocoModel<span class="token keyword">from</span> mujoco_agent <span class="token keyword">import</span> MujocoAgent<span class="token keyword">from</span> storage <span class="token keyword">import</span> RolloutStorage<span class="token keyword">from</span> parl<span class="token punctuation">.</span>algorithms <span class="token keyword">import</span> PPO<span class="token keyword">from</span> parl<span class="token punctuation">.</span>env<span class="token punctuation">.</span>mujoco_wrappers <span class="token keyword">import</span> wrap_rms<span class="token punctuation">,</span> get_ob_rms<span class="token keyword">from</span> parl<span class="token punctuation">.</span>utils <span class="token keyword">import</span> summary<span class="token keyword">import</span> argparseLR <span class="token operator">=</span> <span class="token number">3e</span><span class="token operator">-</span><span class="token number">4</span>GAMMA <span class="token operator">=</span> <span class="token number">0.99</span>EPS <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span>  <span class="token comment" spellcheck="true"># Adam optimizer epsilon (default: 1e-5)</span>GAE_LAMBDA <span class="token operator">=</span> <span class="token number">0.95</span>  <span class="token comment" spellcheck="true"># Lambda parameter for calculating N-step advantage</span>ENTROPY_COEF <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true"># Entropy coefficient (ie. c_2 in the paper)</span>VALUE_LOSS_COEF <span class="token operator">=</span> <span class="token number">0.5</span>  <span class="token comment" spellcheck="true"># Value loss coefficient (ie. c_1 in the paper)</span>MAX_GRAD_NROM <span class="token operator">=</span> <span class="token number">0.5</span>  <span class="token comment" spellcheck="true"># Max gradient norm for gradient clipping</span>NUM_STEPS <span class="token operator">=</span> <span class="token number">2048</span>  <span class="token comment" spellcheck="true"># data collecting time steps (ie. T in the paper)</span>PPO_EPOCH <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># number of epochs for updating using each T data (ie K in the paper)</span>CLIP_PARAM <span class="token operator">=</span> <span class="token number">0.2</span>  <span class="token comment" spellcheck="true"># epsilon in clipping loss (ie. clip(r_t, 1 - epsilon, 1 + epsilon))</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span><span class="token comment" spellcheck="true"># Logging Params</span>LOG_INTERVAL <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 用于评估策略</span><span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> ob_rms<span class="token punctuation">)</span><span class="token punctuation">:</span>    eval_env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>args<span class="token punctuation">.</span>env<span class="token punctuation">)</span>    eval_env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>args<span class="token punctuation">.</span>seed <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    eval_env <span class="token operator">=</span> wrap_rms<span class="token punctuation">(</span>eval_env<span class="token punctuation">,</span> GAMMA<span class="token punctuation">,</span> test<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ob_rms<span class="token operator">=</span>ob_rms<span class="token punctuation">)</span>    eval_episode_rewards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    obs <span class="token operator">=</span> eval_env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>eval_episode_rewards<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>        action <span class="token operator">=</span> agent<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Observe reward and next obs</span>        obs<span class="token punctuation">,</span> _<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> eval_env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># get validation rewards from info['episode']['r']</span>        <span class="token keyword">if</span> done<span class="token punctuation">:</span>            eval_episode_rewards<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">'episode'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eval_env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Evaluation using {} episodes: mean reward {:.5f}\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        len<span class="token punctuation">(</span>eval_episode_rewards<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>eval_episode_rewards<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>eval_episode_rewards<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    paddle<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>args<span class="token punctuation">.</span>seed<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建环境</span>    env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>args<span class="token punctuation">.</span>env<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>args<span class="token punctuation">.</span>seed<span class="token punctuation">)</span>    env <span class="token operator">=</span> wrap_rms<span class="token punctuation">(</span>env<span class="token punctuation">,</span> GAMMA<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建模型</span>    model <span class="token operator">=</span> MujocoModel<span class="token punctuation">(</span>env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据模型创建PPO算法</span>    algorithm <span class="token operator">=</span> PPO<span class="token punctuation">(</span>model<span class="token punctuation">,</span> CLIP_PARAM<span class="token punctuation">,</span> VALUE_LOSS_COEF<span class="token punctuation">,</span> ENTROPY_COEF<span class="token punctuation">,</span> LR<span class="token punctuation">,</span> EPS<span class="token punctuation">,</span>                    MAX_GRAD_NROM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据PPO算法创建智能体</span>    agent <span class="token operator">=</span> MujocoAgent<span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实例化一个数据存储的类</span>    rollouts <span class="token operator">=</span> RolloutStorage<span class="token punctuation">(</span>NUM_STEPS<span class="token punctuation">,</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 重置环境，获取第一个状态，并存入rollouts</span>    obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    rollouts<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建队列</span>    episode_rewards <span class="token operator">=</span> deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    num_updates <span class="token operator">=</span> int<span class="token punctuation">(</span>args<span class="token punctuation">.</span>train_total_steps<span class="token punctuation">)</span> <span class="token operator">//</span> NUM_STEPS    <span class="token comment" spellcheck="true"># 开始训练，训练总步数为args.train_total_steps</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_updates<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span>NUM_STEPS<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 得到当前的状态，由两个神经网络得到状态价值，动作，以及概率密度函数的加和</span>            value<span class="token punctuation">,</span> action<span class="token punctuation">,</span> action_log_prob <span class="token operator">=</span> agent<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>rollouts<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 把动作输入环境中，得到下一个状态，奖励，是否游戏结束，以及信息</span>            obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 把奖励信息添加到列表中</span>            <span class="token keyword">if</span> done<span class="token punctuation">:</span>                episode_rewards<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">'episode'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 其他信息</span>            masks <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">if</span> done <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>            bad_masks <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">'bad_transition'</span> <span class="token keyword">in</span> info<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 给rollouts添加信息</span>            rollouts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> action<span class="token punctuation">,</span> action_log_prob<span class="token punctuation">,</span> value<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> masks<span class="token punctuation">,</span>                            bad_masks<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输入下一个状态，得到下一个状态对应的状态价值</span>        next_value <span class="token operator">=</span> agent<span class="token punctuation">.</span>value<span class="token punctuation">(</span>rollouts<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关键一行，计算Loss，并进行一次学习，一次学习中包含若干个PPO epoch</span>        value_loss<span class="token punctuation">,</span> action_loss<span class="token punctuation">,</span> dist_entropy <span class="token operator">=</span> agent<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>            next_value<span class="token punctuation">,</span> GAMMA<span class="token punctuation">,</span> GAE_LAMBDA<span class="token punctuation">,</span> PPO_EPOCH<span class="token punctuation">,</span> BATCH_SIZE<span class="token punctuation">,</span> rollouts<span class="token punctuation">)</span>        rollouts<span class="token punctuation">.</span>after_update<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印信息</span>        <span class="token keyword">if</span> j <span class="token operator">%</span> LOG_INTERVAL <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            total_num_steps <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> NUM_STEPS            <span class="token keyword">print</span><span class="token punctuation">(</span>                <span class="token string">"Updates {}, num timesteps {},\n Last {} training episodes: mean/median reward {:.1f}/{:.1f}, min/max reward {:.1f}/{:.1f}\n"</span>                <span class="token punctuation">.</span>format<span class="token punctuation">(</span>j<span class="token punctuation">,</span> total_num_steps<span class="token punctuation">,</span> len<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span><span class="token punctuation">,</span>                        np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span><span class="token punctuation">,</span>                        np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span><span class="token punctuation">,</span>                        dist_entropy<span class="token punctuation">,</span> value_loss<span class="token punctuation">,</span> action_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 评估智能体</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>test_every_steps <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> len<span class="token punctuation">(</span>episode_rewards<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span>                <span class="token operator">and</span> j <span class="token operator">%</span> args<span class="token punctuation">.</span>test_every_steps <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ob_rms <span class="token operator">=</span> get_ob_rms<span class="token punctuation">(</span>env<span class="token punctuation">)</span>            eval_mean_reward <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>agent<span class="token punctuation">,</span> ob_rms<span class="token punctuation">)</span>            summary<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'ppo/mean_validation_rewards'</span><span class="token punctuation">,</span> eval_mean_reward<span class="token punctuation">,</span>                               <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> NUM_STEPS<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'RL'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">'--seed'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">616</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'random seed (default: 616)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">'--test_every_steps'</span><span class="token punctuation">,</span>        type<span class="token operator">=</span>int<span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">'eval interval (default: 10)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">'--train_total_steps'</span><span class="token punctuation">,</span>        type<span class="token operator">=</span>int<span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token number">10e5</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">'number of total time steps to train (default: 10e5)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">'--env'</span><span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token string">'Hopper-v3'</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">'environment to train on (default: Hopper-v3)'</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>在运行程序之前要安装好mujoco，有坑。</li><li>可以看到PPO算法采用了三个Loss，目的如下：首先actor的Loss是为了让优势函数A越高越好 ，Critic的Loss是让其输出与目标输出越接近越好，而actor输出分布的熵让它在达成目的的同时越大越好，有利于系统的稳定性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习之stable_baseline3的使用</title>
      <link href="2022/02/19/qiang-hua-xue-xi-zhi-stable-baseline3-de-shi-yong/"/>
      <url>2022/02/19/qiang-hua-xue-xi-zhi-stable-baseline3-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://stable-baselines3.readthedocs.io/en/master/">https://stable-baselines3.readthedocs.io/en/master/</a></p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/406517851">https://zhuanlan.zhihu.com/p/406517851</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触过强化学习的同学想必都已经用过OpenAI的Gym了，Gym给我们提供多种多样的强化学习环境，同时也可以让我们方便地创建自己的环境，是试验强化学习算法的绝佳场所。现在有了试验场地，那么我们当然想要一个趁手的实验工具来帮助我们快速实现各种强化学习算法啦。固然，我们可以在了解各种算法的基本原理后，自己尝试用各种深度学习框架来实现算法（例如pytorch，tensorflow等）。</p><p>例如<a href="https://blog.csdn.net/tianjuewudi/article/details/120470167">DQN的pytorch实现</a>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">from</span> gym <span class="token keyword">import</span> wrappers<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> clear_output<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token keyword">from</span> timeit <span class="token keyword">import</span> default_timer <span class="token keyword">as</span> timer<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">import</span> math<span class="token keyword">from</span> utils<span class="token punctuation">.</span>wrappers <span class="token keyword">import</span> make_atari<span class="token punctuation">,</span> wrap_deepmind<span class="token punctuation">,</span> wrap_pytorch<span class="token keyword">from</span> utils<span class="token punctuation">.</span>hyperparameters <span class="token keyword">import</span> Config<span class="token keyword">from</span> agents<span class="token punctuation">.</span>BaseAgent <span class="token keyword">import</span> BaseAgentconfig <span class="token operator">=</span> Config<span class="token punctuation">(</span><span class="token punctuation">)</span>config<span class="token punctuation">.</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#epsilon variables</span>config<span class="token punctuation">.</span>epsilon_start <span class="token operator">=</span> <span class="token number">1.0</span>config<span class="token punctuation">.</span>epsilon_final <span class="token operator">=</span> <span class="token number">0.01</span>config<span class="token punctuation">.</span>epsilon_decay <span class="token operator">=</span> <span class="token number">30000</span>config<span class="token punctuation">.</span>epsilon_by_frame <span class="token operator">=</span> <span class="token keyword">lambda</span> frame_idx<span class="token punctuation">:</span> config<span class="token punctuation">.</span>epsilon_final <span class="token operator">+</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>epsilon_start <span class="token operator">-</span> config<span class="token punctuation">.</span>epsilon_final<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">*</span> frame_idx <span class="token operator">/</span> config<span class="token punctuation">.</span>epsilon_decay<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#misc agent variables</span>config<span class="token punctuation">.</span>GAMMA<span class="token operator">=</span><span class="token number">0.99</span>config<span class="token punctuation">.</span>LR<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token comment" spellcheck="true">#memory</span>config<span class="token punctuation">.</span>TARGET_NET_UPDATE_FREQ <span class="token operator">=</span> <span class="token number">1000</span>config<span class="token punctuation">.</span>EXP_REPLAY_SIZE <span class="token operator">=</span> <span class="token number">100000</span>config<span class="token punctuation">.</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span><span class="token comment" spellcheck="true">#Learning control variables</span>config<span class="token punctuation">.</span>LEARN_START <span class="token operator">=</span> <span class="token number">10000</span>config<span class="token punctuation">.</span>MAX_FRAMES<span class="token operator">=</span><span class="token number">1000000</span><span class="token keyword">class</span> <span class="token class-name">ExperienceReplayMemory</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> transition<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>append<span class="token punctuation">(</span>transition<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">)</span> <span class="token operator">></span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>            <span class="token keyword">del</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DQN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_shape<span class="token punctuation">,</span> num_actions<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DQN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_shape <span class="token operator">=</span> input_shape        self<span class="token punctuation">.</span>num_actions <span class="token operator">=</span> num_actions        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>input_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>feature_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_actions<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">feature_size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>self<span class="token punctuation">.</span>input_shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>BaseAgent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> static_policy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> env<span class="token operator">=</span>None<span class="token punctuation">,</span> config<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>device <span class="token operator">=</span> config<span class="token punctuation">.</span>device        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> config<span class="token punctuation">.</span>GAMMA        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> config<span class="token punctuation">.</span>LR        self<span class="token punctuation">.</span>target_net_update_freq <span class="token operator">=</span> config<span class="token punctuation">.</span>TARGET_NET_UPDATE_FREQ        self<span class="token punctuation">.</span>experience_replay_size <span class="token operator">=</span> config<span class="token punctuation">.</span>EXP_REPLAY_SIZE        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> config<span class="token punctuation">.</span>BATCH_SIZE        self<span class="token punctuation">.</span>learn_start <span class="token operator">=</span> config<span class="token punctuation">.</span>LEARN_START        self<span class="token punctuation">.</span>static_policy <span class="token operator">=</span> static_policy        self<span class="token punctuation">.</span>num_feats <span class="token operator">=</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape        self<span class="token punctuation">.</span>num_actions <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n        self<span class="token punctuation">.</span>env <span class="token operator">=</span> env        self<span class="token punctuation">.</span>declare_networks<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>self<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># move to correct device</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>static_policy<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>update_count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>declare_memory<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">declare_networks</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> DQN<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_feats<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_actions<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>target_model <span class="token operator">=</span> DQN<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_feats<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_actions<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">declare_memory</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> ExperienceReplayMemory<span class="token punctuation">(</span>self<span class="token punctuation">.</span>experience_replay_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">append_to_replay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">prep_minibatch</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># random transition batch is taken from experience replay memory</span>        transitions <span class="token operator">=</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">)</span>        batch_state<span class="token punctuation">,</span> batch_action<span class="token punctuation">,</span> batch_reward<span class="token punctuation">,</span> batch_next_state <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>transitions<span class="token punctuation">)</span>        shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>num_feats        <span class="token comment" spellcheck="true"># (32,1,84,84)</span>        batch_state <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch_state<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># (32,1)</span>        batch_action <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch_action<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># (32,1)</span>        batch_reward <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>batch_reward<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># map()会根据提供的函数对指定序列做映射，这里检查下一个状态是否为空，shape为(32)</span>        non_final_mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">,</span> batch_next_state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span>                                      dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># sometimes all next states are false</span>            <span class="token comment" spellcheck="true"># 检查状态中的数是否存在，shape为(32,1,84,84)</span>            non_final_next_states <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>s <span class="token keyword">for</span> s <span class="token keyword">in</span> batch_next_state <span class="token keyword">if</span> s <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span>                                                 dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>            empty_next_state_values <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            non_final_next_states <span class="token operator">=</span> None            empty_next_state_values <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> batch_state<span class="token punctuation">,</span> batch_action<span class="token punctuation">,</span> batch_reward<span class="token punctuation">,</span> non_final_next_states<span class="token punctuation">,</span> non_final_mask<span class="token punctuation">,</span> empty_next_state_values    <span class="token keyword">def</span> <span class="token function">compute_loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_vars<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取六组数据</span>        batch_state<span class="token punctuation">,</span> batch_action<span class="token punctuation">,</span> batch_reward<span class="token punctuation">,</span> non_final_next_states<span class="token punctuation">,</span> non_final_mask<span class="token punctuation">,</span> empty_next_state_values <span class="token operator">=</span> batch_vars        <span class="token comment" spellcheck="true"># estimate</span>        current_q_values <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>batch_state<span class="token punctuation">)</span><span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> batch_action<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># target</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            max_next_q_values <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> empty_next_state_values<span class="token punctuation">:</span>                max_next_action <span class="token operator">=</span> self<span class="token punctuation">.</span>get_max_next_state_action<span class="token punctuation">(</span>non_final_next_states<span class="token punctuation">)</span>                max_next_q_values<span class="token punctuation">[</span>non_final_mask<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>target_model<span class="token punctuation">(</span>non_final_next_states<span class="token punctuation">)</span><span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_next_action<span class="token punctuation">)</span>            expected_q_values <span class="token operator">=</span> batch_reward <span class="token operator">+</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> max_next_q_values<span class="token punctuation">)</span>        diff <span class="token operator">=</span> <span class="token punctuation">(</span>expected_q_values <span class="token operator">-</span> current_q_values<span class="token punctuation">)</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>huber<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> loss    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">,</span> frame<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>static_policy<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        self<span class="token punctuation">.</span>append_to_replay<span class="token punctuation">(</span>s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">)</span>        <span class="token keyword">if</span> frame <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>learn_start<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        batch_vars <span class="token operator">=</span> self<span class="token punctuation">.</span>prep_minibatch<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>compute_loss<span class="token punctuation">(</span>batch_vars<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Optimize the model</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            param<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>clamp_<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>update_target_model<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>save_loss<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>save_sigma_param_magnitudes<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> eps <span class="token operator">or</span> self<span class="token punctuation">.</span>static_policy<span class="token punctuation">:</span>                X <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span>                a <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_actions<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_target_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>update_count <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>update_count <span class="token operator">=</span> self<span class="token punctuation">.</span>update_count <span class="token operator">%</span> self<span class="token punctuation">.</span>target_net_update_freq        <span class="token keyword">if</span> self<span class="token punctuation">.</span>update_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_max_next_state_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_states<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>target_model<span class="token punctuation">(</span>next_states<span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">huber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        cond <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>abs<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> cond <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>abs<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> cond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot</span><span class="token punctuation">(</span>frame_idx<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> losses<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> elapsed_time<span class="token punctuation">)</span><span class="token punctuation">:</span>    clear_output<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'frame %s. reward: %s. time: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>frame_idx<span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>rewards<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> elapsed_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>rewards<span class="token punctuation">)</span>    <span class="token keyword">if</span> losses<span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'loss'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>losses<span class="token punctuation">)</span>    <span class="token keyword">if</span> sigma<span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'noisy param magnitude'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">=</span> timer<span class="token punctuation">(</span><span class="token punctuation">)</span>env_id <span class="token operator">=</span> <span class="token string">"PongNoFrameskip-v4"</span>env <span class="token operator">=</span> make_atari<span class="token punctuation">(</span>env_id<span class="token punctuation">)</span>env <span class="token operator">=</span> wrap_deepmind<span class="token punctuation">(</span>env<span class="token punctuation">,</span> frame_stack<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>env <span class="token operator">=</span> wrap_pytorch<span class="token punctuation">(</span>env<span class="token punctuation">)</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span>env<span class="token operator">=</span>env<span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span>episode_reward <span class="token operator">=</span> <span class="token number">0</span>observation <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> frame_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>MAX_FRAMES <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    epsilon <span class="token operator">=</span> config<span class="token punctuation">.</span>epsilon_by_frame<span class="token punctuation">(</span>frame_idx<span class="token punctuation">)</span>    action <span class="token operator">=</span> model<span class="token punctuation">.</span>get_action<span class="token punctuation">(</span>observation<span class="token punctuation">,</span> epsilon<span class="token punctuation">)</span>    prev_observation <span class="token operator">=</span> observation    observation<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    observation <span class="token operator">=</span> None <span class="token keyword">if</span> done <span class="token keyword">else</span> observation    model<span class="token punctuation">.</span>update<span class="token punctuation">(</span>prev_observation<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> observation<span class="token punctuation">,</span> frame_idx<span class="token punctuation">)</span>    episode_reward <span class="token operator">+=</span> reward    <span class="token keyword">if</span> done<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finish a episode"</span><span class="token punctuation">)</span>        observation <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>save_reward<span class="token punctuation">(</span>episode_reward<span class="token punctuation">)</span>        episode_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>model<span class="token punctuation">.</span>rewards<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">19</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mean_reward>19....Plot..."</span><span class="token punctuation">)</span>            plot<span class="token punctuation">(</span>frame_idx<span class="token punctuation">,</span> model<span class="token punctuation">.</span>rewards<span class="token punctuation">,</span> model<span class="token punctuation">.</span>losses<span class="token punctuation">,</span> model<span class="token punctuation">.</span>sigma_parameter_mag<span class="token punctuation">,</span>                 timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span>int<span class="token punctuation">(</span>timer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> frame_idx <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plot<span class="token punctuation">(</span>frame_idx<span class="token punctuation">,</span> model<span class="token punctuation">.</span>rewards<span class="token punctuation">,</span> model<span class="token punctuation">.</span>losses<span class="token punctuation">,</span> model<span class="token punctuation">.</span>sigma_parameter_mag<span class="token punctuation">,</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span>int<span class="token punctuation">(</span>timer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Plot.................."</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save_w<span class="token punctuation">(</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这段程序摘自周博磊强化学习课程的DQN算法。可以看到，不包含各种自己定义的库文件，这个主文件的代码已经接近300行。整理和归纳封装这么一大段代码的工作量可想而知，这样编程代码的可复用性并不高。</p><p>因此为了提高方便广大强化学习爱好者去调用各种流行的强化学习算法，stable-baseline应运而生，而stable-baseline经过改进，催生了基于Pytorch的stable baseline3。作为最著名的强化学习算法库之一，它经常和gym搭配，被广泛应用于各种强化学习训练中。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>stable-baseline3是一个非常受欢迎的深度强化学习工具包，能够快速完成强化学习算法的搭建和评估，提供预训练的智能体，包括保存和录制视频等等，是一个功能非常强大的库。</p><p>详情可以查看官网：<a href="https://stable-baselines3.readthedocs.io/en/master/">https://stable-baselines3.readthedocs.io/en/master/</a></p><h2 id="快速搭建环境"><a href="#快速搭建环境" class="headerlink" title="快速搭建环境"></a>快速搭建环境</h2><p>首先确保gym成功安装，然后执行以下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gymenv_name <span class="token operator">=</span> <span class="token string">"CartPole-v0"</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>env_name<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 导入环境</span>episodes <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">for</span> episode <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> episodes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>               done <span class="token operator">=</span> <span class="token boolean">False</span>    score <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>        env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 渲染环境</span>        action <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 随机采样动作</span>        n_state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 和环境交互，得到下一个状态，奖励等信息</span>        score <span class="token operator">+=</span> reward                        <span class="token comment" spellcheck="true"># 计算分数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Episode : {}, Score : {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>episode<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 关闭窗口</span></code></pre><p>这段这个CartPole相当于强化学习中的Hello World，能够非常便捷地实验我们的算法。这行这段代码，可以看到一个倒立摆在胡乱操作。</p><h2 id="Stable-baseline3控制环境（快速使用）"><a href="#Stable-baseline3控制环境（快速使用）" class="headerlink" title="Stable_baseline3控制环境（快速使用）"></a>Stable_baseline3控制环境（快速使用）</h2><p>下面就让我们用Stable_baseline3来训练我们的强化学习模型，使得我们可以很好地控制这个环境。首先确保我们已经安装了stable_baseline3这个库，然后执行以下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> DQN<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>vec_env<span class="token punctuation">.</span>dummy_vec_env <span class="token keyword">import</span> DummyVecEnv<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>evaluation <span class="token keyword">import</span> evaluate_policy<span class="token keyword">import</span> gymenv_name <span class="token operator">=</span> <span class="token string">"CartPole-v0"</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>env_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把环境向量化，如果有多个环境写成列表传入DummyVecEnv中，可以用一个线程来执行多个环境，提高训练效率</span>env <span class="token operator">=</span> DummyVecEnv<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> <span class="token punctuation">:</span> env<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个DQN模型，设置其中的各个参数</span>model <span class="token operator">=</span> DQN<span class="token punctuation">(</span>    <span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span>                                <span class="token comment" spellcheck="true"># MlpPolicy定义策略网络为MLP网络</span>    env<span class="token operator">=</span>env<span class="token punctuation">,</span>     learning_rate<span class="token operator">=</span><span class="token number">5e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>    buffer_size<span class="token operator">=</span><span class="token number">50000</span><span class="token punctuation">,</span>    learning_starts<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>    target_update_interval<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span>    policy_kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"net_arch"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 这里代表隐藏层为2层256个节点数的网络</span>    verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                   <span class="token comment" spellcheck="true"># verbose=1代表打印训练信息，如果是0为不打印，2为打印调试信息</span>    tensorboard_log<span class="token operator">=</span><span class="token string">"./tensorboard/CartPole-v0/"</span>  <span class="token comment" spellcheck="true"># 训练数据保存目录，可以用tensorboard查看</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始训练</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span><span class="token number">1e5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 策略评估，可以看到倒立摆在平稳运行了</span>mean_reward<span class="token punctuation">,</span> std_reward <span class="token operator">=</span> evaluate_policy<span class="token punctuation">(</span>model<span class="token punctuation">,</span> env<span class="token punctuation">,</span> n_eval_episodes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> render<span class="token operator">=</span>true<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#env.close()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mean_reward:"</span><span class="token punctuation">,</span>mean_reward<span class="token punctuation">,</span><span class="token string">"std_reward:"</span><span class="token punctuation">,</span>std_reward<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型到相应的目录</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./model/CartPole.pkl"</span><span class="token punctuation">)</span></code></pre><p>通过命令行打开tensorboard：</p><pre class=" language-powershell"><code class="language-powershell">tensorboard <span class="token operator">--</span>logdir <span class="token punctuation">.</span>\tensorboard\CartPole<span class="token operator">-</span>v0\</code></pre><p>如果想要读取已有的模型来控制环境，执行代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> DQN<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>vec_env<span class="token punctuation">.</span>dummy_vec_env <span class="token keyword">import</span> DummyVecEnv<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>evaluation <span class="token keyword">import</span> evaluate_policy<span class="token keyword">import</span> gymenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>env_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入模型</span>model <span class="token operator">=</span> DQN<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./model/CartPole.pkl"</span><span class="token punctuation">)</span>state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>done <span class="token operator">=</span> <span class="token boolean">False</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 预测动作</span>    action<span class="token punctuation">,</span> _ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>observation<span class="token operator">=</span>state<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 与环境互动</span>    state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token operator">=</span>action<span class="token punctuation">)</span>    score <span class="token operator">+=</span> reward    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"score="</span><span class="token punctuation">,</span>score<span class="token punctuation">)</span></code></pre><h2 id="各种算法的参数使用"><a href="#各种算法的参数使用" class="headerlink" title="各种算法的参数使用"></a>各种算法的参数使用</h2><p>详细文档参加<a href="https://stable-baselines3.readthedocs.io/en/master/modules/base.html">https://stable-baselines3.readthedocs.io/en/master/modules/base.html</a></p><p>以PPO算法为例，其他同理</p><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><ul><li><strong>policy</strong>( <code>Type</code>[ <code>BasePolicy</code>]) – 策略对象</li><li><strong>env</strong> ( <code>Union</code>[ <code>Env</code>, <a href="https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html#stable_baselines3.common.vec_env.VecEnv"><code>VecEnv</code></a>, <code>str</code>, <code>None</code>]) – 要学习的环境</li><li><strong>policy_base</strong> ( <code>Type</code>[ <code>BasePolicy</code>]) – 此方法使用的基本策略</li><li><strong>learning_rate</strong> ( <code>Union</code>[ <code>float</code>, <code>Callable</code>[[ <code>float</code>], <code>float</code>]]) – 优化器的学习率，它可以是当前剩余进度的函数（从 1 到 0）</li><li><strong>policy_kwargs</strong> ( <code>Optional</code>[ <code>Dict</code>[ <code>str</code>, <code>Any</code>]]) – 在创建时传递给策略的附加参数，默认为None</li><li><strong>tensorboard_log</strong> ( <code>Optional</code>[ <code>str</code>]) – tensorboard 的日志位置（如果没有，则不记录），默认为None</li><li><strong>verbose</strong> ( <code>int</code>) – 详细程度：0 无，1 训练信息，2 调试，默认为0</li><li><strong>device</strong> ( <code>Union</code>[ <code>device</code>, <code>str</code>]) – 代码应在其上运行的设备。默认情况下，它将尝试使用与 Cuda 兼容的设备，如果不可能，则回退到 cpu。默认为auto</li><li><strong>support_multi_env</strong> ( <code>bool</code>) – 算法是否支持多环境训练（如在 A2C 中），默认为False</li><li><strong>create_eval_env</strong> ( <code>bool</code>) – 是否创建第二个环境，用于定期评估代理。（仅在为环境传递字符串时可用），默认为False</li><li><strong>monitor_wrapper</strong> ( <code>bool</code>) – 创建环境时，是否将其包装在 Monitor 包装器中。默认为True</li><li><strong>seed</strong>( <code>Optional</code>[ <code>int</code>]) – 伪随机生成器的种子，默认为None</li><li><strong>use_sde</strong> ( <code>bool</code>) – 是否使用广义状态相关探索 (gSDE) 而不是动作噪声探索（默认值：False）</li><li><strong>sde_sample_freq</strong> ( <code>int</code>) – 使用 gSDE 时每 n 步采样一个新的噪声矩阵 默认值：-1（仅在推出开始时采样）</li><li><strong>supported_action_spaces</strong> ( <code>Optional</code>[ <code>Tuple</code>[ <code>Space</code>, <code>...</code>]]) – 算法支持的动作空间。默认为None</li></ul><h3 id="PPO（其他的算法同理）"><a href="#PPO（其他的算法同理）" class="headerlink" title="PPO（其他的算法同理）"></a>PPO（其他的算法同理）</h3><p>快速案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> PPO<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>env_util <span class="token keyword">import</span> make_vec_env<span class="token comment" spellcheck="true"># Parallel environments</span>env <span class="token operator">=</span> make_vec_env<span class="token punctuation">(</span><span class="token string">"CartPole-v1"</span><span class="token punctuation">,</span> n_envs<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>model <span class="token operator">=</span> PPO<span class="token punctuation">(</span><span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span><span class="token number">25000</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"ppo_cartpole"</span><span class="token punctuation">)</span><span class="token keyword">del</span> model <span class="token comment" spellcheck="true"># remove to demonstrate saving and loading</span>model <span class="token operator">=</span> PPO<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"ppo_cartpole"</span><span class="token punctuation">)</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="PPO初始化函数的参数设置"><a href="#PPO初始化函数的参数设置" class="headerlink" title="PPO初始化函数的参数设置"></a>PPO初始化函数的参数设置</h4><p>必须传入的参数（第一，第二个参数）：</p><ul><li><p><strong>policy</strong>：选择网络类型，可选MlpPolicy，CnnPolicy，MultiInputPolicy。</p></li><li><p><strong>env</strong>：Gym中的环境。</p></li></ul><p>可选参数：</p><ul><li><strong>learning_rate</strong> – 学习率，默认为0.0003</li><li><strong>n_steps</strong> ( <code>int</code>) – 每次更新环境运行的步骤数，默认为2048</li><li><strong>batch_size</strong> ( <code>int</code>) – batch的大小，默认为64</li><li><strong>n_epochs</strong> ( <code>int</code>) – 优化损失的 epoch 数，默认为10</li><li><strong>gamma</strong> ( <code>float</code>) – 折扣系数，默认为0.99</li><li><strong>gae_lambda</strong> ( <code>float</code>) – 为广义优势估计器权衡偏差与方差的因子，默认为0.95</li><li><strong>clip_range</strong> ( <code>Union</code>[ <code>float</code>, <code>Callable</code>[[ <code>float</code>], <code>float</code>]]) – 剪辑参数，它可以是当前剩余进度的函数（从 1 到 0）。默认为0.2</li><li><strong>clip_range_vf</strong> ( <code>Union</code>[ <code>None</code>, <code>float</code>, <code>Callable</code>[[ <code>float</code>], <code>float</code>]]) – 值函数的clip参数，它可以是当前剩余进度的函数（从 1 到 0）。这是特定于 OpenAI 实现的参数。如果 None 被传递（默认），则不会对 value 函数进行clip。重要提示：此clip取决于奖励缩放。默认为None</li><li><strong>ent_coef</strong> ( <code>float</code>) – 损失计算的熵系数，默认为0</li><li><strong>vf_coef</strong> ( <code>float</code>) – 损失计算的价值函数系数，默认为0.5</li><li><strong>max_grad_norm</strong> ( <code>float</code>) – 梯度裁剪的最大值，默认为0.5</li><li><strong>use_sde</strong> ( <code>bool</code>) – 是否使用广义状态相关探索 (gSDE) 而不是动作噪声探索，默认为False</li><li><strong>sde_sample_freq</strong> ( <code>int</code>) – 使用 gSDE 时每 n 步采样一个新的噪声矩阵 （仅在推出开始时采样），默认为-1</li><li><strong>target_kl</strong> ( <code>Optional</code>[ <code>float</code>]) – 限制更新之间的 KL 差异，因为裁剪不足以防止大更新，请参阅问题 #213（参见<a href="https://github.com/hill-a/stable-baselines/issues/213%EF%BC%89%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8Ckl">https://github.com/hill-a/stable-baselines/issues/213）默认情况下，kl</a> 散度没有限制，为None</li><li><strong>tensorboard_log</strong> ( <code>Optional</code>[ <code>str</code>]) – tensorboard 的日志文件夹（如果没有，则不记录），默认为None</li><li><strong>create_eval_env</strong> ( <code>bool</code>) – 是否创建第二个环境，用于定期评估代理。（仅在为环境传递字符串时可用），默认为False</li><li><strong>policy_kwargs</strong> ( <code>Optional</code>[ <code>Dict</code>[ <code>str</code>, <code>Any</code>]]) – 在创建时传递给策略的附加参数，默认为None</li><li><strong>verbose</strong>( <code>int</code>) – 详细级别：0 无输出，1 信息，2 调试，默认为0</li><li><strong>seed</strong>( <code>Optional</code>[ <code>int</code>]) – 伪随机生成器的种子，默认为None</li><li><strong>device</strong> ( <code>Union</code>[ <code>device</code>, <code>str</code>]) – 训练使用的设备，默认为auto，</li><li><strong>_init_setup_model</strong> ( <code>bool</code>) – 是否在创建实例时构建网络，默认为True</li></ul><h4 id="learn函数（用于训练模型）："><a href="#learn函数（用于训练模型）：" class="headerlink" title="learn函数（用于训练模型）："></a>learn函数（用于训练模型）：</h4><p><strong>learn</strong>(total_timesteps,callback=None, log_interval=1,eval_env=None,eval_freq=- 1, n_eval_episodes=5,tb_log_name=’PPO’, eval_log_path=None,reset_num_timesteps=True)</p><ul><li><strong>total_timesteps</strong> ( <code>int</code>) – 要训练的环境步数。 </li><li><strong>callback</strong>( <code>Union</code>[ <code>None</code>, <code>Callable</code>, <code>List</code>[ <a href="https://stable-baselines3.readthedocs.io/en/master/guide/callbacks.html#stable_baselines3.common.callbacks.BaseCallback"><code>BaseCallback</code></a>], <a href="https://stable-baselines3.readthedocs.io/en/master/guide/callbacks.html#stable_baselines3.common.callbacks.BaseCallback"><code>BaseCallback</code></a>]) – 在每一步调用的回调，可以用CheckpointCallback来创建一个存档点和规定存档间隔。</li><li><strong>log_interval</strong> ( <code>int</code>) – 记录一次信息的时间步数。</li><li><strong>tb_log_name</strong> ( <code>str</code>) – TensorBoard 日志运行的名称</li><li><strong>eval_env</strong> ( <code>Union</code>[ <code>Env</code>, <a href="https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html#stable_baselines3.common.vec_env.VecEnv"><code>VecEnv</code></a>, <code>None</code>]) – 用于评估智能体的环境</li><li><strong>eval_freq</strong> ( <code>int</code>) – 每隔<code>eval_freq</code>的步数评估一下智能体</li><li><strong>n_eval_episodes</strong> ( <code>int</code>) – 每隔<code>n_eval_episodes</code>个episode评估一次智能体</li><li><strong>eval_log_path</strong> ( <code>Optional</code>[ <code>str</code>]) – 保存评估的文件夹路径</li><li><strong>reset_num_timesteps</strong> ( <code>bool</code>) – 是否重置当前时间步数（用于日志记录）</li></ul><h4 id="save函数（保存模型）："><a href="#save函数（保存模型）：" class="headerlink" title="save函数（保存模型）："></a>save函数（保存模型）：</h4><p> <strong>save</strong>(path,exclude=None,include=None)</p><ul><li><strong>path</strong> ( <code>Union</code>[ <code>str</code>, <code>Path</code>, <code>BufferedIOBase</code>]) – 保存文件的路径</li><li><strong>exclude</strong> ( <code>Optional</code>[ <code>Iterable</code>[ <code>str</code>]]) – 除了默认参数之外，还应排除的参数名称</li><li><strong>include</strong> ( <code>Optional</code>[ <code>Iterable</code>[ <code>str</code>]]) – 可能被排除但无论如何都应该包含的参数的名称</li></ul><h4 id="load函数（导入模型）："><a href="#load函数（导入模型）：" class="headerlink" title="load函数（导入模型）："></a>load函数（导入模型）：</h4><p><strong>load</strong>(path, env=None,device=’auto’,custom_objects=None, print_system_info=False,force_reset=True,**kwargs)</p><ul><li><strong>path</strong> ( <code>Union</code>[ <code>str</code>, <code>Path</code>, <code>BufferedIOBase</code>]) – 加载模型文件的路径</li><li><strong>env</strong> ( <code>Union</code>[ <code>Env</code>, <a href="https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html#stable_baselines3.common.vec_env.VecEnv"><code>VecEnv</code></a>, <code>None</code>]) – 运行加载模型的新环境（如果只需要预测，则可以是 None ），优先于任何已保存的环境</li><li><strong>device</strong> ( <code>Union</code>[ <code>device</code>, <code>str</code>]) – 代码应在其上运行的设备。</li><li><strong>custom_objects</strong> ( <code>Optional</code>[ <code>Dict</code>[ <code>str</code>, <code>Any</code>]]) – 加载时要替换的对象字典。如果此字典中存在一个变量作为键，则不会对其进行反序列化，而是使用相应的项。类似于 <code>keras.models.load_model</code>. 当文件中有无法反序列化的对象时很有用。</li><li><strong>print_system_info</strong> ( <code>bool</code>) – 是否从保存的模型和当前系统信息中打印系统信息（有助于调试加载问题）</li><li><strong>force_reset</strong> ( <code>bool</code>) – 在训练之前强制调用<code>reset()</code>以避免意外行为。见<a href="https://github.com/DLR-RM/stable-baselines3/issues/597">https://github.com/DLR-RM/stable-baselines3/issues/597</a></li><li><strong>kwargs</strong> – 加载时更改模型的额外参数</li></ul><h4 id="创建对应的网络模型的函数stable-baselines3-common-policies-ActorCriticPolicy"><a href="#创建对应的网络模型的函数stable-baselines3-common-policies-ActorCriticPolicy" class="headerlink" title="创建对应的网络模型的函数stable_baselines3.common.policies.ActorCriticPolicy"></a>创建对应的网络模型的函数stable_baselines3.common.policies.ActorCriticPolicy</h4><p>返回值可以直接输入PPO初始化的第一个参数中，参数如下：</p><p>必要参数：</p><ul><li><strong>observation_space</strong> ( <code>Space</code>) – 观察空间</li><li><strong>action_space</strong> ( <code>Space</code>) – 动作空间</li><li><strong>lr_schedule</strong> ( <code>Callable</code>[[ <code>float</code>], <code>float</code>]) – 学习率计划（可以是常数）</li></ul><p>可选参数：</p><ul><li><strong>net_arch</strong> ( <code>Optional</code>[ <code>List</code>[ <code>Union</code>[ <code>int</code>, <code>Dict</code>[ <code>str</code>, <code>List</code>[ <code>int</code>]]]]]) – 策略和价值网络的规范。</li><li><strong>activation_fn</strong> ( <code>Type</code>[ <code>Module</code>]) – 激活函数</li><li><strong>ortho_init</strong> ( <code>bool</code>) – 是否使用正交初始化</li><li><strong>use_sde</strong> ( <code>bool</code>) – 是否使用状态相关探索</li><li><strong>log_std_init</strong> ( <code>float</code>) – 对数标准差的初始值</li><li><strong>full_std</strong> ( <code>bool</code>) – 使用 gSDE 时是否对 std 使用 (n_features x n_actions) 参数而不是仅使用 (n_features,)</li><li><strong>sde_net_arch</strong> ( <code>Optional</code>[ <code>List</code>[ <code>int</code>]]) – 使用 gSDE 时提取特征的网络架构。如果没有，将使用策略中的潜在特征。传递一个空列表以将状态用作特征。</li><li><strong>use_expln</strong> ( <code>bool</code>) – 使用<code>expln()</code>函数而不是<code>exp()</code>确保正标准偏差（参见论文）。它允许将方差保持在零以上并防止其增长过快。在实践中，<code>exp()</code>通常就足够了。</li><li><strong>squash_output</strong> ( <code>bool</code>) – 是否使用 tanh 函数压缩输出，这允许在使用 gSDE 时确保边界。</li><li><strong>features_extractor_class</strong> ( <code>Type</code>[ <code>BaseFeaturesExtractor</code>]) – 要使用的特征提取器。</li><li><strong>features_extractor_kwargs</strong> ( <code>Optional</code>[ <code>Dict</code>[ <code>str</code>, <code>Any</code>]]) – 传递给特征提取器的关键字参数。</li><li><strong>normalize_images</strong> ( <code>bool</code>) – 是否对图像进行归一化，除以 255.0（默认为 True）</li><li><strong>optimizer_class</strong> ( <code>Type</code>[ <code>Optimizer</code>]) – <code>th.optim.Adam</code>默认使用的优化器</li><li><strong>optimizer_kwargs</strong> ( <code>Optional</code>[ <code>Dict</code>[ <code>str</code>, <code>Any</code>]]) – 附加关键字参数，不包括学习率，传递给优化器</li></ul><h4 id="stable-baselines3-common-policies-ActorCriticCnnPolicy和stable-baselines3-common-policies-MultiInputActorCriticPolicy"><a href="#stable-baselines3-common-policies-ActorCriticCnnPolicy和stable-baselines3-common-policies-MultiInputActorCriticPolicy" class="headerlink" title="stable_baselines3.common.policies.ActorCriticCnnPolicy和stable_baselines3.common.policies.MultiInputActorCriticPolicy"></a>stable_baselines3.common.policies.ActorCriticCnnPolicy和stable_baselines3.common.policies.MultiInputActorCriticPolicy</h4><p>和上面同理，参考<a href="https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html">https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html</a></p><h3 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h3><p>快速案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> DQNenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"CartPole-v0"</span><span class="token punctuation">)</span>model <span class="token operator">=</span> DQN<span class="token punctuation">(</span><span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> log_interval<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"dqn_cartpole"</span><span class="token punctuation">)</span><span class="token keyword">del</span> model <span class="token comment" spellcheck="true"># remove to demonstrate saving and loading</span>model <span class="token operator">=</span> DQN<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"dqn_cartpole"</span><span class="token punctuation">)</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> done<span class="token punctuation">:</span>      obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>详细参数参考<a href="https://stable-baselines3.readthedocs.io/en/master/modules/dqn.html">https://stable-baselines3.readthedocs.io/en/master/modules/dqn.html</a></p><h3 id="TD3"><a href="#TD3" class="headerlink" title="TD3"></a>TD3</h3><p>快速案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> TD3<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>noise <span class="token keyword">import</span> NormalActionNoise<span class="token punctuation">,</span> OrnsteinUhlenbeckActionNoiseenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"Pendulum-v1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># The noise objects for TD3</span>n_actions <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>action_noise <span class="token operator">=</span> NormalActionNoise<span class="token punctuation">(</span>mean<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">,</span> sigma<span class="token operator">=</span><span class="token number">0.1</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">)</span>model <span class="token operator">=</span> TD3<span class="token punctuation">(</span><span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> action_noise<span class="token operator">=</span>action_noise<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> log_interval<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"td3_pendulum"</span><span class="token punctuation">)</span>env <span class="token operator">=</span> model<span class="token punctuation">.</span>get_env<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">del</span> model <span class="token comment" spellcheck="true"># remove to demonstrate saving and loading</span>model <span class="token operator">=</span> TD3<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"td3_pendulum"</span><span class="token punctuation">)</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>详细参数参考<a href="https://stable-baselines3.readthedocs.io/en/master/modules/td3.html">https://stable-baselines3.readthedocs.io/en/master/modules/td3.html</a></p><h3 id="SAC"><a href="#SAC" class="headerlink" title="SAC"></a>SAC</h3><p>快速案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> SACenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"Pendulum-v1"</span><span class="token punctuation">)</span>model <span class="token operator">=</span> SAC<span class="token punctuation">(</span><span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> log_interval<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"sac_pendulum"</span><span class="token punctuation">)</span><span class="token keyword">del</span> model <span class="token comment" spellcheck="true"># remove to demonstrate saving and loading</span>model <span class="token operator">=</span> SAC<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"sac_pendulum"</span><span class="token punctuation">)</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> done<span class="token punctuation">:</span>      obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>详细参数参考<a href="https://stable-baselines3.readthedocs.io/en/master/modules/sac.html">https://stable-baselines3.readthedocs.io/en/master/modules/sac.html</a></p><h2 id="各项功能的使用案例"><a href="#各项功能的使用案例" class="headerlink" title="各项功能的使用案例"></a>各项功能的使用案例</h2><h3 id="训练、保存、读取"><a href="#训练、保存、读取" class="headerlink" title="训练、保存、读取"></a>训练、保存、读取</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> DQN<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>evaluation <span class="token keyword">import</span> evaluate_policy<span class="token comment" spellcheck="true"># Create environment</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'LunarLander-v2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Instantiate the agent</span>model <span class="token operator">=</span> DQN<span class="token punctuation">(</span><span class="token string">'MlpPolicy'</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Train the agent</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>int<span class="token punctuation">(</span><span class="token number">2e5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the agent</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"dqn_lunar"</span><span class="token punctuation">)</span><span class="token keyword">del</span> model  <span class="token comment" spellcheck="true"># delete trained model to demonstrate loading</span><span class="token comment" spellcheck="true"># Load the trained agent</span><span class="token comment" spellcheck="true"># NOTE: if you have loading issue, you can pass `print_system_info=True`</span><span class="token comment" spellcheck="true"># to compare the system on which the model was trained vs the current one</span><span class="token comment" spellcheck="true"># model = DQN.load("dqn_lunar", env=env, print_system_info=True)</span>model <span class="token operator">=</span> DQN<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"dqn_lunar"</span><span class="token punctuation">,</span> env<span class="token operator">=</span>env<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Evaluate the agent</span><span class="token comment" spellcheck="true"># NOTE: If you use wrappers with your environment that modify rewards,</span><span class="token comment" spellcheck="true">#       this will be reflected here. To evaluate with original rewards,</span><span class="token comment" spellcheck="true">#       wrap environment in a "Monitor" wrapper before other wrappers.</span>mean_reward<span class="token punctuation">,</span> std_reward <span class="token operator">=</span> evaluate_policy<span class="token punctuation">(</span>model<span class="token punctuation">,</span> model<span class="token punctuation">.</span>get_env<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_eval_episodes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Enjoy trained agent</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="高级的保存、加载"><a href="#高级的保存、加载" class="headerlink" title="高级的保存、加载"></a>高级的保存、加载</h3><p>save函数不会保存replay buffer，因此这里提供了save_replay_buffer()和load_replay_buffer()来保存和读取。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> SAC<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>evaluation <span class="token keyword">import</span> evaluate_policy<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>sac<span class="token punctuation">.</span>policies <span class="token keyword">import</span> MlpPolicy<span class="token comment" spellcheck="true"># Create the model, the training environment</span><span class="token comment" spellcheck="true"># and the test environment (for evaluation)</span>model <span class="token operator">=</span> SAC<span class="token punctuation">(</span><span class="token string">'MlpPolicy'</span><span class="token punctuation">,</span> <span class="token string">'Pendulum-v1'</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>            learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> create_eval_env<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Evaluate the model every 1000 steps on 5 test episodes</span><span class="token comment" spellcheck="true"># and save the evaluation to the "logs/" folder</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">,</span> eval_freq<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_eval_episodes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> eval_log_path<span class="token operator">=</span><span class="token string">"./logs/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># save the model</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"sac_pendulum"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># the saved model does not contain the replay buffer</span>loaded_model <span class="token operator">=</span> SAC<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"sac_pendulum"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"The loaded_model has {loaded_model.replay_buffer.size()} transitions in its buffer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># now save the replay buffer too</span>model<span class="token punctuation">.</span>save_replay_buffer<span class="token punctuation">(</span><span class="token string">"sac_replay_buffer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># load it into the loaded_model</span>loaded_model<span class="token punctuation">.</span>load_replay_buffer<span class="token punctuation">(</span><span class="token string">"sac_replay_buffer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># now the loaded replay is not empty anymore</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"The loaded_model has {loaded_model.replay_buffer.size()} transitions in its buffer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the policy independently from the model</span><span class="token comment" spellcheck="true"># Note: if you don't save the complete model with `model.save()`</span><span class="token comment" spellcheck="true"># you cannot continue training afterward</span>policy <span class="token operator">=</span> model<span class="token punctuation">.</span>policypolicy<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"sac_policy_pendulum"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Retrieve the environment</span>env <span class="token operator">=</span> model<span class="token punctuation">.</span>get_env<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Evaluate the policy</span>mean_reward<span class="token punctuation">,</span> std_reward <span class="token operator">=</span> evaluate_policy<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> env<span class="token punctuation">,</span> n_eval_episodes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"mean_reward={mean_reward:.2f} +/- {std_reward}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Load the policy independently from the model</span>saved_policy <span class="token operator">=</span> MlpPolicy<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"sac_policy_pendulum"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Evaluate the loaded policy</span>mean_reward<span class="token punctuation">,</span> std_reward <span class="token operator">=</span> evaluate_policy<span class="token punctuation">(</span>saved_policy<span class="token punctuation">,</span> env<span class="token punctuation">,</span> n_eval_episodes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"mean_reward={mean_reward:.2f} +/- {std_reward}"</span><span class="token punctuation">)</span></code></pre><h3 id="开多个环境同时训练"><a href="#开多个环境同时训练" class="headerlink" title="开多个环境同时训练"></a>开多个环境同时训练</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> PPO<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>vec_env <span class="token keyword">import</span> DummyVecEnv<span class="token punctuation">,</span> SubprocVecEnv<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>env_util <span class="token keyword">import</span> make_vec_env<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils <span class="token keyword">import</span> set_random_seed<span class="token keyword">def</span> <span class="token function">make_env</span><span class="token punctuation">(</span>env_id<span class="token punctuation">,</span> rank<span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Utility function for multiprocessed env.    :param env_id: (str) the environment ID    :param num_env: (int) the number of environments you wish to have in subprocesses    :param seed: (int) the inital seed for RNG    :param rank: (int) index of the subprocess    """</span>    <span class="token keyword">def</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>env_id<span class="token punctuation">)</span>        env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed <span class="token operator">+</span> rank<span class="token punctuation">)</span>        <span class="token keyword">return</span> env    set_random_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    <span class="token keyword">return</span> _init<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    env_id <span class="token operator">=</span> <span class="token string">"CartPole-v1"</span>    num_cpu <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># Number of processes to use</span>    <span class="token comment" spellcheck="true"># Create the vectorized environment</span>    env <span class="token operator">=</span> SubprocVecEnv<span class="token punctuation">(</span><span class="token punctuation">[</span>make_env<span class="token punctuation">(</span>env_id<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_cpu<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Stable Baselines provides you with make_vec_env() helper</span>    <span class="token comment" spellcheck="true"># which does exactly the previous steps for you.</span>    <span class="token comment" spellcheck="true"># You can choose between `DummyVecEnv` (usually faster) and `SubprocVecEnv`</span>    <span class="token comment" spellcheck="true"># env = make_vec_env(env_id, n_envs=num_cpu, seed=0, vec_env_cls=SubprocVecEnv)</span>    model <span class="token operator">=</span> PPO<span class="token punctuation">(</span><span class="token string">'MlpPolicy'</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>25_000<span class="token punctuation">)</span>    obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>        obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="off-policy算法的多处理"><a href="#off-policy算法的多处理" class="headerlink" title="off-policy算法的多处理"></a>off-policy算法的多处理</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> SAC<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>env_util <span class="token keyword">import</span> make_vec_envenv <span class="token operator">=</span> make_vec_env<span class="token punctuation">(</span><span class="token string">"Pendulum-v0"</span><span class="token punctuation">,</span> n_envs<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># We collect 4 transitions per call to `ènv.step()`</span><span class="token comment" spellcheck="true"># and performs 2 gradient steps per call to `ènv.step()`</span><span class="token comment" spellcheck="true"># if gradient_steps=-1, then we would do 4 gradients steps per call to `ènv.step()`</span>model <span class="token operator">=</span> SAC<span class="token punctuation">(</span><span class="token string">'MlpPolicy'</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> train_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> gradient_steps<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>10_000<span class="token punctuation">)</span></code></pre><h3 id="使用具有字典状态输入的环境"><a href="#使用具有字典状态输入的环境" class="headerlink" title="使用具有字典状态输入的环境"></a>使用具有字典状态输入的环境</h3><p>例如图片向量与其他的单个输入，那么状态可以设置为一个字典，字典包含的值有图像观察和矢量观察。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> PPO<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>envs <span class="token keyword">import</span> SimpleMultiObsEnv<span class="token comment" spellcheck="true"># Stable Baselines provides SimpleMultiObsEnv as an example environment with Dict observations</span>env <span class="token operator">=</span> SimpleMultiObsEnv<span class="token punctuation">(</span>random_start<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>model <span class="token operator">=</span> PPO<span class="token punctuation">(</span><span class="token string">"MultiInputPolicy"</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>100_000<span class="token punctuation">)</span></code></pre><h3 id="定义callback函数来监控训练"><a href="#定义callback函数来监控训练" class="headerlink" title="定义callback函数来监控训练"></a>定义callback函数来监控训练</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> gym<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> TD3<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common <span class="token keyword">import</span> results_plotter<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>monitor <span class="token keyword">import</span> Monitor<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>results_plotter <span class="token keyword">import</span> load_results<span class="token punctuation">,</span> ts2xy<span class="token punctuation">,</span> plot_results<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>noise <span class="token keyword">import</span> NormalActionNoise<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> BaseCallback<span class="token keyword">class</span> <span class="token class-name">SaveOnBestTrainingRewardCallback</span><span class="token punctuation">(</span>BaseCallback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Callback for saving a model (the check is done every ``check_freq`` steps)    based on the training reward (in practice, we recommend using ``EvalCallback``).    :param check_freq:    :param log_dir: Path to the folder where the model will be saved.      It must contains the file created by the ``Monitor`` wrapper.    :param verbose: Verbosity level.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> check_freq<span class="token punctuation">:</span> int<span class="token punctuation">,</span> log_dir<span class="token punctuation">:</span> str<span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SaveOnBestTrainingRewardCallback<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>check_freq <span class="token operator">=</span> check_freq        self<span class="token punctuation">.</span>log_dir <span class="token operator">=</span> log_dir        self<span class="token punctuation">.</span>save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>log_dir<span class="token punctuation">,</span> <span class="token string">'best_model'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>best_mean_reward <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>inf    <span class="token keyword">def</span> <span class="token function">_init_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Create folder if needed</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>save_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>self<span class="token punctuation">.</span>save_path<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_on_step</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>n_calls <span class="token operator">%</span> self<span class="token punctuation">.</span>check_freq <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># Retrieve training reward</span>          x<span class="token punctuation">,</span> y <span class="token operator">=</span> ts2xy<span class="token punctuation">(</span>load_results<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_dir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'timesteps'</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># Mean training reward over the last 100 episodes</span>              mean_reward <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Num timesteps: {self.num_timesteps}"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Best mean reward: {self.best_mean_reward:.2f} - Last mean reward per episode: {mean_reward:.2f}"</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># New best model, you could save the agent here</span>              <span class="token keyword">if</span> mean_reward <span class="token operator">></span> self<span class="token punctuation">.</span>best_mean_reward<span class="token punctuation">:</span>                  self<span class="token punctuation">.</span>best_mean_reward <span class="token operator">=</span> mean_reward                  <span class="token comment" spellcheck="true"># Example for saving best model</span>                  <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Saving new best model to {self.save_path}"</span><span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>save_path<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># Create log dir</span>log_dir <span class="token operator">=</span> <span class="token string">"tmp/"</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>log_dir<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create and wrap the environment</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'LunarLanderContinuous-v2'</span><span class="token punctuation">)</span>env <span class="token operator">=</span> Monitor<span class="token punctuation">(</span>env<span class="token punctuation">,</span> log_dir<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Add some action noise for exploration</span>n_actions <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>action_noise <span class="token operator">=</span> NormalActionNoise<span class="token punctuation">(</span>mean<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">,</span> sigma<span class="token operator">=</span><span class="token number">0.1</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Because we use parameter noise, we should use a MlpPolicy with layer normalization</span>model <span class="token operator">=</span> TD3<span class="token punctuation">(</span><span class="token string">'MlpPolicy'</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> action_noise<span class="token operator">=</span>action_noise<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create the callback: check every 1000 steps</span>callback <span class="token operator">=</span> SaveOnBestTrainingRewardCallback<span class="token punctuation">(</span>check_freq<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> log_dir<span class="token operator">=</span>log_dir<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Train the agent</span>timesteps <span class="token operator">=</span> <span class="token number">1e5</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>int<span class="token punctuation">(</span>timesteps<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>callback<span class="token punctuation">)</span>plot_results<span class="token punctuation">(</span><span class="token punctuation">[</span>log_dir<span class="token punctuation">]</span><span class="token punctuation">,</span> timesteps<span class="token punctuation">,</span> results_plotter<span class="token punctuation">.</span>X_TIMESTEPS<span class="token punctuation">,</span> <span class="token string">"TD3 LunarLander"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="图像作为输入的环境"><a href="#图像作为输入的环境" class="headerlink" title="图像作为输入的环境"></a>图像作为输入的环境</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>env_util <span class="token keyword">import</span> make_atari_env<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>vec_env <span class="token keyword">import</span> VecFrameStack<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> A2C<span class="token comment" spellcheck="true"># There already exists an environment generator</span><span class="token comment" spellcheck="true"># that will make and wrap atari environments correctly.</span><span class="token comment" spellcheck="true"># Here we are also multi-worker training (n_envs=4 => 4 environments)</span>env <span class="token operator">=</span> make_atari_env<span class="token punctuation">(</span><span class="token string">'PongNoFrameskip-v4'</span><span class="token punctuation">,</span> n_envs<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注意这里叠加了4帧作为一个输入</span>env <span class="token operator">=</span> VecFrameStack<span class="token punctuation">(</span>env<span class="token punctuation">,</span> n_stack<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用了cnn网络</span>model <span class="token operator">=</span> A2C<span class="token punctuation">(</span><span class="token string">'CnnPolicy'</span><span class="token punctuation">,</span> env<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>25_000<span class="token punctuation">)</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="规范输入"><a href="#规范输入" class="headerlink" title="规范输入"></a>规范输入</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> gym<span class="token keyword">import</span> pybullet_envs<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>vec_env <span class="token keyword">import</span> DummyVecEnv<span class="token punctuation">,</span> VecNormalize<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> PPOenv <span class="token operator">=</span> DummyVecEnv<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"HalfCheetahBulletEnv-v0"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Automatically normalize the input features and reward</span>env <span class="token operator">=</span> VecNormalize<span class="token punctuation">(</span>env<span class="token punctuation">,</span> norm_obs<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> norm_reward<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                   clip_obs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">)</span>model <span class="token operator">=</span> PPO<span class="token punctuation">(</span><span class="token string">'MlpPolicy'</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Don't forget to save the VecNormalize statistics when saving the agent</span>log_dir <span class="token operator">=</span> <span class="token string">"/tmp/"</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>log_dir <span class="token operator">+</span> <span class="token string">"ppo_halfcheetah"</span><span class="token punctuation">)</span>stats_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>log_dir<span class="token punctuation">,</span> <span class="token string">"vec_normalize.pkl"</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>save<span class="token punctuation">(</span>stats_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># To demonstrate loading</span><span class="token keyword">del</span> model<span class="token punctuation">,</span> env<span class="token comment" spellcheck="true"># Load the saved statistics</span>env <span class="token operator">=</span> DummyVecEnv<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"HalfCheetahBulletEnv-v0"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>env <span class="token operator">=</span> VecNormalize<span class="token punctuation">.</span>load<span class="token punctuation">(</span>stats_path<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  do not update them at test time</span>env<span class="token punctuation">.</span>training <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token comment" spellcheck="true"># reward normalization is not needed at test time</span>env<span class="token punctuation">.</span>norm_reward <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># Load the agent</span>model <span class="token operator">=</span> PPO<span class="token punctuation">.</span>load<span class="token punctuation">(</span>log_dir <span class="token operator">+</span> <span class="token string">"ppo_halfcheetah"</span><span class="token punctuation">,</span> env<span class="token operator">=</span>env<span class="token punctuation">)</span></code></pre><h3 id="事后经验回放（HER）"><a href="#事后经验回放（HER）" class="headerlink" title="事后经验回放（HER）"></a>事后经验回放（HER）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">import</span> highway_env<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> HerReplayBuffer<span class="token punctuation">,</span> SAC<span class="token punctuation">,</span> DDPG<span class="token punctuation">,</span> TD3<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>noise <span class="token keyword">import</span> NormalActionNoiseenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"parking-v0"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create 4 artificial transitions per real transition</span>n_sampled_goal <span class="token operator">=</span> <span class="token number">4</span><span class="token comment" spellcheck="true"># SAC hyperparams:</span>model <span class="token operator">=</span> SAC<span class="token punctuation">(</span>    <span class="token string">"MultiInputPolicy"</span><span class="token punctuation">,</span>    env<span class="token punctuation">,</span>    replay_buffer_class<span class="token operator">=</span>HerReplayBuffer<span class="token punctuation">,</span>    replay_buffer_kwargs<span class="token operator">=</span>dict<span class="token punctuation">(</span>      n_sampled_goal<span class="token operator">=</span>n_sampled_goal<span class="token punctuation">,</span>      goal_selection_strategy<span class="token operator">=</span><span class="token string">"future"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># IMPORTANT: because the env is not wrapped with a TimeLimit wrapper</span>      <span class="token comment" spellcheck="true"># we have to manually specify the max number of steps per episode</span>      max_episode_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>      online_sampling<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    buffer_size<span class="token operator">=</span>int<span class="token punctuation">(</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>    gamma<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>    policy_kwargs<span class="token operator">=</span>dict<span class="token punctuation">(</span>net_arch<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">2e5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"her_sac_highway"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Load saved model</span><span class="token comment" spellcheck="true"># Because it needs access to `env.compute_reward()`</span><span class="token comment" spellcheck="true"># HER must be loaded with the env</span>model <span class="token operator">=</span> SAC<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"her_sac_highway"</span><span class="token punctuation">,</span> env<span class="token operator">=</span>env<span class="token punctuation">)</span>obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Evaluate the agent</span>episode_reward <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action<span class="token punctuation">,</span> _ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>    episode_reward <span class="token operator">+=</span> reward    <span class="token keyword">if</span> done <span class="token operator">or</span> info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"is_success"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Reward:"</span><span class="token punctuation">,</span> episode_reward<span class="token punctuation">,</span> <span class="token string">"Success?"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"is_success"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        episode_reward <span class="token operator">=</span> <span class="token number">0.0</span>        obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="设定可变学习率"><a href="#设定可变学习率" class="headerlink" title="设定可变学习率"></a>设定可变学习率</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> PPO<span class="token keyword">def</span> <span class="token function">linear_schedule</span><span class="token punctuation">(</span>initial_value<span class="token punctuation">:</span> float<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">]</span><span class="token punctuation">,</span> float<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>progress_remaining<span class="token punctuation">:</span> float<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        <span class="token keyword">return</span> progress_remaining <span class="token operator">*</span> initial_value    <span class="token keyword">return</span> func<span class="token comment" spellcheck="true"># Initial learning rate of 0.001</span>model <span class="token operator">=</span> PPO<span class="token punctuation">(</span><span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span> <span class="token string">"CartPole-v1"</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span>linear_schedule<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>20_000<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># By default, `reset_num_timesteps` is True, in which case the learning rate schedule resets.</span><span class="token comment" spellcheck="true"># progress_remaining = 1.0 - (num_timesteps / total_timesteps)</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>10_000<span class="token punctuation">,</span> reset_num_timesteps<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h3 id="访问和修改模型参数"><a href="#访问和修改模型参数" class="headerlink" title="访问和修改模型参数"></a>访问和修改模型参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token keyword">import</span> gym<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch <span class="token keyword">as</span> th<span class="token keyword">from</span> stable_baselines3 <span class="token keyword">import</span> A2C<span class="token keyword">from</span> stable_baselines3<span class="token punctuation">.</span>common<span class="token punctuation">.</span>evaluation <span class="token keyword">import</span> evaluate_policy<span class="token keyword">def</span> <span class="token function">mutate</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>str<span class="token punctuation">,</span> th<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Dict<span class="token punctuation">[</span>str<span class="token punctuation">,</span> th<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Mutate parameters by adding normal noise to them"""</span>    <span class="token keyword">return</span> dict<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param <span class="token operator">+</span> th<span class="token punctuation">.</span>randn_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create policy with a small network</span>model <span class="token operator">=</span> A2C<span class="token punctuation">(</span>    <span class="token string">"MlpPolicy"</span><span class="token punctuation">,</span>    <span class="token string">"CartPole-v1"</span><span class="token punctuation">,</span>    ent_coef<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>    policy_kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"net_arch"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    seed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>    learning_rate<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use traditional actor-critic policy gradient updates to</span><span class="token comment" spellcheck="true"># find good initial parameters</span>model<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>total_timesteps<span class="token operator">=</span>10_000<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Include only variables with "policy", "action" (policy) or "shared_net" (shared layers)</span><span class="token comment" spellcheck="true"># in their name: only these ones affect the action.</span><span class="token comment" spellcheck="true"># NOTE: you can retrieve those parameters using model.get_parameters() too</span>mean_params <span class="token operator">=</span> dict<span class="token punctuation">(</span>    <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> model<span class="token punctuation">.</span>policy<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class=