<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pycharm配置和使用教程</title>
      <link href="2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/"/>
      <url>2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="pycharm的配置"><a href="#pycharm的配置" class="headerlink" title="pycharm的配置"></a>pycharm的配置</h2><p>首先在安装pycharm的窗口：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/1.png" class=""><p>四个√可以全部打上，第一个是在桌面创建64位启动器的快捷方式，第二个是给启动器添加PATH地址，第三个是在鼠标右键的菜单添加“以工程的方式打开文件夹的选项”，第四个是文件添加.py后缀。</p><p>在file→setting可以对pycharm进行设置：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/4.png" class=""><p>Appearance中，Theme项可以改主题，黑色或白色。</p><p>Editor→General→Font可以调字体大小</p><p>如果想在代码中加上个人信息，可以这样设置：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/5.png" class=""><hr><h2 id="pycharm的使用"><a href="#pycharm的使用" class="headerlink" title="pycharm的使用"></a>pycharm的使用</h2><p>pycharm最下方三个按钮</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/2.png" class=""><p>Terminal是终端，作用和cmd一样，可以直接输入py文件名***.py直接看运行结果。Run用来呈现运行结果。Python Console是python控制台，可以输入程序进行测试。</p><p>右上角是运行历史，有你最近运行的文件，可以直接进行运行调试操作：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/3.png" class=""><p>右键点击文件夹可直接在文件夹下创建各种文件：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/6.png" class=""><hr><p>pycharm的快捷键</p><p>为了提高编写代码的速度，以及方面程度，需要知道一些常用的快捷键。</p><p>最常用的是：</p><ol><li><p>ctrl+c  复制</p></li><li><p>ctrl+d  快速复制上行的内容至下一行</p></li><li><p>Ctrl+shift+n   通过文件名快速查找工程内的文件</p></li><li><p>ctrl +a    全选</p></li><li><p>Ctrl+alt+l  调整代码格式</p></li><li><p>Alt+enter  导入模块</p></li><li><p>Ctrl+z  回退</p></li><li><p>ctrl+x  剪贴</p></li><li><p>ctrl+/   注释，去注释</p></li><li><p>shift +Tab  往移动</p></li><li><p>shift +enter  自动回车，跳入下一行</p></li><li><p>ctrl +enter  自动回车，跳入上一行</p></li></ol><p>更多的快捷键：<a href="https://segmentfault.com/a/1190000005776418">https://segmentfault.com/a/1190000005776418</a></p>]]></content>
      
      
      <categories>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm配置和使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫学习笔记（一）</title>
      <link href="2021/01/12/python-pa-chong-xue-xi-bi-ji-yi/"/>
      <url>2021/01/12/python-pa-chong-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="待更新。。。"><a href="#待更新。。。" class="headerlink" title="待更新。。。"></a>待更新。。。</h2>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm安装及破解方法</title>
      <link href="2021/01/12/pycharm-an-zhuang-ji-po-jie-fang-fa/"/>
      <url>2021/01/12/pycharm-an-zhuang-ji-po-jie-fang-fa/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先下载好pycharm专业版2018.2.4安装包，文件名为pycharm-professional-2018.2.4.exe，并进行安装。</p></li><li><p>将0.0.0.0 account.jetbrains.com添加到hosts文件最后，注意hosts文件无后缀，如果遇到无法修改或权限问题，可以采用覆盖的方法去替换hosts文件。修改后请检查hosts文件是否修改，激活码无法激活的原因99.99%是因为hosts没有修改正确。Windows系统hosts文件路径：c:\windows\system32\drivers\etc</p></li><li><p>下载破解文件并将 JetbrainsCrack-3.1-release-enc.jar 放置到 pycharm安装目录的\bin目录下（位置可随意，只要配置文件填写相对应的路径）。</p></li><li><p>在 Pycharm安装目录的\bin目录下找到 <code>pycharm.exe.vmoptions</code> 和 <code>pycharm64.exe.vmoptions</code> (如果你是idea激活则是：idea.exe.vmoptions和idea64.exe.vmoptions)，以文本格式打开并同时在两个文件最后追加 -javaagent:D:\JetBrains\PyCharm 2018.2.1\bin\JetbrainsIdesCrack-3.4-release-enc.jar，注意路径修改成你的pycharm安装路径，文件名称是你破解包名，然后保存。</p></li><li><p>打开pycharm64，点击activate code，输入以下激活码</p><p>ThisCrackLicenseId-{<br>“licenseId”:”11011”,<br>“licenseeName”:”微信公众号”,<br>“assigneeName”:”随便输入”,<br>“assigneeEmail”:”邮箱，随便输入”,<br>“licenseRestriction”:””,<br>“checkConcurrentUse”:false,<br>“products”:[<br>{“code”:”II”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DM”,”paidUpTo”:”2099-12-31”},<br>{“code”:”AC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RS0”,”paidUpTo”:”2099-12-31”},<br>{“code”:”WS”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DPN”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”PS”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RM”,”paidUpTo”:”2099-12-31”},<br>{“code”:”CL”,”paidUpTo”:”2099-12-31”},<br>{“code”:”PC”,”paidUpTo”:”2099-12-31”}<br>],<br>“hash”:”2911276/0”,<br>“gracePeriodDays”:7,<br>“autoProlongated”:false}</p></li></ol><p>点击OK,激活完成。</p>]]></content>
      
      
      <categories>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm安装破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么样玩转信息研究方法指南学习笔记</title>
      <link href="2021/01/11/zen-me-yang-wan-zhuan-xin-xi-yan-jiu-fang-fa-zhi-nan-xue-xi-bi-ji/"/>
      <url>2021/01/11/zen-me-yang-wan-zhuan-xin-xi-yan-jiu-fang-fa-zhi-nan-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>本文是基于《怎样玩转信息研究方法指南》所写的个人的阅读总结，该书采用漫画方式进行叙述，十分直观易懂，我在阅读过程中整理笔记，在此基础上进行压缩总结，整理成本文。</p><h3 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h3><p><strong>定一个论题</strong>，开始研究，但题目不能过大（如：美国内战），这不是一个人能完成的工作，可以延伸成“美国内战时期，谁的武器更好”，但这依旧不够具体。谁是指什么？更好是指什么方面？必须更加深入地挖掘才能明确问题。然后再延伸为“武器供给怎样影响了美国内战的结果？”，还是有点宽泛。改为“北方联邦的武器制造和供应系统是否助力于北方联盟在美国内战中打败南部同盟”，这是个好论题。由于是研究小论文，应当把提问改为陈述：“美国联邦的武器制造和分配有助于北方联邦在美国内战中打败南部同盟”。</p><hr><h3 id="找文献"><a href="#找文献" class="headerlink" title="找文献"></a>找文献</h3><p>这就是“论题陈述”，接下来是<strong>收集论据</strong>，可能会发现有一些论据表明你的观点是错误的，请不要无视，可以调整和改进自己的论题。<strong>首先不要用百度，谷歌，维基百科</strong>，把内容拷贝作为你的观点。原因：1. 以用户为主导的开放网站上的信息，有些时候不太靠谱。2. 你或许一直都错误地将谷歌，百度百科用于学术研究行为，它们应该是起点，而不是全部。对搜索背景信息来说，百度是个好地方，但问题在于其中的巨量信息很多没用或完全错误。<strong>实体书和电子书</strong>是不错的信息来源，在搜索背景信息的时候，会看到<strong>参考文献</strong>，这个非常实用。还有就是<strong>图书馆的资料库</strong>，里面有编目系统，包含书架上的实体书目，资料，还有相关的网络资源，包括电子书，期刊论文以及图书馆没有的实体版本的资料。另一个就是<strong>学术期刊论文</strong>，与书籍相比，期刊论文可以聚焦于某一论题下一个相当有针对性的方面，让你的问题豁然开朗。图书馆可能有期刊的影印本。</p><p>为了对抗网络上不相关，不准确，动机险恶的信息，你们应该牢记一些东西：</p><ol><li>谁创造了它？</li><li>它紧跟时代吗？能帮你解答你的研究问题吗？还是离题了？</li><li>支撑作者的结论是什么？</li><li>作者写作它的目的是什么？</li><li>它是写给谁看的？</li><li>它是经过专业认证的吗？</li></ol><p>你是在前人的成果上做进一步的研究调查，引文能表明你知道哪些相关工作已经完成，而你的研究是以之为基础的，因此你需要<strong>引用它们</strong>，这十分有必要，比你先做这些研究的人们希望并需要有人认可他们做出的努力，不希望被人钻空子，声称你这些都是你自己的成果。其次要让读者能<strong>追溯你思维的逻辑</strong>，从而确认你的研究调查的确可以推导出所得结论。最后，记得一直<strong>追踪记录</strong>你的研究过程：数据库、文献、搜索关键字等。</p><hr><h3 id="信息组织和查找原理"><a href="#信息组织和查找原理" class="headerlink" title="信息组织和查找原理"></a>信息组织和查找原理</h3><p><strong>元数据</strong>能用一种便于数据库和编目系统查询的方式描述信息。普通搜索本质上是在经过谷歌排序的网页里搜寻你输入的短语（或关键字）。网页按照短语出现的位置、频率、包含多少链接、该网页存在了多久等因素进行排序，很有可能翻出来一大堆无用的垃圾信息。在图书馆提供的资源里，会看到许多标签，都代表这本资料的一个特征。当我们把一系列类似的概念归入同一个标准标签是，就称这个标签为一个“<strong>受控词汇</strong>（唯一官方指定）”，目的是为了信息更容易被搜索和发现。“<strong>主题标目</strong>（描述性标签）”是数据库和编目系统实用的一类元数据。如果在编目系统搜索“座位”，可能会看到座位——见椅子的信息，让你知道所使用的并不是系统偏好的词汇，明确“椅子”是官方使用的词语。使用主题词的时候，可以表明狭义信息，也可以是广义信息，例如可以搜“椅子”或“家具”。</p><hr><h3 id="信息搜索与图书馆编目系统"><a href="#信息搜索与图书馆编目系统" class="headerlink" title="信息搜索与图书馆编目系统"></a>信息搜索与图书馆编目系统</h3><p><strong>编目系统</strong>是一个巨大的、可检索的在线列表，只要把一份写有元数据的记录添加到系统中，就能搜索并找到那项资料。我们要把一个中心论点拆分开来，分成一些有用的搜索关键词，剔除无用信息，找到<strong>中心论点的核心</strong>。如：社交媒体的使用限制了职场生产力并降低收入，可以拆除：社交媒体、职场生产力、收入三个关键词。然后想出一些同义词或近义词代替关键词，如：社交网络代替社交媒体，效率和生产代替职场生产力，利润代替收入。然后，将这些词语组合起来，输入搜索栏，改变搜索词语的组合方式，可能会给搜索结果的数量、质量带来巨大的影响（可以搜：社交网络和职场，社交媒体和生产力等）。记录下你使用过的搜索词汇，那些有效，哪些无效。可以通过编目系统和数据库提供的一系列选项，切换到<strong>高级搜索</strong>功能（范围有全文，主题，作者，编目号码，系列名，期刊名等）。先试试<strong>主题搜索</strong>，系统会浏览一系列主题词标签登记在这个词汇下的书籍++，主题搜索比关键词搜索更简洁，更有条理，许多东西不止一个主题。如果不知道这种东西被赋予什么标签，不熟悉有关某一论题的正确的主题词，可以通过同义词词典找到可替换的术语从而扩大或缩小搜索范围，或使用图书馆提供的图书编目系统或数据库的主题词指南，查找官方使用的主题词（点击图书档案下的主题词会为你呈现这个主题标目下所有书目的书单）。也可以使用<strong>作者搜索</strong>，注意准确拼写。也可以使用<strong>书名搜索</strong>，但不确定书名的情况下，最好用主题或关键词搜索。总之，要在正确的范围内作调查，研究“美国内战”却 用作者搜索不会带给你想要的结果，弄清楚你想要哪种搜索，应该输入什么词汇。</p><ul><li><p>可以用<strong>布尔运算符</strong>(AND,OR,NOT)进行词汇的组合搜索，改进关键词搜索，同时也可以用括号来组织复杂的搜索语句，例如：（基因改良食品 or 转基因食品）and （安全）。</p></li><li><p>如果记不起一个词的准确拼法，可以使用<strong>截词</strong>（搜theroy可以用thero*），小心不要截掉太多内容，否则会给出海量结果。</p></li><li><p><strong>通配符</strong>可以让你在一个词的中间填空，例如：gr?y，alumin!um。问好代表一个字母，感叹号代表一个字母或没有字母。</p></li><li><p>另一种搜索技巧是使用<strong>引号</strong>搜索档案或电子书全文中的某一具体短语，能保证你的搜索词是一个整体，而不是两个分开的短语。例如：搜“心脏病”数据库不会把它们拆成“心脏”和“病”看待。</p></li><li><p>假设你找到了很好的信息资源，它往往自带一张<strong>参考资料或引用文献</strong>，列举了作者在研究过程中使用过的书、论文、网址等信息。浏览看看是否有你值得一看的东西，在数据库里搜索一下，往往会有惊喜。</p><hr></li></ul><h3 id="期刊和数据库"><a href="#期刊和数据库" class="headerlink" title="期刊和数据库"></a>期刊和数据库</h3><p><strong>期刊</strong>是一些定期出版的资料，可以是杂志，新闻报刊，学术期刊，可以是网上发布的文章或实体书，一般分为三大类：大众、行业/职业、学术/理论/同行评议。<strong>大众类期刊</strong>是你在书店或杂货店看到的杂志和报纸，采用光滑的纸张，明亮的颜色吸引读者，时常包含大量广告，出版非常频繁，每月，每周甚至每天出版，决定大众出版物内容的最重要因素是潮流，一些未经深入调查研究的时兴话题往往占据了这些出版物大部分版面，很少专业术语，没什么技术含量，不包含参考文献，无法让你对某一话题有更加深入的了解，无法为学术研究项目提供可靠的资料。<strong>专业或行业出版物</strong>专门提供与某一行业相关的信息，通常由专业组织来出版。主要面向熟悉该领域特有技术行话的读者。其重点不是独创性的调查研究，挑选文章的标准是以实验为基础，会提供引文和参考文献，但不必须经过实验检验，可能会对你的研究调查有帮助，但需要验证有疑点的推断和结论，同时也会用炫酷的设计和投放广告，广告与行业相关，行业出版物一般每一个月或两个月出版一次，网络版要频繁很多。<strong>学术期刊、理论期刊、同行评议期刊、调查研究期刊</strong>，这些都由专业学者和研究人员撰写，专业组织或学术机构出版的出版物，内容是对专业领域或学术领域非常重要的论题独创性的研究和分析，是最可靠的文章，是学者们相互交流研究进程的基本渠道之一。学术期刊针对的是非常特定的读者群体，使用大量术语和行话，标题明确，充满术语，内容很长，充满图表以及其他佐证文章观点的插图，没有与核心内容无关的广告，印刷简约。世界上很多学术期刊只能在图书馆数据库看到，十分昂贵，通常每月，双月，每季，每年甚至几年才出版一次。一卷指的是一年，期刊两个月出版一次，一年就有六期，六期包含在这一卷中。一卷的页码只有第一其从1算起，之后的几期可能会接着前一期的页码算。学术期刊中的文章要经历一个同行评议的过程，能确保文章的准确性。</p><p>大部分学术期刊里的文章无法被谷歌搜索出来，谷歌只能帮你定位一大堆学术论文或全文的引文，大部分论文的全文是找不到的，之所以能在图书馆找到是因为图书馆付费了，但不意味你获得了资料的所有权，大部分时候，学生和学者都可以得到所需的信息。<strong>数据库</strong>和编目系统搜索方式相似。搜索之后可以看到期刊刊名，卷号，期号和页码，且可以看到获取全文的链接。两个非常重要的搜索结果限制是<strong>同行评议限制</strong>和<strong>全文限制</strong>，同行评议限制排除没有通过同行评议流程的结果，全文限制排除了不提供论文全文的结果，能搜出非常好的文章。</p><ul><li><p><strong>主题标目</strong>是一片金库，如果文章列表的一些主题标目跟你的论题高度一致，那么就要快速记下以便之后使用。</p></li><li><p><strong>摘要</strong>是数据库档案中极有用的部分，用一两段话提供一篇论文的概述，简要说明论文讲了什么，用了什么方法，最终的发现是什么，可以立刻判断出论文对你的研究有没有用，节约时间。</p></li><li><p>搜期刊论文的方法一是在编目系统中搜索期刊名，再去书架上找卷号和期号。另一种是看能否在图书馆数据库找到，可以在综合性数据库和专题类数据库中尝试查找一下期刊名，用卷号、期号、论文题目缩小搜索范围。</p></li><li><p>学术期刊会在官方网站或社交媒体上提供免费博客、播客和新闻，某些期刊与你的研究相关，一定要关注它们的更新。这些信息可以谷歌一些期刊名称，或者数据库专题期刊列表里找找看。</p></li><li><p>有困难时，可以找图书管理员聊聊。</p><hr></li></ul><h3 id="在开放时间中搜索信息"><a href="#在开放时间中搜索信息" class="headerlink" title="在开放时间中搜索信息"></a>在开放时间中搜索信息</h3><ul><li><p>用谷歌、必应、雅虎或其他商业搜索引擎做普通搜索时，想找到我们需要的信息很难，因为信息实在太多了，事实上互联网上的大部分信息你都无法知晓（没有被搜索引擎的爬虫获取到）。如果使用普通网络搜索而不是数据库搜索，会错过一大堆信息，这是写学术论文的一大损失。图书馆资源可以排除混乱的信息，增加你搜索的深度并提高搜索质量。</p></li><li><p>搜索引擎也有<strong>高级搜索</strong>选项，可以沿用布尔运算符，可以限制搜索范围如：使用语种，上一次更新时间，文件类型，域名类型等。使用普通搜索时，在一个词前加减号可以将它从搜索词中剔除，网址前加”site:”可以让你搜索网址里面的内容，短语加引号可以搜索完整的短语。大部分搜索引擎默认你搜索词汇中有and。</p></li><li><p>一些政府官方网站，公众网站，非营利组织官方网站有时也会提供与你课题相关的信息。</p></li><li><p>百度百科可以作为你研究的起点，但不能再研究成果中引用百度百科的内容，因为这些文章不能作为真正意义上的学术信息来源，也不是原创的研究，只是信息稍加整合，告诉你一个基本的概念而已。因此用这些资料打打基础就好，熟悉一下这个论题的各个方面，在百科全书文章中，最有用的是参考文献，引述作品，注释和其他一些页面上呈现的内容，是现成的可以查找的资源。阅读百科文章时要谨慎，防止有人添加劣质信息。</p></li></ul><hr><h3 id="评估信息资源"><a href="#评估信息资源" class="headerlink" title="评估信息资源"></a>评估信息资源</h3><p>无论你使用的信息来自学术期刊，流行杂志，书，网站请核实这些信息的来源，每一点信息都需要进行评估，很多复杂因素决定了信息来源是否可用。哪怕一些很<br>“学术”的信息不一定适合你的研究，也不仅仅因为“大众化”的东西就把它排除在外。评估是持续不断的过程，不要收集一堆资源进行一次性评估，而是找到一个，评估是否保留，再找下一个。评估信息资源的重要性不止体现在学术研究上，高质量的信息能帮你做出很多人生抉择。</p><p>进行信息评估时的几个问题：</p><ul><li>信息来自哪里</li><li>谁制造发布了这些信息</li><li>哪个机构负责出版这些信息</li><li>作者和出版方在论题相关领域足够权威吗</li><li>作者是否有足够教育背景，他们的经历和该学科相关吗</li><li>是什么让一份出版物和网站信息相当可靠，作为可靠信息有一段时间了吗</li><li>是不是经过同行评议审核的作品，并且是学术资源，还是更像通俗读物</li></ul><p>评估网站信息的时候，一定要<strong>确保这个机构可以对内容负责</strong>，如果不是官方发布的学术资料，看看能否在网页上找到“关于我们”的链接，能提供与该机构有关的信息，有时会发现许多机构有明显倾向性，动机是达成某项目的，而不是研究本身，这样的机构可能不会给出你需要的客观而有学术价值的信息。</p><p>对于应该相信谁，相信什么，要<strong>建立自己的认知系统</strong>，这是建立在我们个人经验，偏见以及与现存的其他系统的交互之上的，因此我们要保持辩证的观点看问题，保持健康的怀疑心态，主动接受种类更广的，不同类别的作者创造的内容，问自己为什么这条信息有用，这个作者更值得信赖。</p><p>学术型资源有不同的目标群体，看看信息中的语言是否太过专业难懂，或者太过浅显不足以应当研究需求。看看资源的研究范围，是覆盖了一个论题的多个方面还是仅仅针对十分细枝末节的话题，是把你知道的信息重复了一遍，还是提供了你之前不知道的新视角，新内容？这就要看<strong>你的研究到底需要什么</strong>，早点明确你的研究需求很重要。</p><p>有时有些信息有意说服读者相信一些事情，这种做法不一定值得信任，小心在某一话题立场鲜明的作者，使用一种有说服意图的资源之前，请确保你已经了解过其他对立的观点，并且一些矛盾已经被解决了。</p><p>在评估一个信息资源时，引文和参考文献扮演十分重要的角色。作者有没有提供一份他们在研究过程中参考过的文献清单？有没有解释哪种信息资源提供了哪段引文或论据？你应该能按照他们提供的信息资源顺藤摸瓜，证实作者正确使用了这些信息，回溯他们的研究。</p><p>要检查信息的时效性：它是多久之前被创造的？有时你会希望信息越新越好，在科技、医药和其他更新迅速的研究领域尤为重要，看看新的信息是否颠覆了旧的内容。</p><hr><h3 id="信息使用道德"><a href="#信息使用道德" class="headerlink" title="信息使用道德"></a>信息使用道德</h3><p><strong>抄袭</strong>是指把别人的成果拿走，当做你自己的成果使用，并且不给哪些真正研究和写作的人署名，这就是知识的盗窃。把署名放在该放的地方就叫<strong>引文</strong>。记住，研究是一种群体行为，作为研究者，你的贡献是在他人成果基础上有所建树，每一种新发现都是建立在其他人的研究成果之上的。用自己的话把别人的内容再进行叙述也是抄袭，因为拿走了学术创意当做自己的。你要说明原版是哪里来的，以及原版不是你的作品，这就是<strong>转述</strong>。如果你压缩并精简了一个想法，那就叫做<strong>概述</strong>。</p><p>不是所有内容都需要引文，如果你的论文中有一些论据是常识，不是建立在其他人原创研究的基础上的，这些论据就不需要写引文。</p><p>作为一个研究者，你应该把你遇到的各种知识综合成一个新的产物，创造新知识，你用的是已存在的研究和信息，但最后的产物必须是你自己创造，你自己对零碎信息的理解和整合。不是简单罗列总结其他人的研究成果，而是在创立对研究的新观点，为现有的知识体系做贡献。</p><p>写论文时，一定要细心整理信息资源，否则会很容易忘记自己需要用到的信息出处，是谁写了哪些内容。至少记下使用过的信息来源，让你能回过头参考，可以使用<strong>参考文献管理软件</strong>（bibliographic manager）帮你在网上追踪信息来源。</p><p>写引文不仅能帮你避免被指控抄袭的麻烦，还能帮你找到有益于自己的研究信息资源。</p><p>学术论文有很多种“方式”写作，最常见的有MLA写作指南，APA出版手册，芝加哥写作手册，不同的写作方式一般与不同的学术学科密切相关。这些指南提供了非常多的细节指导，保证你论文的规范性。</p><p>在引用信息资源时，要关注两种主要组成部分，一种是小注释，跟在引文，转述或总结后面，标识信息是怎么样来的，另一种是你放在论文最后一张的清单，详细讲述你在研究过程中使用过的信息的来源。文内引文和脚注/尾注不只是告诉你的读者信息来自另一个地方，也会引导读者去看你论文末尾的完整清单，这张清单里必须包含你在研究里使用过的所有信息资源。</p><p>书和论文不是需要引用的唯一信息资源，根据不同的论题，你可能还要引用电影，纪录片，电视，博客，视频，网站等等。引文不一定是官方的，你提供一个在线链接，就是简单，非正式地引用了一个信息。<strong>zotero那样的免费在线工具</strong>可以帮你生成和组织所有类型的引文。</p><p>版权是法律对知识产权所有者的保护，一般版权所有者有在一定时间内贩卖、发行他们的知识产权的权利。</p><p>一般情况下，正当使用信息要求你的作品不使原作的商业潜能受损，并且你只使用了原作的一小部分，并非所有对受版权法保护资料的使用都必须是非营利和教育目的，只要最终产物和原作品有实质性的不同就行。要小心使用资源，在版权方面宁求稳妥，不要冒险！</p><p>另一方面，一些版权所有者鼓励人们使用他们的作品，一种方法是加入知识共享许可协议的条件下发表作品，该协议是保护自己作为创造者的权益同时允许其他人使用，发布甚至在他们作品上继续加工的协议。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究方法 </tag>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人建立hexo博客Matery主题的过程心得</title>
      <link href="2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/"/>
      <url>2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><hr><h2 id="下载git和node"><a href="#下载git和node" class="headerlink" title="下载git和node"></a>下载git和node</h2><p>首先，搭建博客需要两个环境，一个是node.js，一个是git。</p><p>打开cmd控制台输入</p><pre class=" language-cmd"><code class="language-cmd">node -v               #查看node版本git --version      #查看git版本</code></pre><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/1.jpg" class=""><p>如果没有显示版本号则需要配置环境变量：</p><p>右键点击“我的电脑”→高级系统设置→环境变量</p><p>给在系统变量给node新建变量：</p><p>变量：NODE_PATH            值：node文件夹所在地址（如：F:\node）</p><p>然后点击系统变量中Path的编辑，新建以下几个环境变量：</p><pre class=" language-script"><code class="language-script">F:\node\F:\Git\Git\cmdF:\node\node_global\#具体情况需要看文件位置而定</code></pre><p>然后再验证node和git的版本。</p><hr><h2 id="cnpm安装"><a href="#cnpm安装" class="headerlink" title="cnpm安装"></a>cnpm安装</h2><p>直接用npm速度会比较慢（源在国外），因此要利用npm安装cnpm.</p><p>打开Git Bash输入以下命令：</p><pre class=" language-cmd"><code class="language-cmd">npm install -g cnpm --registry=http://registry.npm.taobao.org#安装淘宝的cnpm 管理器</code></pre><p>安装完成后，以后可以用cnpm直接代替npm.</p><hr><h2 id="hexo框架安装"><a href="#hexo框架安装" class="headerlink" title="hexo框架安装"></a>hexo框架安装</h2><pre class=" language-cmd"><code class="language-cmd">cnpm install -g hexo-cli    #安装hexo框架hexo -v        #查看hexo版本</code></pre><hr><h2 id="利用hexo搭建博客"><a href="#利用hexo搭建博客" class="headerlink" title="利用hexo搭建博客"></a>利用hexo搭建博客</h2><p>在一个地方创建空文件夹（命名blog），所有东西将在里面生成。</p><p>打开文件夹，在此文件夹下运行git bash（右键单击空白处）</p><pre class=" language-git"><code class="language-git">sudo hexo init     #生成博客 初始化博客</code></pre><p>这时候系统会自动克隆文件到blog，并默认landscape主题。再输入命令：</p><pre class=" language-git"><code class="language-git">hexo s    #启动本地博客服务</code></pre><p>浏览器访问 <a href="http://localhost:4000/%EF%BC%8C%E8%BF%99%E6%97%B6%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">http://localhost:4000/，这时可以看到系统默认的版本。</a></p><hr><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><pre class=" language-git"><code class="language-git">hexo n <span class="token string">"我的第一篇文章"</span> #创建新的文章 </code></pre><p>可以看到在source文件夹下的_posts文件夹下创建了.md文件。</p><p>打开文件就可以编辑内容，里面是基于markdown语法的。</p><p>想了解Markdown语法如何使用，请看b站视频<a href="https://www.bilibili.com/video/BV1hJ411X75X?from=search&amp;seid=9433284770037044167">15分钟快速上手Markdown教程</a></p><hr><h2 id="部署到gitee"><a href="#部署到gitee" class="headerlink" title="部署到gitee"></a>部署到gitee</h2><p>输入命令：</p><pre class=" language-git"><code class="language-git">hexo clean #清理hexo g #生成hexo s  #启动本地服务器</code></pre><p>这时可以再本地 <a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%9C%AA%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">http://localhost:4000/查看自己未发布的版本。</a></p><p>然后我们可以把它部署到网上了，部署的方案有很多种，可以把它部署到github，也可以部署到gitee，由于github访问速度较慢，且有的地区无法访问，因此我个人是部署到了gitee上。</p><p>首先你必须有个gitee账号，创建一个公开仓库，注意命名和路径必须与你的用户名一致（不是昵称）。</p><p>创建完仓库后，点击管理</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/2.jpg" class=""><p>此处可以查看仓库的路径，复制这个路径，等下用到。</p><hr><p>打开位于Blog文件夹下的_config.yml文件，这个文件是用来配置你的博客的。滑到底端，改下面的三行代码并保存：</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git  repo: https://gitee.com/用户名/用户名.git    #你的仓库地址+.git  branch: master</code></pre><p>然后安装git部署插件：</p><pre class=" language-git"><code class="language-git">cnpm install --save hexo-deployer-git</code></pre><p>然后在git bash上输入命令：</p><pre class=" language-git"><code class="language-git">hexo d     # 部署到仓库</code></pre><p>然后输入你gitee的用户名和密码，等部署完毕，点开仓库，可以发现里面有你部署进去的文件。</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/3.jpg" class=""><p>此时点击服务里面的gitee Pages，对内容进行更新：</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/4.jpg" class=""><p>更新完成后就可以登录https://你的用户名.gitee.io/对你的博客进行访问啦！</p><hr><h1 id="Matery主题的搭建和完善"><a href="#Matery主题的搭建和完善" class="headerlink" title="Matery主题的搭建和完善"></a>Matery主题的搭建和完善</h1><h2 id="主题下载和更改"><a href="#主题下载和更改" class="headerlink" title="主题下载和更改"></a>主题下载和更改</h2><pre class=" language-git"><code class="language-git"> git clone https://github.com/blinkfox/hexo-theme-matery   #在themes文件夹下执行命令，下载matery主题到本地</code></pre><p>打开blog文件夹下的_config.yml，对其中的内容进行更改：</p><pre class=" language-yml"><code class="language-yml"># Sitetitle: 微笑紫瞳星subtitle: '感谢各位的来访，请在留言板上留下你的足迹'description: '本站记录本人各种学习的旅途，用于巩固自我并启发后来人'keywords: [博客制作,个人经验分享,Unity,人工智能等]author: 微笑紫瞳星language: zh-CNtimezone: ''</code></pre><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'url: http://tianjuewudi.gitee.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks</code></pre><p>主题修改找到关键词theme把内容替换成自己的主题：</p><pre class=" language-yml"><code class="language-yml">theme: hexo-theme-matery</code></pre><p>其他还有很多内容关于各种插件，我将一一讲述。</p><hr><h2 id="Matery主题配置"><a href="#Matery主题配置" class="headerlink" title="Matery主题配置"></a>Matery主题配置</h2><p>效果预览：</p><p>｛% asset_img 5.jpg %｝</p><p>打开themes文件夹下的Matery主题文件夹。首先打开media文件夹,对里面的文件进行一一说明:</p><ol><li>banner中存放的是在首页展示的图片，一天换一张，共7张，一个星期轮一次，可对其进行替换，图片名称须相同。</li><li>fetureimages中的图片将被展示在相册中，且在没有给文章设置封面时，随机挑选一张作为封面，可替换。</li><li>reward中存放着别人打赏你扫描的二维码，一张微信，一张支付宝，可替换。</li><li>comment_bg.png是评论区上的图片。</li><li>icp.png是备案标志。</li><li>logo.png是你昵称旁的标志，可替换。</li></ol><p>打开matery文件夹下的_config.yml可对主题进行配置</p><p>首页的轮播设置（页首语和文章推送）：</p><pre class=" language-yml"><code class="language-yml">cover:  showPrevNext: true # 是否显示左右切换按钮. Whether to display the left and right toggle buttons.  showIndicators: true # 是否显示指示器. # Whether to display the indicators  autoLoop: true # 是否自动轮播. Whether it is automatically rotated.  duration: 120 # 切换延迟时间. Switching delay time.  intervalTime: 5000 # 自动切换下一张的间隔时间. Automatically switch the interval of the next one.  useConfig: false # 是否使用配置文件, 在 _data/covers.json 下配置推荐文章, false则使用主题在文章中的配置 cover coverImg  # useConfig 使用方式: 将主题 hexo-theme-matery/source/_data/covers.json 移动到 my-blog/source/_data/下修改配置即可</code></pre><p>我的梦想模块：</p><pre class=" language-yml"><code class="language-yml">dream:  enable: true  showTitle: true  title: 关于多巴胺的兴趣驱动  text: 了解自身的兴趣产生和作用机制是控制自我的重要一步，多巴胺是能让自身产生兴奋愉悦感的物质，对于任何事物的任何兴趣都是基于多巴胺驱动的，但奈何人体对于多巴胺具有耐受性，长期沉浸于高多巴胺分泌的环境下会使得人体对于快乐的感觉变得迟钝。因此，让自己沉浸于技术学习的最好办法是平时隔绝高多巴胺分泌的娱乐活动，但又把这种活动作为阶段性成就的奖赏，你便会得到数倍于平时的快乐。</code></pre><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/6.jpg" class=""><p>其他以此类推，代码注释非常友好，可以轻易知道其功能。</p><hr><h2 id="看板娘模块的安装和使用"><a href="#看板娘模块的安装和使用" class="headerlink" title="看板娘模块的安装和使用"></a>看板娘模块的安装和使用</h2><p>模块安装：</p><pre class=" language-git"><code class="language-git">cnpm install --save hexo-helper-live2d</code></pre><p>下载完成后，可以在node_modules文件夹中找到自己安装的插件。</p><p>然后下载你想要的看板娘模块（可以自己到网上找哪个合心意的），执行命令：</p><pre class=" language-git"><code class="language-git">cnpm install &amp;#123;packagename&amp;#125;<span class="token comment" spellcheck="true"># 例如cnpm install live2d-widget-model-haru</span></code></pre><p>下载完成后，回到blog根目录下配置_config.yml，添加以下代码（model要根据自己情况设置）：</p><pre class=" language-yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-z16  display:    position: right    width: 200    height: 400  mobile:    show: false</code></pre><p>这样在右下角有看板娘啦！</p><hr><h2 id="音乐播放器的使用"><a href="#音乐播放器的使用" class="headerlink" title="音乐播放器的使用"></a>音乐播放器的使用</h2><p>进入matery主题文件夹下的_config.yml，可以发现matery主题自带一个音乐播放器模块,对其进行修改：</p><pre class=" language-yml"><code class="language-yml"># Whether to display the musics.# 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: 听听音乐  autoHide: true    # hide automaticaly  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 5456680252     # require song id / playlist id / album id / search keyword  # 503838841  fixed: true       # 开启吸底模式  autoplay: true   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠  hideLrc: true     # 隐藏歌词</code></pre><p>这里最重要的是id号，这决定了我们播放的歌单，默认是播放网易云音乐（server: netease），腾讯，酷狗，虾米，百度音乐都可以，这里以网易云为例：</p><p>首先在网易云上创建自己的歌单，然后用浏览器打开网易云音乐，打开你的歌单页面，看网址，网站后面的一串数字就是你歌单的id，把它填到配置中去。</p><hr><h2 id="Valine评论系统的使用"><a href="#Valine评论系统的使用" class="headerlink" title="Valine评论系统的使用"></a>Valine评论系统的使用</h2><p>可以看到在matery主题_config.yml有这么一段代码（enable改为true）：</p><pre class=" language-yml"><code class="language-yml"># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: true  appId:   appKey:   notify: true  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: '请畅所欲言' # Comment Box placeholder  background: /medias/comment_bg.png</code></pre><p>在这里，我们只需填写的内容只有appId和appKey。具体操作访问<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><p>然后把你得到的appId和appKey填入其中，那么在留言板和每篇文章的最后都会出现这么一个评论区：</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/7.jpg" class=""><p>这样利用leanCloud就可以无后端得开发出一个评论区啦，非常简单便捷。</p><hr><h2 id="文章图片无法显示问题"><a href="#文章图片无法显示问题" class="headerlink" title="文章图片无法显示问题"></a>文章图片无法显示问题</h2><p>hexo根目录下运行</p><pre class=" language-script"><code class="language-script">cnpm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>安装成功后这个插件的内容需要修改（可能有bug）</p><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><pre class=" language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>    <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>            <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>              <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>              <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:--&gt;"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后打开_config.yml文件，修改下述内容</p><pre class=" language-yml"><code class="language-yml">post_asset_folder: true</code></pre><hr><blockquote><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p></blockquote><p>​        也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>​        正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><pre class=" language-script"><code class="language-script">{% asset_img example.jpg This is an example image %}</code></pre><hr><h2 id="如何消除首页的颜色变化蒙版效果"><a href="#如何消除首页的颜色变化蒙版效果" class="headerlink" title="如何消除首页的颜色变化蒙版效果"></a>如何消除首页的颜色变化蒙版效果</h2><p>打开themes文件夹→matery→source→css→matery.css，找到这么一大段代码，注释其中的代码。</p><pre class=" language-yml"><code class="language-yml">@-webkit-keyframes rainbow {    /*注释内容*/}@keyframes rainbow {    /*注释内容*/}</code></pre><p>完成之后，重新部署到网站上，ctrl+F5刷新网页。</p><hr><h2 id="多平台一键部署（未尝试）"><a href="#多平台一键部署（未尝试）" class="headerlink" title="多平台一键部署（未尝试）"></a>多平台一键部署（未尝试）</h2><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class=" language-yml"><code class="language-yml">deploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: git    repo: https://gitee.com/lxl80/lxl80.git    branch: master    ignore_hidden: false</code></pre><p>安装：</p><pre class=" language-yml"><code class="language-yml">cnpm install hexo-deployer-cos-enhanced --save</code></pre><p>_config.yml配置如下：</p><pre class=" language-yml"><code class="language-yml">deploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: cos    bucket: lxl80-130****    region: ap-beijing    secretId: AKIDh9****F8FvL    secretKey: Z3IGiur****QZR3PgjXmlVg    cdnConfig:      enable: true      cdnUrl: https://static.lixl.cn      bucket: static-130****      region: ap-beijing      folder: static      secretId: AKIDh9****F8FvL      secretKey: Z3IGiur****QZR3PgjXmlVg</code></pre><p>用hexo c,hexo g ,hexo d三连可实现一键发布。</p><hr><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图</td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td>表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><p>实例：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: 基于Hexo的matery主题搭建博客date: 2020-01-09 16:44:00author: 微笑紫瞳星img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: 工具tags:  <span class="token list punctuation">-</span> blog  - <span class="token title important">hexo<span class="token punctuation">---</span></span></code></pre><hr><h2 id="百度优化（使百度发现我们的网站）"><a href="#百度优化（使百度发现我们的网站）" class="headerlink" title="百度优化（使百度发现我们的网站）"></a>百度优化（使百度发现我们的网站）</h2><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/8.jpg" class=""><p>选择文件验证，下载文件将它上传到gitee仓库中，然后点击服务→gitee Pages进行更新，更新完成后验证文件就可以正常访问啦。</p><p>然后再把站内的各种连接提交上去：</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/9.jpg" class=""><p>目前尚未成功，抓取异常信息：DNS无法解析IP</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
