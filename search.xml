<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刻意练习读书笔记</title>
      <link href="2021/04/24/ke-yi-lian-xi-du-shu-bi-ji/"/>
      <url>2021/04/24/ke-yi-lian-xi-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<ul><li>练习并非不断重复，不断重复是“天真的练习”，无法带来进步。正确的练习需要好导师，有目标，有反馈…</li><li>无论何时练习都不晚，只要掌握正确的方法，梦想就能实现。</li></ul><h3 id="推荐序"><a href="#推荐序" class="headerlink" title="推荐序"></a>推荐序</h3><p>从来不存在一万小时定理，它仅仅是畅销书作家对心理科学研究的一次不太严谨的演绎而已。成功和练习时间不完全成正比，天赋虽然不起决定性作用，但也是一大影响因子。练习的成果也不和时间成正相关，取决于练习的方法。称为专家的时间也往往随着不同的专业技能领域而变化。</p><p><strong>长时工作记忆</strong>是区分卓越者和一般人的一个重要能力，这才是可以练习的指向和本质。首先刻意练习的<strong>任务难度要适中，能收到反馈，有足够次数的重复练习，学习者能够纠正自己的错误</strong>。多数不靠谱的成功学选择的是错误的练习方式，因为它们没有激活长时工作记忆，比如，下象棋的次数毫无作用，10个1万小时，也成不了国手，但是，如果看着已经发表的棋谱，推测国手的下法，这种刻意练习的方式，激活了长时记忆功能。</p><p><strong>认知复杂度高（销售、管理）与认知复杂度低（象棋、钢琴）的学习活动的差异很大程度上表现为隐形知识的多少和比重。</strong>隐形知识需要在情景中寻找。人的学习受情景的制约或促进。要把学习的知识应用在什么情境中，就应当在什么情景中学习。<strong>成人的最佳学习方式并非独自学习，而是在情景中学习。</strong>要点如下：</p><ul><li><strong>找到学习共同体</strong>：有效的学习不是关门苦练，而是找到属于自己的学习小团体，如程序员在GitHub这样的网站练习编程。</li><li><strong>隐性知识显性化</strong>：隐性知识使人们能利用概念解决现实问题，也称策略知识。</li><li><strong>模仿榜样</strong>：可以是现实的导师，也可以是网上的导师。</li><li><strong>培养多样性</strong>：在多种场景中实践。</li></ul><h3 id="天才存在吗"><a href="#天才存在吗" class="headerlink" title="天才存在吗"></a>天才存在吗</h3><p>天才是每个人与生俱来的才能，通过适当的方法，我们也一样可以充分利用。例如莫扎特的完美音高不是只有少数幸运儿才能拥有的天赋，而是一种只要经过适度的接触和训练，几乎人人都可以培养和发展的能力。天才只是比我们更多地利用了大脑和身体的适应能力而已。</p><p><strong>学习不再是挖掘某人潜力的方式，而是开发这种潜力的方式，我们可以创造自己的潜力。</strong>不论在什么行业和领域，提高表现与水平的最有效的方法，全部遵循一系列普遍原则，我们把这种通用的方法称为“刻意练习”。</p><h2 id="有目的的练习"><a href="#有目的的练习" class="headerlink" title="有目的的练习"></a>有目的的练习</h2><p>持续的刻意练习可以突破极限，各领域的杰出人物都靠大量练习，我们生活的这个世界，很多人都拥有超常的能力，胜过历史上任何时代的人们，会被当时的人们认为“不可能”。随着时代的发展，我们训练的方法越来越高级，训练的数量和精细度上与时俱进，使不同行业或领域的人们能力稳定提高。<strong>在任何行业中最有效的练习都通过充分利用人类身体和大脑的适应能力，逐步塑造和提升他们的技能，以做到一些从前不可能做到的事情。</strong>对刻意练习原则的运用是任何行业涉及训练方法的最佳方式。</p><p>但是，研究表明，一旦你已经达到令你自己满意的技能水平，而且能够自然而然表现出你的水平（即自动化），你就已经不再进步了。<strong>一旦某人的表现达到“可接受”的水平，并且可以做到自动化，那么，再多练习几年，也不会有什么进步。</strong>原因在于，如果没有刻意去提高，这些自动化的能力就会慢慢退化。</p><p>因此我们需要“有目的的练习”，所谓“天真的练习”，基本上只是反复做某件事情，并指望只靠那种反复，就能提高表现和水平。</p><ul><li><strong>有目的的训练需要有明确的目标</strong>，这可以有效引导你的练习。</li><li><strong>有目的的训练是专注的</strong>，想要取得进步必须把注意力集中在你的任务上。</li><li><strong>有目的的训练包含反馈</strong>，不论你在努力做什么事情，都需要反馈来准确辨别你在哪些地方还有不足，以及怎么会存在这些不足。</li><li><strong>有目的的训练需要走出舒适区</strong>，如果你从来不迫使自己走出舒适区，便永远无法进步。走出舒适区，意味要试着做一些自己以前没做过的事情，你会发现，一些没做过的事情做起来相对容易，你就会继续逼迫自己。有时遇到让你感到很困难的事情，想办法去逾越这些障碍，这是通向有目的的练习的隐藏钥匙。</li></ul><p>通常情况下，逾越障碍的方法不是“试着做更难的事情”，而是“<strong>试着做不同的事情</strong>”，不管什么障碍，越过它的最好办法是从不同方向去想办法，这也是需要导师的原因，因为他们可以为你提供克服障碍的方法。</p><p>有些时候，你根本不知道自己该做什么才能提高水平，你觉得那是不可逾越的障碍。但是，没有证据表明，在任何行业，人们真的会遇到绩效和表现完全不变的极限，但人们往往会在努力提高自己的时候放弃。这个时候的放弃并非是达到了极限，而是动机不足，<strong>要想办法保持你的动机</strong>。</p><p>有目的的训练还不够，人们通常忽略了练习中其他一些同等重要的方面。要改进各种类型的心理表现，至关重要的是心理结构的构建，这样可以避免短时记忆的局限，高效处理信息，例如高效的记忆方法。经过对特定的训练方法的研究之后，该方法已被证明是提高人们在各个领域的能力的最有效的方法，这就是“刻意练习”，后面会详细描述。</p><h2 id="大脑的适应能力"><a href="#大脑的适应能力" class="headerlink" title="大脑的适应能力"></a>大脑的适应能力</h2><p>大脑的结构和运行都会为了应对各种不同的心理训练而改变，就像肌肉和心血管系统响应体育运动一样。大脑就像肌肉，越练越大。长期从事一件事情的人比别人更擅长是因为大脑的对应区别变得更加的发达了。大脑和身体一样，拥有无限的适应能力。<strong>如果你是足够多地练习某件事情，你的大脑会改变某些神经元的用途，以帮助你完成那项任务</strong>。</p><p>人的身体有一种偏爱稳定性的趋向，单个细胞和组织在尽最大的努力使一切保存相同。当被迫走出舒适区后，细胞的生物化学反应和平常完全不同，它们通过提高细胞中不同的基因来适应，因为DNA大多数基因是不活动的，<strong>细胞打开和关闭对应的基因取决于那个时候需要什么</strong>。由系统改变细胞的行为，细胞和周围的系统就被迫走出了它们的舒适区。要使改变不断进行下去，就要给自己不断加码，如果不继续给自己施加压力，身体就会保持体内平衡，你将停下改进的脚步。</p><p>但是，如果在过长时间过分地逼迫自己，可能导致倦怠和学习低效。<strong>大脑和身体一样，处于舒适区之外但又离得不太远的“甜蜜点”上的挑战，改变最为迅速。</strong></p><ul><li>训练对大脑的影响，可能随着年龄的增长在几个方面有所不同：儿童和青少年的大脑比成年人的大脑更具适应能力，因此年纪越小，训练产生的影响越大。</li><li>超长时间的练习来发展大脑的某些部位，可能会导致大脑其他功能的退化。</li><li><strong>由训练引起的认知和生理变化需要继续保持</strong>，如果停止训练，它们会开始消失。</li></ul><p>对于刻意练习，我们的目标不仅仅是挖掘自己的潜力，而是要构筑它，让以前不可能做到的事情变得可能做到。下一个问题就是：挑战体内平衡和发展那种潜力的最佳方式是什么？余下的大部分内容会回答这个问题。</p><h2 id="心理表征"><a href="#心理表征" class="headerlink" title="心理表征"></a>心理表征</h2><p>国际象棋大师处理和解释棋子位置的方式，是心理表征的一个例子，他们和新手看到的是同一个棋盘，理解却全然不同。心理表征既使大师着眼于全局来观察，又使大师可以在必要时把注意力集中在具体的招法上，这就是“既见树木，又见森林”。</p><p>心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物对应的心理结构，或具体或抽象。<strong>大多数的刻意练习包括创建更加有效的心理表征</strong>，例如你听到狗这个单词，便能想起狗的各种细节，这些信息被整合到一个全面的概念中；在体育运动上，也需要创建心理表征来事先想象当时的体位和动量给人的感觉是怎么样的，才能正确地控制身体的动作。</p><p><strong>心理表征是行业或领域特定的</strong>，只应用于专为它们而培养出来的技能。这些<strong>心理表征是信息预先存在的模式</strong>（比如事实、图片、关系、规则等等），这些模式存在于长时记忆中，用于有效且快速地顺应某些类型的局面。尽管短时记忆存在极限，但心理表征可以让人们迅速处理大量信息。每个人都拥有并使用心理表征，否则无法协调肌肉活动，无法生活下去。精心创建的心理表征的一个主要优势在于：你可以立刻吸收和考虑更多信息。</p><p>将杰出人物与其他人区分开的因素，正是前者心理表征的质量和数量。他们针对本行业中自己可能遇到的各种不同情况，创造了高度复杂和精密的表征。<strong>他们经过年复一年的练习，已经改变了大脑中的神经回路，以创造高度专业化的心理表征，使得令人难以置信的记忆，规律的识别成为可能，也使得他们能够培养和发展各种高级的能力，以便在特定的专业领域中实现卓越。</strong></p><p>心理表征的一个重要好处在于可以帮助我们处理信息：理解和解读它，把它保存在记忆中，组织它，分析它，并用它来决策。当你阅读一篇专业的文章，读完之后看自己记住了多少内容时，其结果并非取决于你的语言能力，而是<strong>取决于你个人对这个专业事物的理解或了解程度</strong>。</p><p><strong>心理表征可以用来为很多行业和领域做计划，表征越好，计划就越高效。</strong>杰出人物运用心理表征提高技能水平，监测并评估自己的技能水平，在必要时候调整心理表征，使之更加有效。</p><p><strong>心理表征有助于高效学习。</strong>学生之间的差别，在很大程度上取决于他们能够多敏锐的察觉自己所犯的错误，这也是心理表征的好处。<strong>技能和心理表征使一个良性循环：你的技能越娴熟，创建的心理表征就越好；而心理表征越好，就能更有效地练习，以磨炼技能。</strong></p><h2 id="黄金标准"><a href="#黄金标准" class="headerlink" title="黄金标准"></a>黄金标准</h2><p>在本章，我们探索所有方法中最有效的：刻意练习。它是黄金标准，对任何一个渴望学习某种技能的人们来说，都是理想的方法。</p><p>一些活动如：音乐演奏、数学等，必须采用高度发展的、被人们广泛接受的训练方法。如果某人谨慎勤奋地遵循这些方法，那几乎一定能称为该行业的专家，这些行业有几个共同的特点：</p><ul><li>对于<strong>绩效的测量，总是存在客观的方面</strong>。因为只有确切知道人们表现的提高的组成，才能提出改进表现的方法。</li><li>这些行业往往具有足够的<strong>竞争性</strong>，从业人员有强烈的动机来训练和提高。</li><li>这些行业通常都是已经<strong>形成规模</strong>的，相关技能已经得到数十年甚至数世纪的培养。</li><li>这些行业中，一些人还担任<strong>导师和教练</strong>，他们已经发展出日渐复杂的一整套训练方法，使得该行业的技能水平稳步提高。</li></ul><p>对提高水平产生影响的大多数因素，都需要付出艰辛努力，而且并非是那么有趣的因素。每个人都不喜欢艰苦的练习，之所以学生们激情四射进行练习，是因为他们发现，这样的练习是提高他们水平不可或缺的因素。<strong>最杰出的人是在各种有目的的练习中花了最多时间的人。</strong></p><p>刻意练习和其它有目的的练习有两个重要的区别，首先，它需要一个已经得到合理发展的行业或领域；其次，需要一位能够布置练习作业的导师。刻意练习有以下特点：</p><ul><li>刻意练习发展的技能已经有一套<strong>行之有效的训练方法</strong>，训练的方案应由导师乎或教练来设计和监督。</li><li>刻意练习发生在人们的<strong>舒适区之外</strong>，需要人们付出近乎最大限度的努力，一般并不使人心情愉快。</li><li>刻意练习<strong>包含特定目标</strong>，通常包括目标表现的各个方面，并非只是模糊的总体改进。一旦设立了总目标，导师会制订一个计划以实现一系列微小的改变，最后累积起来，实现之前期望的更大变化。并应当使从业者能够观察到他的表现和变化。</li><li>刻意练习需要人们<strong>完全地专注和有意识地行动</strong>，学生必须紧跟他的练习的特定目标，以便做出适当的调整，控制练习。</li><li>刻意练习<strong>包含反馈</strong>，以及应对反馈而进行的调整。在练习的早期，反馈来自导师，后面学生必须学会自己监测自己，发现错误并作出调整，这需要高效的心理表征。</li><li>刻意练习产生有效的心理表征，又依靠有效的心理表征，提高水平和改进心理表征<strong>相辅相成</strong>。</li><li>刻意练习致力于针对性提高技能的某些特定方面，构建或修改过去那些已经获取的技能，这种<strong>逐步的改进造就卓越的表现</strong>。</li></ul><p>在你所在的领域满足条件的情况下，应当采用刻意练习，否则也应尽量应用刻意练习的原则。</p><p>在你已经熟悉的领域，你应仔细思考杰出的表现有哪些特点，尝试<strong>采用一些方法进行度量</strong>，然后寻找所在行业中评分最高的人。理想情况是找到客观的、可复制的测量指标，以便前后一致地从普通从业者中挑选出最优异的从业者。思考他们到底做了什么，什么使得这个人和其他人表现不同，那些差别就可以解释他的杰出成就。你越是调整自己的练习方法，模仿自己行业中的杰出人物，你的练习也可能越是有效。并且，无论什么时候，最佳的方法几乎总是找一位优秀的导师。</p><p>虽然一万小时定律不完全正确，但在任何一个有悠久历史的行业，想要成就一番事业，成为领域中的杰出人物，需要付出许多年艰苦卓绝的努力，也许并不需要恰好一万小时，但也要花很长时间，这只为了与那些同类工作中同样勤奋的人有平等竞争的机会。而且人们成就的门槛在不断提高，潜力随之提高，没有迹象表明这个门槛不能再提高。</p><h2 id="在工作中运用刻意练习原则"><a href="#在工作中运用刻意练习原则" class="headerlink" title="在工作中运用刻意练习原则"></a>在工作中运用刻意练习原则</h2><p>要让练习变成日常工作的一部分，首先从思维方式开始改变，要提高绩效，需要辨认并拒绝三种流行的错误思想。</p><ul><li><strong>第一种错误思想是某人的能力通常受到基因的限制。</strong>在任何一个人们选择着重发展的行业，人人可以通过正确的训练帮助自己大幅度提高，我们可以塑造自己的潜力。</li><li><strong>第二种错误思想是如果你足够长时间做某件事情，一定会更加擅长。</strong>这样不是提高绩效和表现的秘诀，相反会使人停下前进的脚步，并且缓慢地下滑。</li><li><strong>第三种错误思想是想要提高，只需要努力。</strong>有很多技能，除非你运用一些专门用于提升那些特定技能的练习方法，否则即使加倍努力也无法取得进步。</li></ul><p>有一种方法是<strong>边干边学</strong>，商界人士都很忙，很难挤出时间练习技能，所以需要将练习融入工作，例如公司会议的幻灯片展示。这种方法的好处是它使人们熟悉练习的习惯，并思考如何练习。一旦理解了可以用练习实现多大的进步，他们找机会将其他商业活动转变成练习活动。到最后，练习成了日常工作的一部分。</p><p>用<strong>即时反馈</strong>（导师提出或精心设计的电脑程序提供）来强化的练习，可以成为提高绩效的强大方法。可以获得反馈，这是经验日渐丰富的原因。</p><p>很多时候，用反复多次的<strong>“离线练习”</strong>的方式练习使人们受益匪浅，这种练习并不是在真正的工作中练习，即使犯了错，也不会产生严重后果，因此可以使用仿真器等来提高技术水平。</p><p>传统的方法一直是先找出关于正确方法，然后再让学生应用。刻意练习只聚焦于绩效和表现，以及怎样提高绩效和表现。但是<strong>很多人过于重视知识，而不重视技能</strong>，主要原因是传统和方便：向一大群人介绍知识，比起创造条件让人们通过练习提升技能，要容易得多。例如医生已经花了15年时间接受教育，几乎所有的教育都聚焦于提供知识，而几乎没有直接运用他们行医之后的必备技能，一旦医学院毕业之后，又要花好几年学习课程，接触临床诊治，这才终于开始提升医学技能。其中<strong>最有效的练习方法是一些具有互动因子的练习</strong>，例如讨论小组，案例分析，实习培训等，效率最低的是说教式的练习，基本上是聆听讲座，但这个最常见的教育活动。原因在于缺少反馈，没有机会去尝试新的技能，纠错并发展新的技能。</p><p>很多人认为，只有简单积累更多知识，就能容易地熟练掌握技能，但实际上从业者会发现自己需要大量时间提升工作中的技能。在提高绩效和表现时，<strong>正确的问题是“我们怎样改进相关技能”，而不是“我们这样传授相关知识”。</strong></p><h2 id="在生活中运用刻意练习原则"><a href="#在生活中运用刻意练习原则" class="headerlink" title="在生活中运用刻意练习原则"></a>在生活中运用刻意练习原则</h2><h3 id="找导师"><a href="#找导师" class="headerlink" title="找导师"></a>找导师</h3><p>首先，<strong>需要找一位好导师</strong>。导师只是能够引导你达到他们或者他们学生曾经达到过的水平，不一定是最出色的，但应当在所在领域中具有一些技能和经验。导师可以做的最重要的事情是帮你创建心理表征，以便你能监测和纠正自己的表现。并且当你自己改变了的时候，可能会需要更换导师。</p><h3 id="专注和投入"><a href="#专注和投入" class="headerlink" title="专注和投入"></a>专注和投入</h3><p><strong>如果你在走神，或者你很放松，并且只是为了好玩，你可能不会进步。</strong>不专注，就没效果，这是最大限度改进你练习的秘诀。但是，人很难长时间保持专注，我们要指定明确计划，尽量把练习时间缩短，是更加迅速提升技能水平的最佳方式。<strong>在较短时间内百分百投入，比在更长时间百分之七十投入效果更好</strong>。一旦发现自己无法专注练习，就停下来，一定确保每天足够的睡眠，以便能够最大限度集中精力练习。</p><h3 id="没有导师时"><a href="#没有导师时" class="headerlink" title="没有导师时"></a>没有导师时</h3><p>没有导师怎么办？为了提高，我们必须自己创造机会，<strong>没有导师，你必须自己想出自己的练习。</strong>在这个互联网时代，我们很容易能找到人们感兴趣的大多数常见技能的练习方法。反复做同一件事，目的是<strong>找出你在哪些方面存在不足</strong>，并且聚焦在那些方面取得进步，而不是毫无目的一遍遍做同一件事情。试着采用<strong>不同的方法</strong>提高，直到你最终找到适合自己的方法。</p><p>练习技能时，记住三个F：<strong>专注(focus)、反馈(feedback)、纠正(fix it)**。将技能分解成一些组成部分，以便反复练习，并且有效分析，确定你的不足之处，然后想出各种方法解决它们。我们</strong>只有努力去复制杰出人物的成就，失败了就停下来思考为什么会失败**，思考其原因，如此一而再再而三地尝试，才能创建有效的心理表征。</p><h3 id="跨越停滞阶段"><a href="#跨越停滞阶段" class="headerlink" title="跨越停滞阶段"></a>跨越停滞阶段</h3><p>当你觉得自己的提升达到了瓶颈，<strong>要越过这种停滞阶段，最好的办法是以新的方式挑战你的大脑和身体。</strong>有些时候你发现自己再难以有所提高时，可能只是技能中的一两个组成部分在妨碍你。为了弄懂是哪个部分，首先要走出舒适区，逼自己一下，搞清楚自己的停滞点在哪里。然后设计一种特定的练习方法，专门改进那个特定的弱点。</p><h3 id="保持动机"><a href="#保持动机" class="headerlink" title="保持动机"></a>保持动机</h3><p><strong>保持动机是每个投入刻意练习中的人最终要面对的最大问题。</strong>有动机，练习才能持久。我们以为能够年复一年坚持高强度训练的人，可能具有一些罕见的“持之以恒”的品质，具有罕见的意志力，但这种假设是错误的。几乎没有科学证据证明，这个世间存在一种可在任何情形下运用的一般的“意志力”。意志力和天生才华，都是人们在事实发生了之后再赋予某个人的优点，无论什么情况，我们都不能在各种可能性成为现实之前作出这样的判断。因此，把问题聚焦在动机上，更加合理。</p><p>对于长期保持刻意练习的人来说，他们通常都<strong>培养了各种习惯</strong>，帮助自己前行。所有希望在某一领域提高技能水平的人，应当<strong>每天花1个小时或更多时间</strong>，专心练习那些需要全神贯注投入才能做好的事情，这是一条经验法则。动机包括两个组成：继续前进的理由和停下脚步的理由。你不再想做自己当初想做的事情，是因为停下脚步的理由战胜了继续前进的理由。**要保持动机，要么强化继续前进的理由，要么弱化停下脚步的理由。 **</p><p><strong>弱化停下脚步的理由最有效的是留出固定时间来练习，不受其他义务和分心的事情所干扰。</strong>杰出的同学比其他同学更能规划时间，更能准确估计参与休闲活动的时间。良好的规划，可以帮助你避免遭受许多占用的大量时间事情的干扰，以便把更多时间留给练习。要找出干扰你练习的事情，把其影响控制到最小，例如：如果你发现早晨的锻炼格外艰难，可以把锻炼安排到晚些时候；而难以在早晨开始练习的人们，往往没有获得足够的睡眠，理想情况是，你每天应当睡到自然醒并且起床后觉得神清气爽，如果不是这样，那应当早点上床睡觉。尽管任何一个特定的因素可能对你产生很微小的影响，但各种因素的影响是会累积的。<strong>杰出的人往往做两件有益的事情：一是保证充足的睡眠和保持健康。二是将练习课的时间限制在一个小时左右，过一个小时就休息，否则无法保持高度专注。</strong>随着时间的推移，继续练习会变得容易，身体和心理会适应那种感觉，越来越接近自然。</p><p>增强继续前进的理由：一旦你已经练习一段时间了，并且可以看到结果了，你对自己做的事情感到骄傲，从朋友的称赞中感到愉悦，这是你的身份感变了，你开始将自己看成公开演讲者，竖笛演奏者或折纸制作者，<strong>只要你能认识到这种新的身份来自你长时间的刻苦训练，那么进一步训练给你的感觉更像一种投资，而不是一种代价，这本身可以成为你动机的一部分。刻意练习另一个重要动机是相信自己可以成功。</strong>你必须相信你可以提高自己，跻身最优秀者的行列，这种信念的力量十分强大，甚至可以战胜现实。如果你不再相信自己可以实现某个目标时，要么是因为你陷入停滞状态，要么你的水平已经倒退了，此时千万不要半途而废。和你自己达成一个协议，你将尽自己的努力回归到之前的状态或跨越停滞阶段，然后你再放弃，到那个时候，或许你就不会放弃了。<strong>外部动机一种最强烈的方式是社会动机，最简单和最直接的是其他人的认可和崇拜。</strong>一种营造和保持社会动机的最好方法，是使你自己身边的人都支持，鼓励你的努力，这在由团体共同完成的活动中的活动最容易做到。将对同一件事情感兴趣的所有人聚集起来，或者吸引他们加入一个现有的群体，并且将团体的同志情谊和共同的目标作为达到你自己目标的额外动机，这使得人们拥有更多的额外动力，但要注意确保团体中的其他人也制订了和你类似的进步目标。</p><p>保持动机最好还要<strong>精心设置目标</strong>。将漫长的旅程分解成一系列可控的目标，并且每次只关注它们中的一个，甚至可以在每次达到一个目标时，给自己一个小小的奖励。总有一条路通向我们的梦想。刻意练习可以创造各种各样的可能性，大胆去闯，去试！</p><h2 id="成为杰出人物的路线图"><a href="#成为杰出人物的路线图" class="headerlink" title="成为杰出人物的路线图"></a>成为杰出人物的路线图</h2><p>本章使读者可以一步步观察，为了充分利用人类能力，接触人类能力的极限，需要做些什么。</p><h3 id="第一阶段：产生兴趣"><a href="#第一阶段：产生兴趣" class="headerlink" title="第一阶段：产生兴趣"></a>第一阶段：产生兴趣</h3><p>对未来的杰出人物来讲，他们小时候与自己感兴趣的任何事物之间的这种好玩的互动，是他们最终对这件事物充满兴趣的第一步。日后成为杰出人物的人的父母，在孩子的成长和发展阶段扮演了至关重要的角色。通常孩子不会自己去练习，但是通过边玩边练习的方式，孩子们在玩耍中踏入了追求卓越的道路。</p><p>兄弟姐妹也具有激励作用，一个孩子看到自己的哥哥姐姐在从事某项活动，并且获得父亲或母亲的关注和表扬时，自然也想加入进来，获得父母同样的关注和表扬。</p><h3 id="第二阶段：变得认真"><a href="#第二阶段：变得认真" class="headerlink" title="第二阶段：变得认真"></a>第二阶段：变得认真</h3><p>对某个行业感兴趣以后，通常要到导师那里上课了，这里大部分学生第一次接触到刻意练习。导师通常擅长激励学生，让学生通过刻意练习提高水平。同时父母也发挥重要作用，帮助孩子确定日程安排，并且可能采用一些较激进的措施（例如不上钢琴课就不能去游乐园），这个时候，未来的杰出人物都决定继续练习下去。虽然父母导师可以采用各种方式激励孩子，但<strong>最后那些动机必须来自孩子内心</strong>，否则它不会长久。</p><p>有些孩子在较大年龄中接触一个科目，这些科目的老师而不是孩子父母，第一次激发了孩子的兴趣，点燃了孩子的智力兴趣。由于这些孩子年龄更大一些，且在没有父母影响的前提下就已经对所学科目产生足够兴趣，因此几乎不需要父母的刺激或鼓励来完成家庭作业，并且能完成老师布置的所有作业。这个阶段的第一部分父母或老师的鼓励至关重要，但最后孩子开始体会到刻苦学习带来的回报，变得越来越能够进行自我激励，动机会开始从外部转向内部。尽管那些长大后才华横溢的艺术家依然需要父母和导师情感和技术的支持，但是他们都有着自我激励的动机从事繁重的工作。在到达这个阶段2~5年后，未来的杰出人物开始根据他们已经发展出来的技能来认同自己，而不再根据其他的兴趣领域来认同自己，他们对自己从事的练习开始认真起来。</p><p>不论如何，在某个领域中发展了特定技能的人们，经过年复一年的练习，都从技能的学习中获得了大量的愉悦感觉。也就是说，只有那些花了数年时间苦练某项技能的人，才能自然而然地喜欢那一技能。</p><h3 id="第三阶段：全力投入"><a href="#第三阶段：全力投入" class="headerlink" title="第三阶段：全力投入"></a>第三阶段：全力投入</h3><p>这个阶段要付出巨大的投入，才能成为自己领域中最杰出的人物，通常有最好的导师或学校指导自己的练习，直到基本能够尽最大可能改进为止，最终目标是接近人类能力的极限，跻身本领域最佳行列。这个阶段，动机完全靠学生自己保持，但家人依然能够发挥重要的支持作用。这个过程花费的代价也是巨大的，无论是时间成本和金钱成本都是难以估量的。但结束了这一艰辛旅程的学生也将获得巨大的回报。</p><h3 id="年龄和适应能力"><a href="#年龄和适应能力" class="headerlink" title="年龄和适应能力"></a>年龄和适应能力</h3><h4 id="身体适应能力受年龄影响大"><a href="#身体适应能力受年龄影响大" class="headerlink" title="身体适应能力受年龄影响大"></a>身体适应能力受年龄影响大</h4><p>在某些领域中，对于那些不从孩提时代开始练习的人们，永远无法练成，理解了这种限制，有助于确定你可能想在哪个领域发展。</p><p>其中最明显的是涉及体能的领域，对一般人而言，体能大约在20岁到达巅峰，随着年龄的增长，身体的柔韧性下降，变得容易受伤。但年龄也不是大家认为的参与体育比赛的限制，年纪大的人只是应当练习时间短一些，强度小一些，技能出现退化的原因很大程度是他们减少或停止了训练，如果定期参加训练，技能水平不会随着年龄增长出现大幅下降。在60多岁的马拉松跑步爱好者中，有四分之一的人可以击败一半以上年纪20~54岁的竞争选手。并且有人超过100岁时仍能在27秒完100米。</p><p>同时如果人们不从儿童时期开始锻炼，除了年龄增大而出现的体能缓慢下降，身体技能也会无法提升到卓越水平。20岁以后骨架结构固定，会对能力的培养有一定的限制。</p><h4 id="心理适应能力比身体更强"><a href="#心理适应能力比身体更强" class="headerlink" title="心理适应能力比身体更强"></a>心理适应能力比身体更强</h4><p>随着年龄的增大，身体的适应能力可能差了许多，但是心理的适应能力依然十分强大。</p><p>一个普遍经验是：随着年纪的增大，学习技能的方式也会发生改变，人类大脑在青少年早期拥有最多的脑灰质，从那以后脑灰质的数量会开始减少，神经细胞的突触会在人生早期达到最大数目，两岁孩子的突触比成年人多50%。大脑的持续改变，学习得以发生的背景也在改变。6岁的孩子，14岁孩子，即使学习同样的知识和成年人的学习方式都是不同的。因此如果成年人足够刻苦，大脑也会找到相应办法进行学习。大脑功能依旧可以十分强悍。</p><h3 id="第四阶段：开拓创新"><a href="#第四阶段：开拓创新" class="headerlink" title="第四阶段：开拓创新"></a>第四阶段：开拓创新</h3><p>有些人做出的杰出贡献，彻底改变了他们所在的领域和行业中现有的知识，做出了独特的创造性贡献，这个阶段也是人们最难理解和最由兴趣理解的阶段。</p><p>首先，创新者无一例外在各自的领域中工作了很长时间，已经成为杰出人物，然后再开始开辟新天地，毕竟新的成就都是站在巨人的肩膀上。这种创造性是刻意练习达到的另一个全新的高度。杰出人物创造新事物的过程中所采取的方式和他们一开始抵达那一界限时所采取的方式极为相似。创新是一个漫长、缓慢、反复的过程。在这过程中，没有这些杰出人物认为的重大飞跃，<strong>他们的进展，只有在局外人看来才是重大进展，因为那些人没有见证过那些微小的进展。而正是这些微小的进展，才能积累成重大的飞跃。</strong>没有大量艰苦卓绝的努力，那些令人惊奇的时刻也不会存在。“不积跬步，无以至千里。不积小流，无以成江海。”</p><p>此外，他们的创造力和工作中保持专注是分不开的，这恰好也是刻意练习的重要组成部分。行业也正是依赖着这些杰出人物，才能不断前进。</p><h2 id="怎样解释天生才华"><a href="#怎样解释天生才华" class="headerlink" title="怎样解释天生才华"></a>怎样解释天生才华</h2><p>杰出人物通过年复一年的刻意练习，在漫长艰苦的过程中一步步改进，终于成就了他们杰出的能力，没有捷径可走。有的人为什么能够最终培养出比别人更强的能力，实际上，刻意练习发挥主要作用，天生的特征比许多人认为的发挥的作用要小得多。没有人能够不经过高强度和广泛的练习，便能培养出杰出的能力。现实中不存在不需要刻苦训练或者严谨的提高，就能称为世界一流。例如自闭症奇才他们训练时的方式，调用了大脑的适应能力，反过来改变了大脑的结构，使他们培养了杰出的能力，自闭症使得他们比普通孩子更加注重细节，更可能孜孜不倦进行练习，这和专门刻意练习的人采用的方式是一样的。跳高天才、音乐天才等小时候无不经历了家庭的熏陶或者刻苦的练习。</p><p>相对地，也有一些人被认为天生就不具备某种才能。例如音盲，唱不好歌。其实原因通常只是他们从来没有练习过，没有想办法提高自己的技巧。人们停下学习和进步的脚步，并不是因为他们达到了某种天生的极限，而是因为他们停止了训练，或者出于某种原因，从来没有开始过训练。</p><p>研究表明，智商和棋艺无关，训练时间比智商更加重要。当孩子刚刚学习国际象棋时，智商可以在他们快速学习达到一定棋力发挥作用。有了足够的单独练习，棋手们的心理表征十分有益和强大，区分两位棋手的最重要因素不再是他们的智商，而是心理表征的质量和数量，以及有效运用这些表征。<strong>心理表征的作用远比简单运用记忆力和逻辑有效得多。</strong>而心理表征往往是通过数千小时的刻意练习积累起来的。</p><p>在训练早期，智力的确发挥着作用，智力更高的孩子更胜一筹。智力更低的孩子，练习需要更加刻苦一些，会养成比同伴练得更多的习惯，而智商较高的孩子，最初并没有感受到这种要去追赶别人的压力，更加勤奋的孩子最终会超过那些智商较高的孩子。因此，<strong>从长远看，占上风的是练习更加勤奋的人，而不是一开始在智商或者其他方面才华稍有优势的人。</strong>智商较高的孩子可能会比智商较低的孩子在科学课上的成绩好一些，但是在那些已经成为某领域专家的人中，智商并不占优势。</p><p>事实上，如果说人与人之间存在一种基因的差异，影响到某些人的表现，这些差别也不可能直接作用于相关的技能，最有可能是通过发展某技能所必须付出的练习和努力来表现。例如有的孩子天生能从绘画或音乐中获得更大乐趣，那么这些孩子就有更大可能从事绘画或音乐工作，花更多时间训练自己。也就是说，<strong>不是他们本拥有音乐或绘画的基因，而是某些东西在促使他们刻苦练习，因此培养和发展了技能。</strong></p><p><strong>练习是决定某人在某个特定领域最终成就的唯一最重要因素</strong>，基因就算有发挥作用，这些作用也会渐渐消失。</p><p><strong>相信天生才华具有危险性。</strong>这种假设会指向一些决定和行动，当你认为那些不具备某些才华的人绝不可能擅长这方面的事情时，就会建议他不去做这件事，鼓励他去做别的事。当这些人长大以后，他们自己也相信了，不去进行练习，于是这些语言会自然而然成真了。因此，从父母和老师那里得到更多地支持和鼓励能够更快提升一个人的能力，最初的表扬是有重大意义的。人的天性是希望在他们做的最好的方面投入自己的努力，这时最好的办法是意识到我们每个人都有潜力，并努力开发这些潜力。</p><h2 id="用刻意练习创造全新的世界"><a href="#用刻意练习创造全新的世界" class="headerlink" title="用刻意练习创造全新的世界"></a>用刻意练习创造全新的世界</h2><p>在学习上，刻意练习的方法和传统方法的重要区别是对技能和知识点的着重点不同，一个强调你可以做什么，另一个强调的知道什么。<strong>刻意练习是强调技能的，你选择学习必要的知识，是为了培育技能，知识本身绝不是学习的目的。</strong></p><p>当你在教学生一些事实、概念、法则。那些单独的信息进入长时记忆中。后来学生想要用那些知识解决一个问题，注意力和短时记忆的局限就会显现出来。学生在用它们解决办法的时候，还得牢牢记住所有这些不同、相互之间没有联系的信息。但是如果这些信息都被学生消化，成为学生做好某件事情创建的心理表征的一部分，这些单独的信息就会成为相互联系的一部分，这种模式可以为信息提供背景和意义，使学生更容易运用信息。几乎在每一个教育领域，<strong>最有益的学习目标是那些帮助学生创建有效心理表征的目标。</strong></p><p>课程问题和学习任务的设计，还有一个目的：将学生推出舒适区，但又不是推得太远。对学生来讲，那些问题并不是能够轻松回答的，但也不至于完全不知道回答，而是需要花费一番功夫进行思考，导师让学生说出推理过程然后给出反馈，反复多次，学生就能够创建自己的心理表征。心理表征创建好了，就能够自由探索那些技能，不需要别人的帮助。这个在所有领域都适用。一旦学生懂得了在某个领域要达到足够高的水平必须要做什么，那么他们至少从原则上理解了在其他领域追求卓越也需要做些什么。</p><p>如果人人都理解了刻意练习，新的世界和现在的世界相比，更多地领域之中，将涌现出更多地杰出人物，其社会意义是深远的。对个人的好处也是无穷无尽的，杰出人物逼着自己发展新技能，特别是行业中的尖端技能，往往会有巨大的个人成就感，就像走在一条不断有刺激出现的大路上，永远不会感觉到疲倦。</p><p>所谓“练习人”，是反映人在一生之中能够通过练习来掌握自己的命运，使得人生充满各种可能。为快速的社会变迁做好准备，大部分人除了不断学习新的技能之外别无选择，因此如何更有效地学习至关重要，因此我们需要从现在开始改变，<strong>你可以掌握自己的潜力</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非线性控制理论精讲</title>
      <link href="2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/"/>
      <url>2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/</url>
      
        <content type="html"><![CDATA[<p> 参考视频：<a href="https://space.bilibili.com/230105574/channel/detail?cid=35996">非线性控制理论</a></p><h2 id="Lyapunov直接方法"><a href="#Lyapunov直接方法" class="headerlink" title="Lyapunov直接方法"></a>Lyapunov直接方法</h2><img src="/2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/1.png" class=""><p>以上就是正定，半正定，负定，半负定的定义。</p><img src="/2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/2.png" class=""><img src="/2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/3.png" class=""><p> 例子（钟摆）：</p><img src="/2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/4.png" class=""><p>对于一个非线性系统，一般来说没有固定的方法找V，但可以从能量入手。</p><img src="/2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/5.png" class=""><p>这里说明了$x_1$,$x_2$有界，但不代表$x_1$,$x_2$会随着时间趋向于0,这里李雅普诺夫函数设计的是它的能量，那么$\dot{V}$是能量随时间的变化，它等于0。系统符合能量守恒，自然是稳定的。</p><p>在有摩擦力的情况下：</p><img src="/2021/04/17/fei-xian-xing-kong-zhi-li-lun-jing-jiang/6.png" class=""><p>这时系统是半负定的，系统稳定，但在这里没有在数学上得出渐进稳定的结论。</p><h2 id="不变性原理（The-Invariance-Principle-LaSalle’s-Theorem）"><a href="#不变性原理（The-Invariance-Principle-LaSalle’s-Theorem）" class="headerlink" title="不变性原理（The Invariance Principle-LaSalle’s Theorem）"></a>不变性原理（The Invariance Principle-LaSalle’s Theorem）</h2>]]></content>
      
      
      <categories>
          
          <category> 自控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代控制理论精讲</title>
      <link href="2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/"/>
      <url>2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/</url>
      
        <content type="html"><![CDATA[<p> 参考视频：<a href="https://www.bilibili.com/video/BV1fx41137dA">Advanced控制理论</a></p><h2 id="状态-空间表达（State-Space-Representation）"><a href="#状态-空间表达（State-Space-Representation）" class="headerlink" title="状态-空间表达（State-Space Representation）"></a>状态-空间表达（State-Space Representation）</h2><p>在现代控制理论中我们会选择另外一种和经典控制理论不同的分析方法分析系统，即状态空间，其包含系统的输入、输出和状态变量，然后把它们用一阶微分方程的方式表达出来。如果原来在经典控制理论中有二阶及以上的项，那么要选择合适的状态变量把高阶项消除。</p><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/1.png" class><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/2.png" class><p>$$<br>\dot{z} = Az+Bu<br>$$</p><p>$$<br>y = Cz+ Du<br>$$</p><p>这就是系统状态-空间方程的表达方式。</p><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/3.png" class><p>最终得到传递函数：<br>$$<br>G(s) = \frac{Y(s)}{u(s)} = C(sI-A)^{-1}B+D<br>$$<br>用这条式子可以在已知状态空间方程情况下求传递函数：</p><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/4.png" class><p>可以看到这个方程和原来拉普拉斯变换算出来的传递函数是一致的。</p><p>其中传递函数的分母部分和|sI-A|是息息相关的。根据线性代数的知识，当|sI-A|=0时，算出来的s就是A矩阵的特征值。当传递函数的分母及特征方程为0时，|sI-A|=0，这时候算出的s就是极点。<strong>结论：A矩阵的特征值可以决定系统的稳定性。</strong></p><h2 id="相图-相轨迹-Phase-Portrait"><a href="#相图-相轨迹-Phase-Portrait" class="headerlink" title="相图/相轨迹(Phase Portrait)"></a>相图/相轨迹(Phase Portrait)</h2><p>这部分内容可以参考《自动控制原理精讲》的非线性系统的相平面法。</p><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/5.png" class><p>对于状态空间来说:</p><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/6.png" class><p>当b=c=0时，可以看到a和d大于0或小于0对应了几种不同的变换，当a&lt;0,d&lt;0时系统稳定。</p><p>如果$b\neq 0 $且$c\neq 0$时，可以令x=Py，对A进行对角化，可以参考《特征值和特征向量》。</p><img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/7.png" class><p>进行对角化以后，观察对角矩阵中的两个特征值就能得到其稳定性的判断了，两个小于0则稳定。其中$P=[v_1,v_2]$包含两个特征向量，x=Py相当于y的坐标轴在x平面的表示就在$v_1$和$v_2$上。可以看到x和y平面的性质都是相同的，<strong>结论：可以通过判断A的特征值$\lambda$来判断系统的稳定性。</strong>其原因是|sI-A|=0时求得的s是系统的极点，系统的极点决定系统的稳定性。极点在虚轴左边系统稳定，所以，特征值小于0系统稳定。</p><p>对于特征值为虚数的情况：</p>  <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/8.png" class><p>解出来的$x_1$和$x_2$是三角函数，取虚部为0，那么$x_1$和$x_2$的相图可以表示为一个椭圆。可以判断这个椭圆是顺时针走的，我们把这样一个平衡点称为中心点(Center)，椭圆的大小和初始位置有关，并且$x_1$,$x_2$是循环往复变化的。</p><p>对于特征值为复数的情况有：</p>  <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/9.png" class><p>特征值实部大于0时为螺旋向外振荡，同时可以推出当实部小于0时向内螺旋，最后稳定在原点。</p><p>强烈推荐实例：<a href="https://www.bilibili.com/video/BV1ex411g7t3/?spm_id_from=333.788.recommend_more_video.-1">爱情中的数学_Phase Portrait 动态系统分析</a></p><h2 id="系统的可控性"><a href="#系统的可控性" class="headerlink" title="系统的可控性"></a>系统的可控性</h2>  <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/10.png" class><p>可控性的定义：存在输入u使得从原来$x_0$的状态变成$x_1$的状态。</p><p>对于离散系统：</p>  <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/11.png" class><p>如果想要u矩阵有解，要求Co矩阵的秩等于n，连续系统也一样。注意这个可控是点对点的可控，轨迹不一定可控，并且只是理论可行，现实系统有物理约束，不一定百分百可控。注意：在连续系统中如果对标离散系统公式Co不和离散系统完全一致，但是可以分解成离散系统的Co再乘以一个满秩方阵，其秩和离散系统的Co是一样的。因此可以直接用离散系统的方法判断连续系统Co的秩。</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/12.png" class><p>下面是用一个输入控制两个输出的例子：</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/13.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/14.png" class><p>因此只要用一个小车上施加的力就可以控制两个小车的位置和速度。</p><h2 id="稳定性——李雅普诺夫"><a href="#稳定性——李雅普诺夫" class="headerlink" title="稳定性——李雅普诺夫"></a>稳定性——李雅普诺夫</h2>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/15.png" class><p>意思是点一直稳定在一个圆内称为李雅普诺夫稳定，而渐进稳定意思是随着时间的推移，系统最终会回到原点。</p><p>在相图/相轨迹的章节中，推断出当A特征值的实部大于0，系统不稳定，当实部不大于0，符合李雅普诺夫稳定，当实部小于0，符合渐进稳定。</p><p>而当一个非线性系统无法用特征值的方法判断稳定时，就需要用到李雅普诺夫稳定了：</p><p>这里用到的是李雅普诺夫的直接方法，第一方法是求解微分方程的方法，第二方法是不需要求解微分方程就能判断系统的稳定性。</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/16.png" class><p>这里V是自己选定的李雅普诺夫函数，具体怎么选定有规则，非线性系统的公式V由经验决定。只要找到一个V符合条件就能证明稳定，但是很难通过证明V不存在来说明系统不稳定。</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/17.png" class><h2 id="线性控制器设计-Linear-controller-Design"><a href="#线性控制器设计-Linear-controller-Design" class="headerlink" title="线性控制器设计(Linear controller Design)"></a>线性控制器设计(Linear controller Design)</h2>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/18.png" class><p>当u是x的函数时，就把系统从开环变为闭环，通过配置u的参数，可以把闭环状态空间矩阵的特征值在一个我们希望的位置上。</p><p>例子：</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/19.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/20.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/21.png" class><p>倒立摆分析：</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/22.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/23.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/24.png" class><h2 id="LQR-Linear-Quadratic-Regulater-控制器"><a href="#LQR-Linear-Quadratic-Regulater-控制器" class="headerlink" title="LQR(Linear Quadratic Regulater)控制器"></a>LQR(Linear Quadratic Regulater)控制器</h2><p>从上面的内容可以知道，通过选择输入u和输出x的关系可以改变系统Acl的特征值，从而控制系统的表现，这里讨论如何确定特征值，什么样的特征值是最好的？</p><p>引入目标函数/能量函数(Cost Function)<br>$$<br>J = \int_0^{\infty}(X^TQX + U^T RU) dt<br>$$<br>其中Q内的值都为正。这个代表一个惩罚(Penalty)，当$x\neq 0$时，这个值根据Q里面数值的大小有不同反应。后面的部分代表输入对Cost Function的影响。LQR的意思是在满足系统稳定的同时，我们要去寻找J的最小值。</p><p>运用上面的倒立摆系统进行分析，设g=10,L=1。</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/25.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/26.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/27.png" class><p>用matlab自带的模块输入参数进行计算，可以直接给出对应的k值，然后把k值输入原来的系统中。系统响应很nice.</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/28.png" class><p>但是，如果我们更关心用最小的输入就能达到目的，对角度的收敛速度的要求较低，那么修改新的Q和R：</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/29.png" class>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/30.png" class><p>在第二种情况下，我们更关心系统的能耗问题，虽然角度的收敛速度比第一个系统要低，但是大大降低了输入要求，减小了能耗。</p><p><strong>思考：如果让角度始终保存一个非零角度，那么小球会以匀加速前进，此时系统怎么建立？</strong></p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/31.png" class><p>令$e = x_d - x_1$，代入方程后建立的状态空间方程是由e和$x_2$组成的。</p>   <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/32.png" class><p>但是通过计算，稳定点的e不是0，那么我们就要通过设计控制器u把其调整为0，只需要消去后面的常数项即可。</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/33.png" class></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/34.png" class></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/35.png" class></p><p>通过改变输入的角度的值可以改变其稳定的角度，从而达到加速前进后退的效果。</p><h2 id="状态观测器的设计"><a href="#状态观测器的设计" class="headerlink" title="状态观测器的设计"></a>状态观测器的设计</h2><p>上面的控制方法的前提是：x的状态可测。</p><p>如果x不可测怎么办？这就要引入观测器(Observer)根据系统的输入和输入估计系统的状态。</p><p><strong>Luenberger Observer</strong></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/36.png" class></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/37.png" class></p><p>可以计算出估计值和实际值的误差公式，我们的目标是让误差趋近于0.。<strong>建立观测器实际上是建立新的反馈系统使得误差趋近于0</strong>。</p><p>以弹簧阻尼系统为例：</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/38.png" class></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/39.png" class></p><p>可以设两个特征值都为-1，求出$L_1$,$L_2$之后，然后可以通过观测器得出估计值：</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/40.png" class></p><p>Matlab仿真：</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/41.png" class></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/42.png" class></p><p>可以看到无论给$\dot{z}$估计值设计一个什么初始，最终都会和实际的$\dot{z}$重合。</p><p>上面是实际系统，知道该实际系统的状态空间表达式，但是选的这些个“状态变量”，它可能没有实际的物理意义、或者是只存在于数学上的某种抽象的表达之类，不容易或者没办法直接测量。测不了还必须要得到它，才能有后面的“控制”的事。所以，有了状态观测器这个东西，也就是下面那个系统。这个系统就干一件事：通过上面那个实际系统的输入、输出（实际系统的输入、输出一般是容易获得的），去推测、估计那些个“状态变量”。实际系统不好测，或者测量成本过高为节约成本就用状态观测器了，比如无位置传感器永磁电磁电机控制。</p><h2 id="可观测性和分离原理"><a href="#可观测性和分离原理" class="headerlink" title="可观测性和分离原理"></a>可观测性和分离原理</h2><p>和可控性类似，如果一个系统可观测，则：</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/43.png" class></p><p>接下来把可控性和可观性结合，当一个系统可控可观测，但是x不可测量，那么第一步是设计适当的观测器，有了观测出来的结果后，可以设计反馈系统，</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/44.png" class></p><p>这样原来的系统变为新的状态空间方程系统，其中因为要让估计值趋近状态值，系统稳定，所以e和x都要趋近于0。这样M矩阵特征值的实部要小于0。</p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/45.png" class></p><p>​    <img src="/2021/04/09/xian-dai-kong-zhi-li-lun-jing-jiang/46.png" class></p><p>这样控制器的特征值和观测器的特征值分离开了，这就是分离原理。</p><p>设计观测器和控制器合并的系统时，观测器的收敛速度要比控制器快，因为需要准确的观测值指导系统的输入。</p>]]></content>
      
      
      <categories>
          
          <category> 自控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性时不变系统的冲击响应和卷积</title>
      <link href="2021/04/09/xian-xing-shi-bu-bian-xi-tong-de-chong-ji-xiang-ying-he-juan-ji/"/>
      <url>2021/04/09/xian-xing-shi-bu-bian-xi-tong-de-chong-ji-xiang-ying-he-juan-ji/</url>
      
        <content type="html"><![CDATA[<p> 参考视频：<a href="https://www.bilibili.com/video/BV1cs411W74f">https://www.bilibili.com/video/BV1cs411W74f</a></p><p>首先解释什么是线性时不变系统(LTI system)，线性说明符合叠加原理，时不变说明无论什么时候给系统施加输入，它的输出都是相同的。</p><p>而冲激响应$h(t)$指的是输入单位冲激信号$\delta (t)$之后系统的响应，其拉普拉斯变换即为传递函数。</p><p>卷积公式如下：<br>$$<br>x(t) = \int_{0}^{t}f(\tau)h(t-\tau)d\tau<br>$$<br>这就是卷积，其中f是系统的输入，h是系统的冲激响应。可以看出卷积其实是把一个函数分成无数个冲激函数，把它们在某一个时刻冲激响应的加和。卷积的运算只是乘积之和，真正令人困惑的在于一个乘积因子是$f(τ)$，而另一个是$h(t-τ)$。这里解释一下为什么是t-τ：τ作为时间微元对应于线性时不变系统一般在t之前，那么这个时间微元τ到时刻t的时间间隔就是t-τ，h(t-τ)也就代表着τ时刻的冲击在t时刻的残余响应。所有τ时刻的残余响应与输入的$f(τ)$结合最终叠加得到的也就是在t时刻前信号的输出。离散状况下要更容易理解些。在理解卷积内涵的基础上再去学习卷积的计算方法会更有意义。一个弹簧，给它一个冲击，它会表现为震动。但是如果给它一个连续作用的变化的力，弹簧当下的震动即是过去所有震动的叠加。这是卷积的根本意思，即过去的响应会影响当下。</p><p>因此，只要我们得到一个系统的冲激响应，和任意一个输入做卷积就可以得到一个系统的输出。这也是变声器的原理，比如在浴室中敲出一个短暂的声音录下来，这个可以当做冲激响应，我们把其他的声音和这个冲激响应做卷积以后，声音听起来就像是浴室中发出的一样。另外录音的音效设置也是一样的道理，把原声和特定环境下的冲激做卷积，在加上一些其他的滤波器，就能做出特定环境的音效。</p><p>卷积的拉普拉斯变换证明：</p><p></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性化及泰勒公式</title>
      <link href="2021/04/08/xian-xing-hua-ji-tai-le-gong-shi/"/>
      <url>2021/04/08/xian-xing-hua-ji-tai-le-gong-shi/</url>
      
        <content type="html"><![CDATA[<p> 对于线性系统来说，应该符合叠加原理，分析起来比较简单。非线性系统不符合叠加原理，但是可以在平衡点附近对其进行线性化。</p><p>线性化的原理就是泰勒公式：<br>$$<br>f(x) = f(x_0) + f’(x_0)(x-x_0)+\frac{f’’(x_0)}{2!}(x-x_0)^2 + …+\frac{f^n(x_0)}{n!}(x-x_0)<br>$$<br>泰勒公式的原理是在一个点上的每一阶导数都和原函数相等，就可以拟合出原来的曲线，展开的阶数越高，拟合效果越好。展开到第二项可以对原来的公式进行线性化。注意这种线性化是在展开点附近的线性化，距离越远误差越大。</p><p>在平衡点附近进行线性化首先求出平衡点，令所有阶的导数为0，求x，然后在这一点$x=x_0$进行泰勒展开。把$x= x_0+x_d$代入方程中（$x_d$是无穷小值），解出新的关于$x_d$的方程，这就是在平衡点处线性化的方程。</p><img src="/2021/04/08/xian-xing-hua-ji-tai-le-gong-shi/1.png" class=""><p>对于二维的向量空间有：</p><img src="/2021/04/08/xian-xing-hua-ji-tai-le-gong-shi/2.png" class=""><p>这是二维线性化的方法，包含的思想是二元的泰勒展开，其中包含偏导的矩阵是<strong>雅克比矩阵</strong>，可以看到二维的计算方法结果还是和一维一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征值和特征向量</title>
      <link href="2021/04/07/te-zheng-zhi-he-te-zheng-xiang-liang/"/>
      <url>2021/04/07/te-zheng-zhi-he-te-zheng-xiang-liang/</url>
      
        <content type="html"><![CDATA[<p> 在线性代数中，对于一个给定的线性变换<strong>A</strong>，它的特征向量经过这个线性变换的作用之后，得到的新向量仍然与原来的<strong>v</strong>保持在同一条直线上，但长度或方向也许会改变，即：<br>$$<br>Av = \lambda v<br>$$<br>其中$\lambda$为标量，即特征向量的长度在该线性变换下缩放的比例，称其为<strong>特征值</strong>。</p><p> 求解<strong>A</strong>特征值特征向量的具体步骤查看大学的线性代数。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h2><img src="/2021/04/07/te-zheng-zhi-he-te-zheng-xiang-liang/1.png" class=""><p><strong>结论：特征值特征向量的作用是把一个矩阵化成对角矩阵，起到解耦的作用！即存在可逆矩阵P，使：</strong><br>$$<br>P^{-1}AP = \wedge<br>$$<br>现在考虑微分方程组的解法，在现代控制理论中，状态空间方程中是用一系列微分方程组组成的：</p><img src="/2021/04/07/te-zheng-zhi-he-te-zheng-xiang-liang/2.png" class=""><p>在解x向量的微分方程组时，通过x=Py可以进行解耦，把x的方程变成y的方程，由于对角矩阵的存在，可以直接解出y对于t的函数，然后代回x=Py时，可以解出向量x。</p><p><strong>这是一个非常重要的应用，很多时候我们并不需要解出这个微分方程，可以通过特征值的符号可以判断系统的稳定性和系统的表现形式。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之决策树</title>
      <link href="2021/04/04/ji-qi-xue-xi-zhi-jue-ce-shu/"/>
      <url>2021/04/04/ji-qi-xue-xi-zhi-jue-ce-shu/</url>
      
        <content type="html"><![CDATA[<p> 决策树图例：</p><img src="/2021/04/04/ji-qi-xue-xi-zhi-jue-ce-shu/1.png" class=""><p>如果有这样一个图，我们在对数据进行离散化处理后，我们就能很容易地进行分类，那么这样一个图是怎么建立起来的呢？其中的每一个节点都是怎么确定的呢？</p><p>决策树学习的关键其实就是选择最优划分属性，<strong>希望划分后，分支结点的“纯度”越来越高。</strong>也就是说，每分一次，都使得数据越来越纯净，只包含更少类型的数据 ，或者其中的数据都明显具有更加相似的特征。</p><h2 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h2><h3 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h3><p>信息量是对信息的度量，就跟时间的度量是秒一样，当我们考虑一个离散的随机变量x的时候，当我们观察到的这个变量的一个具体值的时候，我们接收到了多少信息呢？多少信息用信息量来衡量，<strong>我们接受到的信息量跟具体发生的事件有关。</strong>信息的大小跟随机事件的概率有关。<strong>越小概率的事情发生了产生的信息量越大</strong>。</p><p>那么信息量可以用以下公式表示（$p(x_i)$为事情发生的概率）：<br>$$<br>l(x_i) = -log_2p(x_i)<br>$$<br>而所有类别的信息期望值为：<br>$$<br>H = -\sum_{i=1}^{n}p(x_i)log_2p(x_i)<br>$$<br>因此当一个集合中混杂的数据类型越多，这个值就越大，当数据中只有一种类型时，这个值为0，也就完成了分类。因此，我们只要找到一个节点分类后的信息量最小，那么选择这个节点作为分类方法就是最好的选择。</p><h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><p>信息增益其实指的是信息量减少的量，把分支前的信息熵减去分支后信息熵的加权平均：<br>$$<br>G = H - \sum_{i=1}^{n}\frac{D_i}{D}H_i<br>$$<br>其中D是数据总量，$D_i$是一个分支中的数据量。因此信息增益越大，分类效果越好。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动控制原理练习题</title>
      <link href="2021/03/04/zi-dong-kong-zhi-yuan-li-lian-xi-ti/"/>
      <url>2021/03/04/zi-dong-kong-zhi-yuan-li-lian-xi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="给结构图，求响应"><a href="#给结构图，求响应" class="headerlink" title="给结构图，求响应"></a>给结构图，求响应</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><img src="/2021/03/04/zi-dong-kong-zhi-yuan-li-lian-xi-ti/1.png" class=""><img src="/2021/03/04/zi-dong-kong-zhi-yuan-li-lian-xi-ti/2.png" class=""><p>单输入单输出求传递函数再求输出的响应的过程不再赘述，下面是零输入状态下的响应。</p><img src="/2021/03/04/zi-dong-kong-zhi-yuan-li-lian-xi-ti/3.png" class=""><img src="/2021/03/04/zi-dong-kong-zhi-yuan-li-lian-xi-ti/4.png" class="">]]></content>
      
      
      <categories>
          
          <category> 自控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梅森(Mason)公式</title>
      <link href="2021/03/04/mei-sen-mason-gong-shi/"/>
      <url>2021/03/04/mei-sen-mason-gong-shi/</url>
      
        <content type="html"><![CDATA[<p>梅逊(Mason)公式是美国麻省理工学院S.J. Mason于20世纪 50年代提出的。 借助于梅逊公式，不经任何结构变换，可以直接由结构图得到系统的传递函数。<br>$$<br>G(s) = \frac{\sum_{k=1}^{m}P_k\Delta_k}{\Delta}<br>$$<br>其中：<br>$$<br>\Delta = 1-\sum_1^nL_i+\sum_1^{n_2}L_iL_j-\sum_1^{n_3}L_iL_jL_k+…<br>$$<br>$\sum_1^nL_i$，为所有回路的回路增益之和</p><p>$\sum_1^{n_2}L_iL_j$，是所有两两互不接触的回路的增益乘积之和</p><p>$\sum_1^{n_2}L_iL_jL_k$，是所有三三互不接触的回路的增益乘积之和</p><p>$P_k$是从输入节点到输出节点第k条前向通道的增益</p><p>$\Delta_k$是在$\Delta$中将与第k条前向通路相接触的回路去掉后所余下的部分，称为余子式。</p><p>m是从输入节点到输出节点所有前向通路的条数。</p><img src="/2021/03/04/mei-sen-mason-gong-shi/1.png" class=""><img src="/2021/03/04/mei-sen-mason-gong-shi/2.png" class=""><img src="/2021/03/04/mei-sen-mason-gong-shi/3.png" class="">]]></content>
      
      
      <categories>
          
          <category> 自控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动控制原理精讲</title>
      <link href="2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/"/>
      <url>2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/</url>
      
        <content type="html"><![CDATA[<p>本文根据视频内容b站UP主DR_CAN的<a href="https://www.bilibili.com/video/BV1jt411M7QU">自动控制原理</a>再辅以卢京潮的课程和自己查找的资料等记录而成，强烈推荐观看该系列视频。本文用到的数学基础拉普拉斯变换的内容在我的另一篇文章《拉普拉斯变换》已经详细说明，在此基础上阅读本文。</p><h2 id="开环和闭环系统"><a href="#开环和闭环系统" class="headerlink" title="开环和闭环系统"></a>开环和闭环系统</h2><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/1.png" class=""><p>开环$(open loop)$系统与闭环$(closed loop)$系统的本质区别是是否存在反馈$(feedback)$。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/2.png" class=""><p>因此对于闭环系统控制器为$D(s)$，开环传递函数为$G(s)$，反馈环节为$H(s)$，输入为$V(s)$，输出为$X(s)$，其闭环传递函数为：<br>$$<br>\frac {D(s)G(s)} {1+H(s)D(s)G(s)}<br>$$</p><p>$$<br>X(s) = V(s)\frac {D(s)G(s)} {1+H(s)D(s)G(s)}<br>$$</p><p>所以，我们的研究方向是研究闭环系统的传递函数，而$D(s)$是我们要设计的控制器，也是我们研究的重点。从这入手，可以做系统的稳定性分析，误差分析等等。</p><h2 id="稳定性分析"><a href="#稳定性分析" class="headerlink" title="稳定性分析"></a>稳定性分析</h2><p>通过对系统施加单位冲击信号就可以判断系统的稳定性，因为可以通过研究开环或闭环函数本身分析稳定性：<br>$$<br>X(s) = R(s)G(s) = \delta(s)G(s) = G(s)<br>$$<br>假设$D(s)$为$G(s)$的分子，$N(s)$为$G(s)$的分母：<br>$$<br>G(s) = \frac {D(s)} {N(s)}<br>$$<br>当$D(s)=0$时解出来的s称为系统的<strong>零点</strong>，$N(s)=0$时解出来的s称为系统的<strong>极点</strong>。</p><p>此时我们关注系统的极点，当存在系统的极点的实部大于0时为不稳定的状态，都小于0则为稳定状态，实部等于0而虚部不为0则是临界稳定的状态。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/3.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/4.png" class=""><p>因此我们在设计控制器时的目标是让所有的极点落在左半平面。</p><p><strong>补充</strong>：当系统的初始条件不为0时：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/5.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/6.png" class=""><p>因此，初始条件不为0相当于给输入端加上幅度为$x(0)$的冲击。<br>$$<br>闭环系统 \phi(s) = \frac{M(s)}{D(s)}<br>$$</p><p>$$<br>稳定判据 D(s) = a_ns^n+a_{n-1}s^{n-1}+…+a_1s+a_0(a_i&gt;0,i=0,1,2…,n)<br>$$</p><p><strong>劳斯判据</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/58.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/59.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/60.png" class=""><p><strong>习题</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/61.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/62.png" class=""><p>看第一列全为正系统稳定，有负数或0系统不稳定，且s域右半平面极点个数等于第一列变号的次数。</p><hr><h2 id="实战案例分析（含Matlab仿真）"><a href="#实战案例分析（含Matlab仿真）" class="headerlink" title="实战案例分析（含Matlab仿真）"></a>实战案例分析（含Matlab仿真）</h2><p>参考视频：<a href="https://www.bilibili.com/video/BV1W441167qn/?spm_id_from=333.788.videocard.1">一起燃烧卡路里/科学减肥(1)_系统分析实例_数学建模部分</a></p><hr><h2 id="稳态误差"><a href="#稳态误差" class="headerlink" title="稳态误差"></a>稳态误差</h2><p>$$<br>e_{ss}= r - \lim_{t\to \infty}x(t)<br>$$</p><p>其中$e_{ss}$指稳态误差，r是参考值(reference value)，$x(t)$是输出。</p><p><strong>终值定理</strong>（用拉氏变换微分规则可轻易证明）：<br>$$<br>\lim_{t \to \infty}x(t) = \lim_{s \to 0}sX(s)<br>$$<br> 使用条件：当$\lim_{t \to \infty}x(t)$存在时才能使用，即系统稳定。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/7.png" class=""><p>有了这个定理，我们就不用进行拉普拉斯逆变换，直接在s域上就可以求得稳态误差的结果了。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/64.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/65.png" class=""><p><strong>比例控制无法消除稳态误差：</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/8.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/9.png" class=""><h4 id="静态误差系数法"><a href="#静态误差系数法" class="headerlink" title="静态误差系数法"></a>静态误差系数法</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/66.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/67.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/68.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/69.png" class=""><p><strong>可以看出，当一个系统输入档次确定以后，稳态误差随着系统型别增加而降低，当输入档次和系统型别一致是一个非零常数。如果系统型别高于输入档次，稳态误差为0，反之稳态误差为无穷。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/70.png" class=""><p><strong>可以看出，积分环节在减小稳态误差的过程中起着关键作用，每一个积分环节相当于一个挡水坝。想要输出跟上输入的次数，必须至少有对应个数的积分环节。当积分环节和输入档次相当时，才看开环增益K来确定稳态误差。但是开环传递函数中的积分环节越多，要加的微分环节的阶数越高，物理实现越难。通常零型和一型系统比较多，二型不多见，二型以上基本没有。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/71.png" class=""><p><strong>按前馈补偿的复合控制方案可以有效提高系统的稳态精度。原因是在稳态误差端输入对应信号，从而抵消掉原来会产生的稳态误差。</strong></p><h4 id="动态误差系数法（一般了解）"><a href="#动态误差系数法（一般了解）" class="headerlink" title="动态误差系数法（一般了解）"></a>动态误差系数法（一般了解）</h4><p>用泰勒展开表示传递函数，展开到某一项就不需要展开了，因为对输入信号的某一阶导数一定等于0。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/72.png" class=""><p>注意：动态误差不是误差的全部信息，而是误差的稳态分量。</p><h2 id="比例积分控制器"><a href="#比例积分控制器" class="headerlink" title="比例积分控制器"></a>比例积分控制器</h2><p>只使用比例控制器$k_p$无法消除稳态误差，现在我们把控制器设定为$C(s)$:</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/10.png" class=""><p>因此消除稳态误差需要$ \lim_{s \to 0}C(s) = \infty$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/11.png" class=""><p>这里从一阶系统变成了二阶的系统，用simulink仿真P，I,和PI控制器的效果：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/12.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/13.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/50.png" class=""><p>此时传递函数：<br>$$<br>G(s) = \frac{2K_p\zeta\omega_ns+\omega_n^2}{s(s+2\zeta\omega_n)+2K_p\zeta\omega_ns+\omega_n^2}<br>$$<br>通过计算当比例环节系数，拆分出来的二阶系统阻尼比就增加相应倍数，可以做到无震荡，除了这个二阶项另一项也会占到一部分，加快了系统的反应速度。</p><p>可以看出PI控制兼具了快速反应，无超调和稳态误差的优点。</p><h2 id="一阶系统的单位阶跃响应"><a href="#一阶系统的单位阶跃响应" class="headerlink" title="一阶系统的单位阶跃响应"></a>一阶系统的单位阶跃响应</h2><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/47.png" class=""><p>这里K决定了积分累积的速度，K越大，累积速度越快，最后输出达到和输入相同的值，不再累积，这就是一阶系统输出跟随输入相同的原理。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/14.png" class=""><p>a对系统的响应起到决定性作用，决定了系统响应的快慢。</p><p>而闭环增益是把闭环传递函数写成尾一标准形式提出来的系数，此处可以化为$\frac{1}{\frac{1}{a}s+1}$，增益是1。而时间常数$\tau$则是s前面的系数$\frac{1}{a}$，此时上升至稳态值得0.632倍。调节时间$t_s = 3\tau(\Delta = 5 %) $，$t_s = 4\tau(\Delta = 2 %) $。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/15.png" class=""><p>另外$\frac a {s+a}$其实是一个低通滤波器，可以说有积累的都是低通滤波器，对高速的变换不敏感。</p><p>一阶系统的闭环也是一阶系统，且回产生稳态误差。仅靠比例控制无法消除稳态误差，此部分请查看稳态误差章节。</p><h4 id="换个角度看一阶系统单位阶跃响应"><a href="#换个角度看一阶系统单位阶跃响应" class="headerlink" title="换个角度看一阶系统单位阶跃响应"></a>换个角度看一阶系统单位阶跃响应</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/16.png" class=""><p>这种方法以x为横坐标，x的导数为纵坐标，可以看出当x=0时增加幅度最大，当x=1是导数是0，不再增加，符合原来的曲线。而当t=0时x&gt;1的情况下，因为其导数小于0，所以又会一直减小直到等于1。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/17.png" class=""><p>而当a&lt;0时它是一条经过1的单调递增的直线，此时当x=0开始时实际x会不断减小，并且衰减越来越快。</p><p>这种方法叫做相图$(phase Portrait)$</p><h2 id="频率响应和滤波器"><a href="#频率响应和滤波器" class="headerlink" title="频率响应和滤波器"></a>频率响应和滤波器</h2><p>对于一个线性时不变系统，输入为正弦信号，在稳定的条件下，系统的输出和输入的频率相同。</p><p>下面证明。对于输入一个正弦信号，有：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/18.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/19.png" class=""><p>因此频率响应实际上是稳态的响应。</p><p>下面是一系列推导：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/20.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/21.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/22.png" class=""><p>此处有一个性质：拉普拉斯变换的传递函数$G(s)$s代入共轭的两个数，其结果也一定是共轭的。</p><p>请一定要记住结论：线性时不变系统，输入正弦信号，稳定的条件下输出的信号的**幅值是原来的$|G(jω)|$倍，相角增加了$∠G(jω)$**。</p><p>从另一个角度定义$G(jω)$：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/86.png" class=""><p>例子：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/23.png" class=""><p>可以看出对$G(jω)$的傅里叶反变换是原函数。也可以说$G(jω)$是原来的函数傅里叶变换的结果，即它的幅值为$G(jω)$的模，相角为$G(jω)$的角度。</p><hr><p>下面研究一阶系统$\frac a {s+a}$：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/24.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/25.png" class=""><p>从图中可以看出，随着频率增加振幅不断减小，所以它是个典型的低通滤波器。<strong>其实有积累的东西都可以看作低通滤波器，例如频繁开关空调室温也只会平缓变换，频繁开关水龙头页面高度也只会平缓变化，亦或是典型的电阻电容系统。带有低通滤波器性质的系统都会存在一个容器：房子，水箱，电容等等。这些容器在数学角度讲是积分，拉氏变换是$\frac 1 s$，因此随着频率不断增大，振幅响应不断减小。直观来讲，容器提供了缓冲机制，给系统的反应带来一系列延迟，从而抵消高速变换带来的影响。对我们自己亦是如此，我们要不断积累经验充实自己，否则就会对外界的变化非常敏感，反应剧烈不得章法。通过不断积累曾经沧海，才能在变换莫测的横流中处乱不惊。反过来讲也有所得，过去的经验会称为自己的包袱，只有放下包袱，解放思想，才能在瞬息万变的世界中逐风追电。</strong></p><h2 id="二阶系统的动态响应"><a href="#二阶系统的动态响应" class="headerlink" title="二阶系统的动态响应"></a>二阶系统的动态响应</h2><p>生活中二阶系统随处可见，根据牛顿第二定律F=ma，其中的加速度a就是距离s对时间t的二阶导数，动力学和运动学都是建立在牛顿第二定律的基础上的，所以周围的运动现象普遍都是二阶的。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/48.png" class=""><p>其中二阶系统可以表示为以下结构图：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/49.png" class=""><p>可以看出二阶系统可以由一个积分环节，比例环节，和一阶环节的闭环组成。无论二阶系统的经典结构的增益是多少，闭环后的增益都为1。这也是一阶系统加上积分控制变成二阶系统能消除稳态误差的原因。但增加开环增益会降低系统的阻尼比，因为增加增益相当于增强积分环节，导致震荡加剧，但是调节时间不变，上升时间缩短。</p><p>同时这个闭环二阶系统再闭环也会降低增益形成稳态误差，同时阻尼比降低。</p><p>下面是典型的弹簧阻尼质量系统：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/26.png" class=""><p>此处要求解微分方程：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/27.png" class=""><p>此处用求根公式：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/28.png" class=""><p>下面分情况讨论：</p><p>当ζ&gt;1时，称为<strong>过阻尼</strong>系统，在这种情况下阻尼力很大。此时可以解得：<br>$$<br>x(t) = C_1e^{\lambda_1t}+ C_2e^{\lambda_2t}<br>$$<br>这里$\lambda_1,\lambda_2$为负实数且互不相等。收敛速度取决于较大的$\lambda$。</p><p>当ζ=1时，称为<strong>临界阻尼</strong>系统，在这种情况下阻尼力很大。此时可以解得：<br>$$<br>x(t) = (C_1+C_2)e^{\lambda t}<br>$$<br>这里$\lambda$为负实数且大小位于上面的$\lambda_1,\lambda_2$之间，收敛速度快一些。</p><p>当ζ&lt;1时，称为<strong>欠阻尼</strong>系统，这是最常见的情况。此时可以解得：<br>$$<br>x(t) = C_1e^{\lambda_1t}+ C_2e^{\lambda_2t} = e^{-\zeta \omega_nt}(C_1\cos{\omega_n \sqrt{1-\zeta^2}t}+C_2\sin{\omega_n \sqrt{1-\zeta^2}t})<br>$$</p><p>$$<br>\lambda_1,\lambda_2 = -\zeta \omega_n \pm i\omega_n \sqrt{1-\zeta^2}<br>$$</p><p>再定义<strong>阻尼固有频率</strong>(Damped Natural Fraq)：<br>$$<br>\omega_d = \omega_n \sqrt{1-\zeta^2}<br>$$</p><p>此时有：<br>$$<br>x(t) = e^{-\zeta \omega_n t} \sqrt{C_1^2+C_2^2} \sin(\omega_d t+\phi)<br>$$</p><p>$$<br>\phi = arctan{\frac{C_1}{C_2}}<br>$$</p><p>这个函数一边振动一边衰减，它的震动周期就是$\frac{2\pi}{\omega_d}$。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/29.png" class=""><p>而当$\zeta = 0$即没有阻尼时：</p><p>$$<br>x(t) = e^{0}(C_1\cos{\omega_n t}+C_2\sin{\omega_nt}) = \sqrt{C_1^2+C_2^2}\sin(\omega_n t+\phi)<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/30.png" class=""><p>另外当$\zeta &lt; 0 $时都是不稳定系统：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/31.png" class=""><h4 id="二阶系统的单位阶跃响应-2nd-Order-System-Unit-Step-Response"><a href="#二阶系统的单位阶跃响应-2nd-Order-System-Unit-Step-Response" class="headerlink" title="二阶系统的单位阶跃响应(2nd Order System Unit Step Response)"></a>二阶系统的单位阶跃响应(2nd Order System Unit Step Response)</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/32.png" class=""><p>此处便求出了二阶系统的传递函数为<br>$$<br>H(s) = \frac{X(s)}{U(s)} = \frac {\omega_n^2} {s^2 + 2\zeta \omega_n s + \omega_n^2}<br>$$<br>阶跃响应：<br>$$<br>X(s) = U(s)H(s) = \frac 1 s\frac {\omega_n^2} {s^2 + 2\zeta \omega_n s + \omega_n^2}<br>$$<br>三个极点分别为：0，$-\zeta \omega_n \pm i\omega_n \sqrt{1-\zeta^2}$。</p><p>经过一系列的转化，可以得到：<br>$$<br>X(s) = \frac 1 s - \frac 1 2 (1-\frac{\zeta}{1-\zeta^2}i)\frac 1 {s-p_2}-\frac 1 2 (1+\frac{\zeta}{1-\zeta^2}i)\frac 1 {s-p_3}<br>$$<br>进行拉普拉斯逆变换后可以得到：<br>$$<br>x(t) = 1 - e^{-\zeta \omega_nt}(cos\omega_dt+\frac{\zeta}{\sqrt{1-\zeta^2}}sin\omega_dt) = 1-e^{-\zeta \omega_nt} \sqrt\frac1{1-\zeta^2}sin(\omega_dt+\phi)<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/33.png" class=""><p>此外当$\zeta=0$时，是临界稳定状态：<br>$$<br>x(t) = 1- cos{\omega_nt}<br>$$<br>当$\zeta=1$时，没有震荡：<br>$$<br>x(t) = 1-e^{-\omega_nt}(1+\omega_nt)<br>$$<br>当$\zeta&gt;1$时，同样没有震荡：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/34.png" class=""><p>下面是ζ不同时系统的表现：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/35.png" class=""><p>极点所在的位置和原点、坐标轴构成的三角形有以下关系：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/44.png" class=""><h4 id="二阶系统的指标特性（阻尼比0到1）"><a href="#二阶系统的指标特性（阻尼比0到1）" class="headerlink" title="二阶系统的指标特性（阻尼比0到1）"></a>二阶系统的指标特性（阻尼比0到1）</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/36.png" class=""><p>$T_d$延迟时间(Delay time)，达到稳态值50%的时间。</p><p>$T_r$上升时间(Rise time)，第一次达到稳态值的时间。$T_r=\frac{\pi-\phi}{\omega_d}=\frac{\pi-arctan\frac{\sqrt{1-\zeta^2}}{\zeta}}{\omega_n\sqrt{1-\zeta^2}}$</p><p>$M_p$最大超调量(Max overshoot)，$t_p=\frac{\pi}{\omega_d}$，$M_p = e^\frac{-\zeta\pi}{\sqrt{1-\zeta^2}}*100$%。当ζ=0.5，超调量是16.3%，当$ζ=0.707=\frac{\sqrt{2}}{2}$，超调量是4.33%，可以看成5%。当$\zeta = \frac{\sqrt{3}}{2}$，超调量为0.43%。而超调量相同则表明极点落在原点发出的同一条射线上。</p><p>$T_{ss}$调节时间(setting time)，系统进入到稳态误差范围内的时间，一般稳态误差取5%或2%。实际上为了方便取包络线进入误差带。取2%$T_{ss}=\frac{4.5}{\zeta\omega_n}$，取5%$T_{ss}=\frac{3.5}{\zeta\omega_n}$ ，ζ=0.707是最佳阻尼比调节时间最短可以看成$T_{ss}=\frac{2}{\zeta\omega_n}$。</p><p>临界阻尼和过阻尼下的调节时间：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/51.png" class=""><h4 id="改善二阶系统动态性能的措施"><a href="#改善二阶系统动态性能的措施" class="headerlink" title="改善二阶系统动态性能的措施"></a>改善二阶系统动态性能的措施</h4><p>1、测速反馈：增加阻尼</p><p>2、比例+微分：提前控制</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/52.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/54.png" class=""><p>可以看出测速反馈的无阻尼自然频率不变，但阻尼比增加，导致超调量减小，调节时间减小。比例+微分的极点和测速反馈是一样的，但多出来一个闭环零点，性能指标要采用另外一套零点极点法进行计算。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/53.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/55.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/56.png" class=""><p>可以看出，与原系统相比，比例+微分多出来的零点的影响是了多微分信号，这个信号减小了系统的上升时间，并使得超调量略微增加，但调节时间略微缩短。</p><h4 id="二阶系统的频率响应"><a href="#二阶系统的频率响应" class="headerlink" title="二阶系统的频率响应"></a>二阶系统的频率响应</h4><p>振幅响应：<br>$$<br>\frac{M_o}{M_i}=|G(j\omega)|<br>$$<br>相角响应：<br>$$<br>\phi_o - \phi_i = ∠G(j\omega)<br>$$<br>因此：<br>$$<br>G(j\omega) = \frac{\omega_n^2}{-\omega^2+2\zeta\omega_n\omega j+\omega^2} = \frac{1}{-\frac{\omega^2}{\omega_n^2}+2\zeta\frac{\omega}{\omega_n}j+1}<br>$$</p><p>$$<br>令  \Omega =  \frac{\omega}{\omega_n}<br>$$</p><p>$$<br>G(j\omega) = \frac{1-\Omega^2}{(1-\Omega^2)^2+4\zeta^2\Omega^2} - \frac{2\zeta\Omega}{(1-\Omega^2)^2+4\zeta^2\Omega^2} j<br>$$</p><p>$$<br>|G(j\omega)| = \sqrt{\frac{1}{(1-\Omega^2)^2+4\zeta^2\Omega^2}}<br>$$</p><p>$$<br>∠G(j\omega) = -arctan\frac{2\zeta\Omega}{1-\Omega^2}<br>$$</p><p>当$\omega = 0$时，$\Omega = 0$，$|G(j\omega)|=1$</p><p>当$\omega = \infty$时，$\Omega = \infty$，$|G(j\omega)| =  0$</p><p>当$\omega = \omega_n$时，$\Omega = 1$，$|G(j\omega)|=\frac{1}{2\zeta}$，此时当$\zeta&lt;0.5$时，$|G(j\omega)|&gt;1$；当$\zeta&gt;0.5$时，$|G(j\omega)|&lt;1$，因此一定存在一个极值点。</p><p>通过对$|G(j\omega)|$分母部分进行求导，可以得出$\Omega= \frac{\omega}{\omega_n}= \sqrt{1-2\zeta^2}$时存在极值。<br>$$<br>\omega = \omega_n\sqrt{1-2\zeta^2}<br>$$<br>我们把这个频率称为<strong>系统的共振频率（谐振频率）</strong>。可以看出在$0\leqζ\leq\frac{\sqrt{2}}{2}$时才存在谐振峰值，才有谐振频率。</p><p>把这个式子代回$|G(j\omega)|$的式子中，得：<br>$$<br>|G(j\omega)|_{\omega = \omega_n\sqrt{1-2\zeta^2}}= \frac 1 {2\zeta\sqrt{1-\zeta^2}}<br>$$<br>当ζ=1时，$\omega=\omega_n$，$|G(j\omega)|=0.5$。</p><p>当ζ=0.5时，$\omega=\omega_n$，$|G(j\omega)|=1$，$\omega=\omega_n\sqrt{1-2\zeta^2}$时$|G(j\omega)|=1.16$。</p><p>当ζ=0时，$\omega=\omega_n$，$|G(j\omega)|=\infty$，同时这也是它的谐振频率。</p><p><strong>因此对阻尼比较小的系统来说，如果外力的频率在共振频率附近，系统就会表现出强烈的振幅响应，因为外力把系统本身的震动潜能激励起来了。</strong>不同的系统有不同的共振频率，对外界的响应也不相同。</p><hr><h2 id="高阶系统的阶跃响应和动态性能（一般了解）"><a href="#高阶系统的阶跃响应和动态性能（一般了解）" class="headerlink" title="高阶系统的阶跃响应和动态性能（一般了解）"></a>高阶系统的阶跃响应和动态性能（一般了解）</h2><p>首先画出高阶系统的零点和极点：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/57.png" class=""><p>1、挨得较近的零极点（模是相对距离的十倍以上）可以忽略不计。</p><p>2、只留下主导极点，去掉非主导极点。</p><p>3、查零点极点计算公式（各种数量的零点极点都有对应公式可查）。</p><h2 id="伯德图"><a href="#伯德图" class="headerlink" title="伯德图"></a>伯德图</h2><p>为什么大多研究开环伯德图？<br>可以通过开环伯德图较方便地获取系统稳定性信息，通过回路整形（Loop shaping）调整开环伯德图的形状以达到期望的控制性能；<br>闭环伯德图直观展示整个系统输入输出响应特性，也能与时域响应紧密联系，适用于设计结果验证，不适合用于分析控制回路在整个系统中的作用；<br>某些系统开环频域响应数据更容易获取；开环伯德图更适用于控制器设计，因为开环回路就是控制器所需要调整和处理的回路。<br>结论：开环波特图因其直接体现出控制器对系统性能的影响而便于设计，闭环因其直接展现出最终结果而便于分析。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/37.png" class=""><p>以ω(对数标度即lgω)为横坐标，把振幅响应和相位响应用两个图表达出来，幅值响应的纵坐标进行了对数变换，取20log，以10为底，这两个图组合起来称为伯德图。</p><p>功率或能量是振幅平方的函数。因此对dB的定义可以由能量的部分替换成振幅的部分，因此原本的系数10变成20。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/38.png" class=""><p>下面是示例：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/39.png" class=""><p>下面是$G(s) = \frac{a}{s+a}$的分析：<br>$$<br>|G(j\omega)|  = \sqrt\frac{1}{1+(\frac{\omega}{a})^2}<br>$$</p><p>$$<br>∠G(j\omega) = -arctan\frac{\omega}{a}<br>$$</p><p>当ω&lt;&lt;a时，$|G(j\omega)|=1$，$20log|G(j\omega)| = 0$，$∠G(j\omega) = 0$</p><p>当ω=a时，$|G(j\omega)|=\frac{\sqrt 2}{2}$，$20log|G(j\omega)| = -20log\sqrt{2} = -3dB$，$∠G(j\omega) = -45°$，这里幅值达到原来的0.707倍，也被称为截止频率。</p><p>当ω&gt;&gt;a时，$|G(j\omega)|=\frac{a}{\omega}$，$20log|G(j\omega)| = 20loga-20log{\omega}$，$∠G(j\omega) = -90°$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/40.png" class=""><p>画幅频特性曲线时都是以截止频率为转折点画渐近线的。</p><p><strong>伯德图性质$log_{10}AB=log_{10}A+log_{10}B$非常好，意味着可以把非常复杂的传递函数分解开来。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/41.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/42.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/43.png" class=""><h3 id="实际画图规则："><a href="#实际画图规则：" class="headerlink" title="实际画图规则："></a><strong>实际画图规则：</strong></h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/99.png" class=""><p>惯性环节对数相频曲线是关于-45°那一点对称的。转折频率为$\frac{1}{T}$，转折后斜率是-20dB。而-45°的点刚刚好是在转折频率上的，可以推断，画典型环节的相频曲线时，确定其起始角度，终止角度，可以画出一条过转折频率，中间角度的曲线。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/100.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/101.png" class=""><p>振荡环节的转折频率为$\omega_n$。转折后的斜率是-40dB。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/102.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/103.png" class=""><p>乘-57.3是为了把弧度化成度。</p><h3 id="题目（画图、反求函数、反求Nyquist图）"><a href="#题目（画图、反求函数、反求Nyquist图）" class="headerlink" title="题目（画图、反求函数、反求Nyquist图）"></a>题目（画图、反求函数、反求Nyquist图）</h3><p><strong>截止频率为$|G(jω)| = 1 $对应的频率。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/104.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/105.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/106.png" class=""> <img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/108.png" class=""><p>这里的几种手法很重要。要注意中间的$\omega_0$的求法，其中当几何方法不好求时侧重用第二种。</p> <img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/109.png" class=""><p>这里非相角系统（在右半s平面存在开环零极点或纯延时环节的系统，这种系统不能由幅频特性唯一确定G(s)）的零极点在s域左边还是右边要考虑清楚。开始时-270°却是一型系统，只能是有一个极点在右半s平面导致比初始比预期小180°。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>伯德图绘制：</p><ol><li><p>$G(s)$化为尾一标准型，列出转折频率（一阶环节如$\frac{1}{Ts+1}$为$\frac{1}{T}$，二阶环节为$\omega_n$）</p></li><li><p>确定基准线（起始线的延长线必过$\omega=1$,$dB=20lgK$，也必过$\omega^v = K$ ，$L(\omega)| = 0$（当20lgK不好确定时用这个）。再根据型别v确定初始斜率为-20v dB/dec）。</p></li><li><p>叠加：在转折频率处改变斜率，一阶为$\pm20dB$，二阶为$\pm20dB$。</p></li></ol><p>根据伯德图画Nyquist图：</p><p>当极点在原点上时，ω的变化视为从实轴右边无线小的距离开始，沿着无限小的圆弧到虚轴往上走，因此Nyquist图一律是从0°开始的。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/107.png" class=""><hr><h2 id="幅相特性曲线——Nyquist图"><a href="#幅相特性曲线——Nyquist图" class="headerlink" title="幅相特性曲线——Nyquist图"></a>幅相特性曲线——Nyquist图</h2><p>这幅图相当于伯德图另一种表现形式。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/87.png" class=""><p>惯性环节的幅相特性是未半圆。把ωT约去后可以证明：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/88.png" class=""><p>其他环节的图：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/89.png" class=""><p><strong>振荡环节</strong>（可同时参考二阶系统的频率响应小节）</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/90.png" class=""><p>可以看出，振荡环节相当于一个实数除以两个由极点指向虚轴大于0的某一点的向量，当频率增大是，这一点向正无穷移动，两个向量幅值趋向无穷，相角趋向90度，造成整个振荡环节的幅值趋向0，相角趋向-180度。在$\omega_n$确定的情况下，ζ越小圈越大，越靠近共振频率幅值越大，ζ=0时是无穷大的圈沿着横坐标轴走。图上于虚轴相交的点刚好处于$\omega_n$的频率，幅值为$\frac{1}{2\zeta}$。</p><p>谐振频率<br>$$<br>\omega = \omega_n\sqrt{1-2\zeta^2}<br>$$<br>谐振峰值<br>$$<br>|G(j\omega)|_{\omega = \omega_n\sqrt{1-2\zeta^2}}= \frac 1 {2\zeta\sqrt{1-\zeta^2}}<br>$$</p><p>可以看出当$ζ&lt;\frac{\sqrt{2}}{2}$时，才有谐振峰值，即存在$|G(j\omega)|&gt;1$。ζ越小，谐振峰值越大。</p><p>根据Nyquist图解出参数：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/91.png" class=""><p><strong>不稳定的振荡环节</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/92.png" class=""><p>可以看出，不稳定振荡环节的曲线与稳定环节曲线x轴对称，相角从-360变成-180。</p><p><strong>二阶复合微分</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/93.png" class=""><p>阻尼比越小，曲线越瘦。当$ζ&lt;\frac{\sqrt{2}}{2}$时，$|G(jω)|$先减小再增大，存在比1小的极小值。</p><p><strong>延时环节</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/94.png" class=""><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/95.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/96.png" class=""><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/97.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/98.png" class=""><hr><h2 id="Nyquist稳定判据"><a href="#Nyquist稳定判据" class="headerlink" title="Nyquist稳定判据"></a>Nyquist稳定判据</h2><p>Routh判据（代数稳定判据）不能用于研究如何调整系统结构来改善系统稳定性的问题。</p><p>Nyquist稳定判据（频域稳定判据）可以由开环频率特性直接判定闭环系统的稳定性，可以研究包含纯延时环节的系统的稳定性问题，并且可以研究如何调整系统的结构参数改善系统稳定性问题。<br>$$<br>Z=P-2N<br>$$<br>其中Z是在右半s平面闭环极点的个数，P是在右边s平面中开环极点的个数，N是开环幅相特性曲线包围$(-1,0)$这个点的圈数，顺时针方向为正，逆时针为负。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/110.png" class=""><p>可以看出$1+G(s)H(s)$的极点和开环极点一致，零点和闭环极点一致。</p><p><strong>柯西辐角原理</strong></p><p>把一个复数q=a+bj，通过$F(s)$变成$F(q)= a’+b’j$的过程叫<strong>映射</strong>。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/111.png" class=""><p>可以看出映射之前的点同零点的连线和映射之后的点和原点的连线是一样的，即模值一样，角度一样。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/112.png" class=""><p>因此如果原来的图如果有一条闭合曲线不包围$F(s)$零点，那么，映射之后的曲线一定不包围原点。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/113.png" class=""><p>同理，容易如果$F(s)$存在极点，映射之前的点与映射之后的点模值互为倒数，角度互为相反数。</p><p>因此，如果有顺时针包围极点的一条曲线，映射一定有逆时针包围原点的曲线。</p><p>曲线同时包含一个零点和一个极点的情况下：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/114.png" class=""><p>容易推出映射后的点角度为$φ = φ_1-φ_2$，模值为$v = \frac{v_1}{v_2}$。映射后的角度永远无法满足360°都存在，曲线映射后一定不包围原点。</p><p><strong>结论：A曲线顺时针包含一个$F(s)$的零点，映射后打的B曲线就绕$(0,0)$顺时针一圈。顺时针包含一个$F(s)$的极点，则B曲线绕$(0,0)$逆时针一圈。A曲线顺时针环绕的零点比极点多几个，那么B曲线就顺时针环绕几圈，少几个则逆时针围绕几圈，A逆时针同理。</strong></p><p>理论准备完成，现在正式证明：</p><p>首先可以定义一个顺时针包围整个右边平面的曲线A，只要曲线内没有闭环极点则为稳定：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/115.png" class=""><p>可以看出这里列出的公式P是右半平面包含的$1+G(s)H(s)$的极点也即是开环极点个数，Z是$1+G(s)H(s)$的零点也即是闭环极点的个数，N为映射到$1+G(s)H(s)$之后逆时针包围零点的圈数。这个等式显然是成立的。而把$F(s)$由$1+G(s)H(s)$变为$G(s)H(s)$相当于向左移动一个单位，映射后的曲线变为包围$(-1,0)$点。因此有了公式：<br>$$<br>Z = P-N<br>$$<br>Z是在右边平面闭环极点的个数，一定大于或等于0，用来判断稳定性，P是右半平面开环极点个数，N是逆时针绕$(-1,0)$的圈数，由于平时画的Nyquist图只有一半（与另一半x轴对称），所以N又可以表示为2N：<br>$$<br>Z = P-2N<br>$$<br>当系统稳定时Z=0，P=N，这个称为<strong>Nyquist稳定性判据</strong>。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/116.png" class=""><p>当Nyquist路径碰到虚轴上的开环极点时，要从右边画一个无限小的圆弧绕过去。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/117.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/118.png" class=""><p>我们把Nyquist图逆时针穿过(-1,0)左边实轴称为正穿越，N为正数，顺时针称为负穿越，N为负数。当只给出开环传递函数的伯德图时，看对数幅频曲线在上半平面的曲线部分的频率，在这部分频率中对数相频曲线往下穿过-180°称为负穿越，反之正穿越。如果在这个区域没有穿过而是贴着-180°而起，算半次穿越（注意）。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/119.png" class=""><hr><h2 id="稳定裕度"><a href="#稳定裕度" class="headerlink" title="稳定裕度"></a>稳定裕度</h2><p>稳定裕度是系统动态性能指标，指的是系统的稳定程度（注意这是对<strong>最小相角系统</strong>而言）</p><p>对于<strong>最小相角系统</strong>来说，只要越过(-1,0)的左边就是不稳定，因此稳定程度可以确定为曲线与(-1,0)的距离，这就是稳定裕度，这是开环频率指标。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/120.png" class=""><p><strong>相角裕度</strong>确定了Nyquist曲线上$|G(j\omega)|=1$的点，到-180°的角度差。物理意义是系统在相角上距离临界稳定还具有的储备量，意思是最多可以加多少角度的纯延时环节。</p><p><strong>幅值裕度</strong>确定了Nyquist曲线上与负实轴交界的点到(-1,0)点的距离的倒数，这个数越大，距离(-1,0)越远，系统越稳定。物理意义是系统在增益上距离临界稳定还具有的储备量。意思是最多还可以再乘上多少的增益。</p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/121.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/122.png" class=""><p>求相角裕度要先求出$|G(j\omega_c)| = 1$对应的$\omega_c$的值（要试根），再代入相角式子中计算裕度。求幅值裕度解相角等于-180°的方程（或者令G(j\omega）虚部为0)，解方程时可能要使用$\arctan a +\arctan b = arctan\frac{a+b}{1-ab}$，然后把这个频率代入模值方程的倒数中，就可以得到幅值裕度h。</p><p><strong>画伯德图算</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/123.png" class=""><p>伯德图算出来的相角裕度和幅值裕度比实际小一些，这在工程上时有好处的，也免去试根的麻烦，做题时画图后再做计算较方便。<strong>当求-180°对应的频率时，如果对数幅频特性是按照-20，-40，-60的斜率依次下降的，那么-180°就处于两个转折频率的几何中点处，即两个转折频率相乘后开方（容易证明所有惯性环节在相频特性曲线图上的几何形状都是一样的，区别只是转折频率而已，就连幅频特性曲线后面都是一样的，区别只是转折频率较高的惯性环节前面多出一节近似0分贝的图像）。</strong>如果函数没有这个规律，就老实用相角方程算。    </p><hr><h2 id="利用开环频率特性分析系统性能"><a href="#利用开环频率特性分析系统性能" class="headerlink" title="利用开环频率特性分析系统性能"></a>利用开环频率特性分析系统性能</h2><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/124.png" class=""><p>在截止频率附近的叫做<strong>中频段</strong>，左边的特别是第一个转折频率前叫做<strong>低频段</strong>，最后在0分贝线下较多的地方叫做<strong>高频段</strong>。注意：这只适用于单位反馈的最小相角系统，因为这样才能通过对数幅频曲线唯一确定对数相频曲线和闭环传递函数。</p><p>低频段和系统的稳态精度息息相关，确定了开环增益和系统型别，只要系统稳定，K和v越大越好。中频段可以直接把相角裕度读出来，和系统的动态性能$t_s和\delta%$息息相关，如果要求相角裕度大于40°，截止频率就要尽量满足以-20斜率穿越0分贝线。高频段决定闭环系统的抗高频干扰能力（$\phi(s) = \frac{G(s)}{1+G(s)}&lt;&lt;1$）,越低越陡越好。</p><p><strong>在最小相角系统中，要学会通过对数幅频曲线去推算相频特性曲线。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/125.png" class=""><p>可以发现，斜率越小，相角归宿越小，每个转折频率后都有不同的相角归宿，在转折频率处，可以大概估计为之前的相角归宿和之后的相角归宿的中间值。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/126.png" class=""><p>可以看出，中间的频带拉的越宽，相角往中间的归宿靠的越近，这也是要用-20斜率穿过0分贝线并且要拉的比较宽的原因，这样相角就尽可能接近-90°，延缓向-180°靠的频率，相角裕度较大。（要注意型别大于等于2的系统可能存在的刚开始的穿越）</p><p>并且可以同时调整K值，调整K值只会上下平移对数幅频曲线，不会改变对数相频曲线，把曲线的截止频率调整到相角最大的地方，也可以增大相角裕度。</p><p><strong>对于典型二阶欠阻尼系统</strong>：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/127.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/128.png" class=""><p>可以看出系统的相角裕度只与阻尼比有关，和超调量有异曲同工之处。知道二阶系统的相角裕度后查图可以知其超调量。并且调节时间也同截止频率和相角裕度有关：$t_s\omega_c = \frac{7}{\tan\gamma}$。所以通过查图可以由相角裕度和截止频率推出其调节时间。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/129.png" class=""><p>二阶系统用时域方法计算更具优越性，但频域方法能扩展到更高级的系统中。</p><p>估计高阶系统的动态性能是用以下两个公式或查图可以保守估计超调量和调节时间：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/130.png" class=""><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/131.png" class=""><p>可以看出右移倍频<strong>不会改变相角裕度</strong>，因为每个惯性环节在伯德图的相角曲线的几何形状是不变的，转折频率改变的只是相角所处的位置（右移），截止频率同样也整体右移同样幅度，因此相角裕度不变。</p><hr><h2 id="利用闭环频率特性曲线分析系统性能"><a href="#利用闭环频率特性曲线分析系统性能" class="headerlink" title="利用闭环频率特性曲线分析系统性能"></a>利用闭环频率特性曲线分析系统性能</h2><h3 id="闭环频率特性曲线绘制"><a href="#闭环频率特性曲线绘制" class="headerlink" title="闭环频率特性曲线绘制"></a>闭环频率特性曲线绘制</h3><p>开环曲线和闭环曲线的关系：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/132.png" class=""><p>可以看出，闭环曲线的模值和相角与OA和AB的夹角有关。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/133.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/134.png" class=""><p>这里可以利用两个工具：</p><p>等M圆，在图中开环的Nyquist曲线上的点对应交于等M圆上的一个圆，可以直接读出这一点频率的闭环幅值。越靠近(-1,0)的点幅值越大，越靠近(0,0)的点幅值越小。</p><p>等N圆，在图中开环的Nyquist曲线上的点对应交于等N圆上的一个圆，可以直接读出这一点频率的闭环相角。越往上相角越大，原理是圆内同弦所对的圆周角是相等的。</p><p>移植到伯德图中：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/135.png" class=""><p>这样当约定一点的开环幅值相角后，可以在图中找到对应的点，看其与哪一个闭环的幅值相角曲线相交，可直接读数。</p><p>这就是<strong>对数幅相特性曲线</strong>，是继频率特性，Nytuist图，伯德图之后分析系统的第四种绘图方式，现在基本不用了，用计算机可以直接完成闭环伯德图绘制。</p><h3 id="闭环频率特性分析系统性能"><a href="#闭环频率特性分析系统性能" class="headerlink" title="闭环频率特性分析系统性能"></a>闭环频率特性分析系统性能</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/136.png" class=""><ol><li>零频值 $M_0 = M(0)$。</li><li>谐振频率$\omega_r$，谐振峰值$M_r$。</li><li>带宽频率$\omega_b$，表示$M(\omega)$下降到零频值的0.707倍时对应的频率。</li></ol><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/137.png" class=""><p>二阶系统知道带宽和谐振峰值后，可以直接通过查表来确定闭环系统的超调量、阻尼比和调节时间。</p><p>对于高阶系统：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/138.png" class=""><p>注意$\omega_c$是开环的截止频率，但是实际工程直接把闭环的带宽频率代进去计算也差不太多。同样也可以直接读图。</p><hr><h2 id="线性系统的时域校正"><a href="#线性系统的时域校正" class="headerlink" title="线性系统的时域校正"></a>线性系统的时域校正</h2><h4 id="反馈校正"><a href="#反馈校正" class="headerlink" title="反馈校正"></a>反馈校正</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/73.png" class=""><p>可以看出，反馈校正较小被包围环节的时间常数的同时，也减小了增益。相反，改成正反馈可以增加增益，增大时间常数。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/74.png" class=""><hr><h2 id="根轨迹"><a href="#根轨迹" class="headerlink" title="根轨迹"></a>根轨迹</h2><p>作用：研究系统中的某一参数发生变化时，系统性能的变化趋势。</p><p>根的位置对系统表现有着至关重要的影响，掌握了根的变化规律，就可以利用补偿器来改变根的位置，从而达到影响系统表现的作用。</p><p>开环传递函数化成首一标准形式后的系数叫根轨迹增益，仅对开环而言。</p><p>例：其中研究对象是开环传递函数$G(s)H(s)$：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/45.png" class=""><p>其中根随着K从0增大到无穷的轨迹就是根轨迹。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/75.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/76.png" class=""><p><strong>因此根轨迹要满足模值条件和相角条件。</strong><br>$$<br>|G(s)H(s)| = K^*\frac{\prod_{i=1}^{m}|s-z_i|}{\prod_{j=1}^{n}|s-p_j|} = 1<br>$$</p><p>$$<br>∠G(s)H(s)= \sum_{i=1}^{m}∠(s-z_i)-\sum_{j=1}^{n}∠(s-p_j) = (2k+1)\pi<br>$$</p><p><strong>对于s平面上的任意的点，总存在一个K*，使其满足模值条件，但该点不一定是根轨迹上的点。但是满足相角条件的点一定在根轨迹上，而根轨迹上对应的K*值，应由模值条件确定。</strong></p><p><strong>根轨迹规则：</strong></p><ol><li><p>根轨迹起始于开环极点，终止于开环零点。如果开环极点的个数n大于开环零点个数m，则有n-m条根轨迹终止于无穷远处。<br>$$<br>原因：K^* =\frac{\prod_{j=1}^{n}|s-p_j|}{\prod_{i=1}^{m}|s-z_i|}<br>$$</p></li><li><p>根轨迹的分支数=开环极点数，根轨迹连续且对称于实轴。通常开环传递函数的分母比分子阶数高，因此闭环极点数等于开环极点数等于根轨迹分支数。</p></li><li><p>从实轴上最右端的开环零、极点算起，奇数开环零、极点到偶数开环零、极点之间的区域必是根轨迹。</p></li><li><p>当$n-m\geq 2$时闭环根之和保持一个常值。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/46.png" class=""><p><strong>定理：两个开环极点一个开环零点，复平面出现根轨迹，一定是以开环零点为圆心的圆弧。</strong></p></li></ol><p>​        <img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/77.png" class=""></p><p>​        <img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/78.png" class=""></p><ol start="5"><li><p>渐近线（σ为渐近线和实轴的交点，φ为渐近线与实轴的夹角）：<br>$$<br>\sigma_a = \frac{\sum_{i=1}^{n}p_i - \sum_{j=1}^{m}z_j}{n-m}<br>$$</p><p>$$<br>\phi_a = \frac{(2k+1)\pi}{n-m}<br>$$</p></li><li><p>实轴上两个根的分离点d：<br>$$<br>\sum_{i=1}^{n} \frac{1}{d-p_i} =\sum_{j=1}^{m} \frac{1}{d-z_j}<br>$$<br>解方程的时候要试根，没有更好办法。然后把分离点带入模值条件中可以得到K*的值。</p></li><li><p>与虚轴的交点（系统临界稳定的点）：</p><p>可以把s=jω代入特征方程中，并令特征方程为0，解实部和虚部两条方程可以得出与虚轴交点以及K*的值。</p></li><li><p>出射角/入射角（即满足相角条件）：<br>$$<br>\sum_{i=1}^{m}∠(s-z_i)-\sum_{j=1}^{n}∠(s-p_j) = (2k+1)\pi<br>$$</p></li></ol><h4 id="参数根轨迹（除K之外其他参数变化时系统的根轨迹）"><a href="#参数根轨迹（除K之外其他参数变化时系统的根轨迹）" class="headerlink" title="参数根轨迹（除K之外其他参数变化时系统的根轨迹）"></a>参数根轨迹（除K之外其他参数变化时系统的根轨迹）</h4><p>需要根据特征方程构建等效开环传递函数，含参数的放分子，不含参数放分母。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/79.png" class=""><p>画出根轨迹后，等效开环传递函数的任务结束，分析系统要回到原来的函数并利用根轨迹。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/80.png" class=""><p>注意：如果参数在次数最大的项上，直接整体同除系数，把系数转移到次数低的项，然后再构造等效开环传递函数。</p><h4 id="零度根轨迹（系统实质上处于正反馈时的根轨迹）"><a href="#零度根轨迹（系统实质上处于正反馈时的根轨迹）" class="headerlink" title="零度根轨迹（系统实质上处于正反馈时的根轨迹）"></a>零度根轨迹（系统实质上处于正反馈时的根轨迹）</h4><p>模值条件不变，相角条件变成2kπ。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/81.png" class=""><p>变动三条，实轴上的根轨迹变成偶数点左边，渐近线的夹角公式分子变为2kπ，出、入射角公式的右边变为2kπ。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/82.png" class=""><p>可以看出正反馈和负反馈不是对立的，而是一个事情的两个方面。可以看成K从零往负无穷大变化的根轨迹。相当于K的范围扩大到了整个实数域，构成完整的根轨迹图。</p><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>若开环零极点均为偶数个，且关于一条平行于虚轴的直线左右对称分布，则根轨迹一定关于该直线左右分布。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/83.png" class=""><h4 id="例题（重要）"><a href="#例题（重要）" class="headerlink" title="例题（重要）"></a>例题（重要）</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/84.png" class=""><ul><li><p>可以看出出现零极点对消情况后得到的开环传递函数得到的闭环传递函数不包含所有的根，还有的根不根据K变化，要用原来的函数求闭环传递函数才可得。</p></li><li><p>附加闭环极点会使超调量减小，峰值时间后移，附加闭环零点反之。 原因是附加开环极点后等于给原来的信号设置了延时环节，附加开环零点后等于在原来的信号基础上又添加一个微分信号。越靠近虚轴，点起到的作用越大。</p></li><li><p>附加开环零点使跟轨迹左移，系统更稳定。附加开环极点使跟轨迹右移，系统更不稳定。</p></li></ul><p><strong>PID控制</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/85.png" class=""><p>比例+积分PI把稳态精度提高了，把动态性能指标变差了，相当于附加开环零极点，但极点位置为原点，影响程度高。比例+微分PD稳态精度不影响，动态性能有所改善，相当于附加 开环零点根轨迹向左扳。而PID控制即提高了稳态精度，也提高了稳态精度，增加一个开环极点（原点）和两个开环零点，导致附加的开环零点的影响大。</p><hr><h2 id="频率法串联校正"><a href="#频率法串联校正" class="headerlink" title="频率法串联校正"></a>频率法串联校正</h2><p>频率法串联校正仅使用于单位负反馈的最小相角系统，如果是非相角系统，需要画出伯德图的两幅图，在考虑稳定性的基础上进行校正。如果是非单位反馈，可以进行一下处理：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/185.png" class=""><h3 id="串联超前校正"><a href="#串联超前校正" class="headerlink" title="串联超前校正"></a>串联超前校正</h3><p>$$<br>关键公式 G_c(s) = \frac{aTs+1}{Ts + 1}(a&gt;1)<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/139.png" class=""><p>用电路搭建的模型如上图所示，这样的一个电路可以给开环传递函数增加一个极点一个零点，改变增益。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/140.png" class=""><p>可以看出这个网络的相角都是大于0的，所以叫超前网络。好处是可以增加相角裕度。且最大相角恰好在两个转折频率的几何中点处，且其最大值只与a有关，此时拉起来的增益是$10lg a (dB)$。</p><p>注意：一级超前网络最大超前角为60°，不能把a拉的太大，因为会导致高频抗干扰能力受影响，最有效的a在4到10之间。</p><p>超前校正步骤（给定指标$e_{ss}^* ,\omega_c^* ,\gamma^* $）</p><p>当截止频率和相角裕度都不够的情况下使用（因为超前校正同时增加了截止频率和相角裕度）。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/141.png" class=""><p>简单来说，是通过相角裕度的差值计算超前网络的a值，这个差值通常加5°~10°。</p><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>注意：设计系统的时候指标先紧着牙设计，给后面的设计留下充足的可调整空间。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/142.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/143.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/144.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/145.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/146.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/147.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/148.png" class=""><p>可以看出，加5°-10°的原因是超前网络提高了系统中频段的幅值，使得系统的截止频率延后，因此原本的相角裕度会减小，5°-10°就是用来补偿这部分减小的裕度的。并且通过后面的斜率变换可以自己控制具体补偿多少，后面的斜率越小越陡，要补偿的角度越多。当补偿之后的角度还差一点时，不用重新设计，可以把超前网络后面的转折频率往后移一下，可以保持第一次调整的截止频率不变的基础上，把补偿的相角往上提一提。可以发现超前网络的a负责提高相角和幅值的大小，补偿后截止频率往后提了$\sqrt{a}$倍频。而T则是负责提高的具体频率位置，把提高的最大相角刚好补偿到截止频率上。总之，设计的时候就围绕相角裕度的补偿设计，由要补偿的相角加5°~10°确定a，a确定了补偿的幅值以及补偿后的截止频率，通过补偿后的截止频率和a又可以反推两个转折频率，由此得出超前网络传递函数。</p><p>如果按照相角补偿好了，计算截止频率的指标还达不到的情况下，直接按照截止频率的指标设计超前网络，把调整后截止频率直接设置成目标截止频率，并以这点直接算出两个转折频率（学会利用几何学）。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/149.png" class=""><hr><p>当给定的参数是时域指标时，要通过查图或公式转换成频域指标（给定超调量唯一确定相角裕度，给定调节时间和已知相角裕度确定截止频率）：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/150.png" class=""><p>当其它指标都达标后，最后需要验算h指标：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/151.png" class=""><p>这里反正切函数过多，并且性质和-20，-40，-60的三段规律差不多，可以试根。</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>超前校正保持了低频段性质不变，满足稳态精度；改善了中频段，提高了相角裕度和截止频率，动态性能提高；但是抬高了高频段，使得抗高频干扰能力降低。</p><hr><h3 id="串联滞后校正"><a href="#串联滞后校正" class="headerlink" title="串联滞后校正"></a>串联滞后校正</h3><p>$$<br>关键公式 G_c(s) = \frac{bTs+1}{Ts + 1}(0&lt;b&lt;1)<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/152.png" class=""><p>对滞后网络来说，其增益就是1，不需要另外增加比例环节调节。这个网络不利因素是相角衰减会影响相角裕度，但是可以把截止频率点尽量往后挪可以减小相角裕度的损失，但是幅值的衰减可以利用起来。因此我们可以把截止频率放在滞后网络<strong>第二个转折频率往后的十倍频程</strong>。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/153.png" class=""><p>可以看到b取得越小，相角裕度的损失越大，但不会超过-6°。</p><p>滞后校正步骤（给定指标$ e_{ss}* ,\omega_c* ,\gamma* $）：</p><p><strong>实质：利用滞后网络幅值衰减的属性挖掘系统自身的相角储备。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/154.png" class=""><p>总结：当原有的截止频率有余而相角裕度严重不足的情况下优先考虑用滞后校正。考虑到相角裕度6°的损失，要找到原来曲线中有($\gamma*+6°$)的相角储备的点作为调整后截止频率的点。总之，设计时围绕相角裕度的挖掘展开。</p><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/155.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/156.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/157.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/158.png" class=""><p>这里用了一招试探法，根据-20，-40曲线的经验相角储备45°的点在第一个转折频率处，这里多了一个-60斜率，46°相角储备可以往前挪一挪。只有在题目要求的截止频率之后且相角储备大于$\gamma*+6°$即可，没有标准位置，这里的截止频率在2.3到2.6皆可，但尽量截止频率靠大的设计。</p><p>找到了截止频率后，往前减小十倍频就是滞后环节第二个转折频率，第一个转折频率可以通过几何特性来计算。</p><p>结果：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/159.png" class=""><p>然后进行验算：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/160.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/161.png" class=""><hr><p>在设计好系统之后，题目如果需要验算h*的值，就需要求-180°相角的频率$\omega_g$，如果环节过多的话这个方程是很难解的，只能试根。但考试允许带计算器，这时候神器来了，一定要学会用计算器的<a href="http://www.360doc.com/content/16/0622/06/7863900_569691363.shtml">牛顿法求解方程</a>，否则试根过程将非常痛苦。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/162.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/163.png" class=""><p>第二种方法不用试根也不用计算器的牛顿法，只要计算h=10dB的点不小于-180°，就能证明在-180°的点h&gt;10dB，缺点是无法切确知道h的值。</p><hr><p><strong>迟后校正的另一种用法：保持中频段基本不变，抬高低频段</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/164.png" class=""><p>这种情况的做法先求出低频段需要增加的增益$K_c$，然后将原来的转折频率降低十倍频作为第二个转折频率$\omega_2$，再通过$20lgK_c=20lg\frac{\omega_2}{\omega_1}$计算出第一个转折频率$\omega_1$。这样滞后环节的传递函数为$Kc \frac{\frac{s}{\omega_2}+1}{\frac{s}{\omega_1}+1}$。校正之后相角裕度会损失不到6°，牺牲少量动态性能大大提高稳态精度。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/165.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/166.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/167.png" class=""><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>减小系统增益K可以增大相角裕度，但是稳态误差会增大。滞后网络既保存了低频段的稳态特性，又通过幅值衰减的特性充分挖掘了相角裕度。调节后截止频率再满足相角裕度的条件下要尽量往后设计，这是因为往前设计会导致第一个转折频率过小，使得惯性环节调节时间过长，并且不容易物理实现。同理原系统的增益K也是尽量往小的设计，K增大不改变校正后的截止频率，但会更加增大滞后校正的幅值衰减，导致第一个转折频率拉得更加靠前，物理实现不容易。另外校正完成之后要验证幅值裕度h的值要学会用计算器的牛顿法。滞后校正的另一种功能是保持中频段，抬高低频段。滞后网络压低了高频段，因此抗高频干扰能力提高。</p><hr><h3 id="串联滞后-超前校正"><a href="#串联滞后-超前校正" class="headerlink" title="串联滞后-超前校正"></a>串联滞后-超前校正</h3><p>$$<br>关键公式 G_c(s) = \frac{T_as+1}{aT_as + 1} * \frac{T_bs+1}{\frac{T_b}{a}s + 1}(aT_a&gt;T_a&gt;T_b&gt;\frac{T_b}{a})<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/168.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/169.png" class=""><p>在滞后-超前校正的后半部分，相角超前，可以补充相角裕度；并且幅值衰减，可以挖掘自身的相角储备，因此应当把截止频率设定在最后两个转折频率的几何中点处，这是超前角最大的地方。在选择第二个转折频率的时候，应当与校正后的转折频率拉开十倍频，这样滞后部分对相角的损失不会超过-6°。</p><p>滞后-超前校正步骤（给定指标$ e_{ss}* ,\omega_c* ,\gamma* $）：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/170.png" class=""><p>这里的角度补偿要好好理解一下，<strong>超前部分需要补偿的角度=目标角度-原有角度+6°</strong>，这里截止频率取的是目标的最小值，挖掘出最大的相角储备，但仍然达不到目标值，这时候要通过超前部分补偿起来，同时超前部分也要补偿滞后部分损失的6°，最多能补偿60°。算好补偿的角度后，就可以把超前部分a的值算出来：<br>$$<br>a = \frac{1+\sin\phi_m}{1-\sin\phi_m}<br>$$<br>第四个转折频率往后$\sqrt{a}$倍频，第三个转折频率往前$\sqrt{a}$倍频，注意第四个转折频率之后的线不一定在0dB。第二个转折频率往前10倍频，第一个转折频率直接以-20斜率拉到0dB线保证低频段不变，这个频率的计算要讲解，关系到后面超前环节的上下位置，能否把截止频率精准放在目标处。同样可以利用几何分析方便求解。</p><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/171.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/172.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/173.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/174.png" class=""><p>这里求解第一个转折点时需要用到一定的几何技巧，要熟记。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/175.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/176.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/177.png" class=""><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>滞后-超前校正最主要的工作是算准最后两个转折频率相差的频程a值。通过需要补偿的超前角的角度算出a值以后，在截止频率处和原曲线实轴对称的地方，左右拉$\sqrt{a}$倍频就是第三和第四个转折频率，而不是直接拉到0dB线。只有最后两个转折频率决定的超前环节决定最后补偿的相角，滞后环节对相角的损失不超过6°，可以拉任意长度，但第一个转折频率要拉到0dB防止改变低频段的稳态指标。第一个转折频率决定后面超前环节的上下位置，能不能在预定截止频率处把幅值衰减到0dB。</p><hr><h3 id="串联PID校正"><a href="#串联PID校正" class="headerlink" title="串联PID校正"></a>串联PID校正</h3><p>$$<br>关键公式 G_c(s) = K_Ds + K_P + \frac{K_I}{s} = \frac{K_I(T_1s + 1)(T_2s+1)}{s}<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/178.png" class=""><p>串联PID校正可以看成滞后-超前校正的特例，相当于第一个转折频率在左边无穷远处，第二个转折频率在右边无穷远处。它的好处是可以把系统的型别提高一个档次，并且后面最大能够把角度拉起90°。</p><h4 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/179.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/180.png" class=""><p>这里决定用什么校正尤为重要，首先用超前的话计算频率为13.6的地方的相角裕度为4.789°目标是65°，需要拉起来超过65°-4.789&gt;60°，不能完成任务，用滞后只能在频率有余的时候做，超前-滞后是滞后的进化版，亦是如此。只能用PID校正。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/181.png" class=""><p>这里干脆把校正频率定到15，算出需要拉起的角度，然后计算第二个转折频率。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/182.png" class=""><p>第二个转折频率可以直接<strong>根据一阶复合微分的相频曲线</strong>进行设计（前面两个环节相当于滞后环节，损失不会超过-6°），第一个转折频率的计算方法是让刚开始的-20斜率线的延长线过频率为1的点，保证系统增益为1，同样要巧用几何特性。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/183.png" class=""><p>计算好转折频率后，传递函数就确定了，把分子可全部乘开就可以得到$K_P、K_I、K_D$的数值。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/184.png" class=""><hr><h3 id="希望特性设计法"><a href="#希望特性设计法" class="headerlink" title="希望特性设计法"></a>希望特性设计法</h3><p>前面规范的方法要掌握透，但不要当成教条，实际情况可以灵活处理。“希望特性”设计方法通过预定指标直接设计校正后的传递函数，把这个函数减去原来的传递函数可以找到校正的函数。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/186.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/187.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/188.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/189.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/190.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/191.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/192.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/193.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/194.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/195.png" class=""><h2 id="综合题目"><a href="#综合题目" class="headerlink" title="综合题目"></a>综合题目</h2><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/196.png" class=""><h2 id="线性离散系统的分析与校正"><a href="#线性离散系统的分析与校正" class="headerlink" title="线性离散系统的分析与校正"></a>线性离散系统的分析与校正</h2><p>离散系统：系统中有一处或几处信号是脉冲或数码的系统。有采样系统 — 时间离散，数值连续；数字系统 — 时间离散，数值量化。</p><p>计算机控制系统优点控制计算由程序实现，便于修改，容易实现复杂的控制律；抗干扰性强；一机多用，利用率高；便于联网，实现生产过程的自动化和宏观管理。缺点是采样点间信息丢失，与相同条件下的连续系统相比，性能会有所下降；需附加A/D, D/A转换装置。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/197.png" class=""><p>由于采样是时间上离散，数值上也是离散的，采用还有时间的延迟，为了简化计算，我们把采样过程理想化，认为采样瞬间完成，并且字节足够（忽略量化误差）。</p><p>在采样以后，输入数码量，计算机进行计算以后的数值也是连续的，连续的量再采样成数码量。然后进行D\A的过程，广泛应用的是零阶保持器，把一个个脉冲转换成一个个阶梯信号。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/198.png" class=""><p>对于信号采样，相当于在每个采样时刻都乘上一个冲激函数，采用后的信号为：<br>$$<br>e^*(t) = e(t) * \sum_{n=0}^{\infty}\delta(t-nT) = \sum_{n=0}^{\infty}e(nT)\delta(t-nT)<br>$$<br>拉式变换后为：<br>$$<br>E^*(s) = \sum_{n=0}^{\infty}e(nT) * e^{-nTs}<br>$$<br>作用：</p><p>① 给出$E^*(s)$与$e(t)$在采样点上取值之间的关系；</p><p>② 一般可写成封闭形式；</p><p>③ 用于求$e^*(t)$的<strong>z变换</strong>或系统的时间响应。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/199.png" class=""><p>拉式变换后是一个超越函数，不能用有限的多项式进行表示，不好分析，所以离散系统一般用Z变换。</p><p>用傅里叶级数展开$\delta_T(t)$，代入原方程后进行拉式变换：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/200.png" class=""><p>结论：采样后的拉式变换为：<br>$$<br>E^*(s) = \frac{1}{T} \sum_{n=-\infty}^{\infty}E(s+jn\omega_s)<br>$$<br>作用：</p><p>① 给出$E^*{(s)}$与$E(s)$之间的联系；</p><p>② 一般写不成封闭形式；</p><p>③ 用于$e^*(t)$的<strong>频谱分析</strong>。</p><h3 id="香农采样定理-——信号复现的必要条件"><a href="#香农采样定理-——信号复现的必要条件" class="headerlink" title="香农采样定理 ——信号复现的必要条件"></a>香农采样定理 ——信号复现的必要条件</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/201.png" class=""><p>结论：对一个连续的非周期信号，经过傅里叶变换后频谱是一个连续的非周期的值，并且在$\omega_h$处衰减到0。但对这个信号进行采样以后频谱变成了连续的周期的值，其频谱函数周期为$\omega_s$，原函数采样周期为$T = \frac{2\pi}{\omega_s}$，频谱幅值缩小T倍。但是这是有条件的，如果图上的采样角频率$\omega_s&lt; 2\omega_h$频谱就会混叠在一起无法分开。因此，信号复现的条件是$\omega_s$足够大，采样周期T足够短。<br>$$<br>\omega_s = \frac{2\pi}{T} &gt; 2\omega_h<br>$$<br> 然后通过一个理想低通滤波器把高频信号全部滤除，就可以得到原来连续信号的频谱，但如果频率混叠在一起，滤出来的信号将会失真。</p><p>在实际工程中，把输入端的信号减去输出端的信号，对这个偏差信号进行采样变成数码量，在计算机上进行计算，然后再把<strong>计算机计算结果的控制量从离散信号转换为连续信号</strong>，这才是信号复现的用途。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/202.png" class=""><h3 id="零阶保持器"><a href="#零阶保持器" class="headerlink" title="零阶保持器"></a>零阶保持器</h3><p>要过滤高频信号，尽可能还原原频谱，需要找一个频率特性和理想滤波器接近的东西。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/203.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/204.png" class=""><p>可以看出，零阶保存器的幅频相频特性都和理想滤波器有一定差距。但是通过把零阶保持器之后的阶梯信号光滑地链接起来，可以近似看成原信号延迟二分之一的采样周期后的信号。零阶保持器看成二分之一拍纯延时环节。这样的坏处是导致了相角向后延，使得相角裕度变小，系统动态性能变差。但是换来的是计算机控制的诸多便利，在计算机输出端口读取寄存器的过程就是零阶保持器，工程实现不费事。因此在工程上广泛应用。</p><p>总结：以上分析的采样过程在忽略了采样时间和量化误差的基础上。采样周期的选择要符合香农采样定理，然后采用零阶保持器来过滤信号，可以看成大致过滤出比原信号相角延迟二分之一个采样周期的信号。</p><h3 id="Z变换"><a href="#Z变换" class="headerlink" title="Z变换"></a>Z变换</h3><p>$$<br>离散信号 e^*(t) = e(t) * \sum_{n=0}^{\infty}\delta(t-nT) = \sum_{n=0}^{\infty}e(nT)\delta(t-nT)<br>$$</p><p>$$<br>离散信号的拉氏变换E^*(s) = \sum_{n=0}^{\infty}e(nT) * e^{-nTs}<br>$$</p><p>由于超越函数不好分享，现在令：<br>$$<br>z = e^{Ts}<br>$$<br>则有<br>$$<br>E^*(z) = \sum_{n=0}^{\infty}e(nT) * z^{-n}<br>$$<br>z变换仅对离散信号而言，$z^{-1}$相当于一拍延迟算子，由$e(nT)$决定作用的幅值，由$z^{-n}$决定作用的时间，这就是z变换。<strong>注意是连续函数采样之后的拉式变换才能进行z变换</strong>。z变换有级数求和法（定义法）、查表法（部分分式展开法）、留数法（反演积分法）。</p><h4 id="级数求和法"><a href="#级数求和法" class="headerlink" title="级数求和法"></a>级数求和法</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/205.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/206.png" class=""><h4 id="查表法"><a href="#查表法" class="headerlink" title="查表法"></a>查表法</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/207.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/208.png" class=""><h4 id="留数法"><a href="#留数法" class="headerlink" title="留数法"></a>留数法</h4><p>$$<br>E(z) = \sum_{i=1}^{l}[ResE(s)\frac{z}{z-e^{Ts}}]_{s=s_i}<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/217.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/209.png" class=""><h4 id="z变换基本定理"><a href="#z变换基本定理" class="headerlink" title="z变换基本定理"></a>z变换基本定理</h4><ol><li>线性性质    </li></ol><p>$$<br>Z[(a * e_1^*(t) \pm b * e_2^*(t))] = a * E_1(z) \pm b * E_2(z)<br>$$</p><ol start="2"><li><p>实位移定理</p><p>延迟定理<br>$$<br>Z(e(t-nT)) = z^{-n}E(z)<br>$$</p></li></ol><p>​       超前定理<br>$$<br>Z[e(t+nT)] = z^n[E(z) - \sum_{k=0}^{n-1}e(kT)*z^{-k}]<br>$$<br>​       题目</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/210.png" class=""><ol start="3"><li>复位移定理</li></ol><p>$$<br>Z[e(t) * e^{\mp at}] = E(z * e^{\pm aT})<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/211.png" class=""><ol start="4"><li>初值定理<br>$$<br>\lim_{n \to 0}e(nT) = \lim_{z \to \infty}E(z)<br>$$</li></ol><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/212.png" class=""><ol start="5"><li>终值定理<br>$$<br>\lim_{n \to \infty}e(nT) = \lim_{z \to 1}(z-1)E(z)<br>$$</li></ol><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/213.png" class=""><ol start="6"><li>卷积定理</li></ol><p>$$<br>设： c^*(t) = e^*(t) \otimes g^*(t) = \sum_{k=0}^{\infty} e(kT)*g[(n-k)T]<br>$$</p><p>$$<br>则：C(z) = E(z) * G(z)<br>$$</p><h4 id="z反变换"><a href="#z反变换" class="headerlink" title="z反变换"></a>z反变换</h4><p>有幂级数法（长除法）、查表法（部分分式展开法，以$\frac{E(z)}{z}$形式展开）、留数法（反演积分法）。</p><p>长除法</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/214.png" class=""><p>查表法</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/215.png" class=""><p>留数法<br>$$<br>e(nT) = \sum Res[E(z) * z^{n-1}]<br>$$</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/216.png" class=""><h3 id="离散系统的数学模型"><a href="#离散系统的数学模型" class="headerlink" title="离散系统的数学模型"></a>离散系统的数学模型</h3><h4 id="线性常系数差分方程及其解法——离散系统的时域数学模型"><a href="#线性常系数差分方程及其解法——离散系统的时域数学模型" class="headerlink" title="线性常系数差分方程及其解法——离散系统的时域数学模型"></a>线性常系数差分方程及其解法——离散系统的时域数学模型</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/218.png" class=""><p>结论：前项差分是从末尾往前看n拍的数据，共n+1拍数据。后项差分是从开头往后看n拍的数据，共n+1拍数据。n阶差分就有n+1个拍的加权和，相同阶数的前项差分和后项差分每一项的权重一致。连续函数中的微分（一阶导）可以看出一阶前项差分除以采样周期T。每一拍中都不出现一次以外的高次项，这就是线性的定义；所有前面的系数是常数，这就是定常的定义，这就是线性常系数差分方程。可以用迭代法或Z变换法求解。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/219.png" class=""><p>题目</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/220.png" class=""><p><strong>迭代法</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/221.png" class=""><p><strong>Z变换法</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/222.png" class=""><h4 id="脉冲传递函数——离散系统的复域数学模型"><a href="#脉冲传递函数——离散系统的复域数学模型" class="headerlink" title="脉冲传递函数——离散系统的复域数学模型"></a>脉冲传递函数——离散系统的复域数学模型</h4><p>定义：零初始条件下离散系统输出z变换对输入z变换之比。<br>$$<br>G(z) = \frac{C(z)}{R(z)}<br>$$<br><strong>定理</strong>：输出序列等于输入序列的单位脉冲响应序列的卷积。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/223.png" class=""><p><strong>性质</strong>：z同样是一个复数，$G(z)$只和系统的结构参数有关。有了G(z)可唯一确定一个系统的差分方程，是一一对应的。$G(z)$是系统单位脉冲响应的z变换。</p><p>局限性：原则上不反映非零初始条件下系统响应的全部信息，一般只适合描述单输入单输出系统，只适合用于描述线性定常系统。</p><p><strong>题目</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/224.png" class=""><h4 id="开环系统的脉冲传递函数"><a href="#开环系统的脉冲传递函数" class="headerlink" title="开环系统的脉冲传递函数"></a>开环系统的脉冲传递函数</h4><p>环节直接有开关时：<br>$$<br>G(z) = G_1(z)G_2(z)<br>$$<br>环节之间无开关时：<br>$$<br>G(z) = Z[G_1(s) * G_2(s)] = G_1G_2(z)<br>$$<br>有ZOH时：</p><p>由于离散信号经过$1-e^{-Ts}$环节时还是一个离散信号，所以等价于在后面加采样开关，两边分别进行z变换。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/225.png" class=""><p><strong>零阶保持器不改变系统阶数，不改变开环极点，只改变开环零点。</strong></p><h4 id="闭环系统的脉冲传递函数"><a href="#闭环系统的脉冲传递函数" class="headerlink" title="闭环系统的脉冲传递函数"></a>闭环系统的脉冲传递函数</h4><p>注意有采样开关的离散系统不能使用Mason公式。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/226.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/227.png" class=""><p>当采样开关不是对误差的采样，采样开关无法前移，这种情况下一般求不出$G(z)$，只能求出$C(z)$，可以把输入信号当成一个环节，输入单位脉冲进行激励。</p><p>每一个对两个信号求差或求和的东西后面有开关都能等效到之前的几条线路。</p><hr><h3 id="离散系统的稳定性分析"><a href="#离散系统的稳定性分析" class="headerlink" title="离散系统的稳定性分析"></a>离散系统的稳定性分析</h3><p>z变换其实就是拉普拉斯变换把$e^{(Ts)}$换成z的结果，而$s= \sigma +j\omega$，有：<br>$$<br>z = e^{\sigma T}e^{j\omega T}<br>$$<br>所以z的幅值和s的实部有关，z的相角和s的虚部有关，s的虚轴相当于z域中半径为1的圆。同理s=-1的轴相当于z域中半径为$e^{-T}$的圆，s越往左，在z域中圆的半径越小。因此<strong>s的稳定域映射到z域中代表的是单位圆</strong>。当s域中的一点在实轴上从0到负无穷相当于在z域上从1到0，从0到正无穷相当于z域从1到正无穷。当频率达到二分之一的采样角频率时，映射到z域是180°角的线上。也就是说<strong>s域中每一个宽度为$\omega_s$的带都代表了一个z域</strong>。在实轴附近的那个带称为主带。在<strong>香农采样定理满足的条件（$\frac{\omega_n}{2}&gt;\omega_h$）下，我们系统的开环零极点在s域上都落在主带上</strong>。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/228.png" class=""><p>因为z域单位圆越往内数据密度越大，所以为了不造成太大失真，与离散系统有关的数字要用双字节长度。</p><h3 id="离散系统的稳定性判据"><a href="#离散系统的稳定性判据" class="headerlink" title="离散系统的稳定性判据"></a>离散系统的稳定性判据</h3><h4 id="通过w变换使用劳斯判据"><a href="#通过w变换使用劳斯判据" class="headerlink" title="通过w变换使用劳斯判据"></a>通过w变换使用劳斯判据</h4><p>z域上不好进行稳定性判断（如列劳斯表），要把其进行w变换把单位圆的内外转换成虚轴左右。至少有三种方案可供变换：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/229.png" class=""><p>进行完w变换之后就可以用劳斯判据了。</p><p><strong>题目</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/230.png" class=""><h4 id="z域中的Jurry稳定判据（重要）"><a href="#z域中的Jurry稳定判据（重要）" class="headerlink" title="z域中的Jurry稳定判据（重要）"></a>z域中的Jurry稳定判据（重要）</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/231.png" class=""><p>$D(z)$是离散系统特征方程，$D(1)$一定要大于0，如果$D(z)$最高次项的次数是偶数，则$D(-1)&gt;0$，是奇数则$D(-1)&lt;0$。这两个条件成立后要列Jurry表。规则如上图，把从<strong>0次到最后一次的系数列第一行</strong>，倒序列第二行，然后第三行把第一列和最后一列往回列行列式计算，第四列把第三列倒序。看第一列元素，都取绝对值，第二行大于第一行，第三行大于第四行，第六行大于第五行以此类推，推到一行三个元素，全部满足系统稳定，否则不稳定。</p><h4 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/232.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/233.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/234.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/235.png" class=""><h3 id="离散系统的稳态误差"><a href="#离散系统的稳态误差" class="headerlink" title="离散系统的稳态误差"></a>离散系统的稳态误差</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/236.png" class=""><p>由于当s=0时，z=1，所以可以把z-1在分母中的次数称为系统的型别，把其他部分在z=1时的值称为系统的增益。<br>$$<br>GH(z) = Z[G(s)H(s)] = \frac{1}{(z-1)^v }GH_0(z)<br>$$</p><p>$$<br>\lim_{z \to 1}GH_0(z) = K<br>$$</p><p>用终值定理求$e(\infty)$：<br>$$<br>e(\infty) = \lim_{z \to 1}(z-1)\phi_e(z)R(z) = \lim_{z \to 1}(z-1)R(z) * \frac{1}{1+GH(z)}<br>$$<br><strong>题目</strong></p><p>先判稳</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/237.png" class=""><p>求误差传递函数</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/238.png" class=""><hr><p>由此看来，离散系统同样可以用<strong>静态误差系数法</strong>：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/239.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/240.png" class=""><hr><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/241.png" class=""><p>可以看到，加了零阶保持器之后不改变系统型别，系统的稳态误差只和原系统增益有关，去除了采样周期对稳态误差的影响。</p><p><strong>动态误差系数法</strong></p><p>可以参考连续系统的动态误差系数法。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/242.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/243.png" class=""><h3 id="闭环极点分布与动态响应"><a href="#闭环极点分布与动态响应" class="headerlink" title="闭环极点分布与动态响应"></a>闭环极点分布与动态响应</h3><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/244.png" class=""><p>结论：输入单位阶跃的稳态响应值为$\phi (1)$，相当于闭环增益。其他的极点都处于单位圆的内部，结果都衰减到0。对于极点位置对系统的影响，z域内极点位于单位圆内系统稳定，只有落在正实轴上才不产生振荡，越靠近180°振荡频率越高。当极点的模值相同时，信号衰减的速度一致。在进行z反变换时，解出来的是逐渐衰减的离散信号。<br>$$<br>Z^{-1}[\frac{z}{z-p}] = \sum_{n=1}^{\infty} p^n<br>$$<br>对于共轭复数极点，其解出来的系数也一定是共轭复数。有：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/245.png" class=""><p>因此，对于共轭极点有：<br>$$<br>Z^{-1}[C_1\frac{z}{z-p_1}+C_2\frac{z}{z-p_2}] = 2|C||p|^kcos(k\theta + \phi)<br>$$<br>其中θ是极点对于实轴正方向的夹角，φ是C对于实轴正方向的夹角，k是正整数变量。当极点的角度越小，即θ越小，三角函数中的离散信号越密集，比如$θ=\frac{\pi}{8}$时，一个三角函数周期内有8个离散信号。取90°时会发生一正一负的振铃现象。</p><p><strong>计算动态性能的一般步骤</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/246.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/247.png" class=""><p>原理是直接用长除法来计算每一个采样点的值，只要值足够多就能定义采样点上的超调量和调节时间。</p><p><strong>根轨迹分析与连续系统类似</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/248.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/249.png" class=""><h3 id="离散系统的校正"><a href="#离散系统的校正" class="headerlink" title="离散系统的校正"></a>离散系统的校正</h3><h2 id="非线性控制系统分析"><a href="#非线性控制系统分析" class="headerlink" title="非线性控制系统分析"></a>非线性控制系统分析</h2><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/250.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/251.png" class=""><h3 id="相平面法（了解）"><a href="#相平面法（了解）" class="headerlink" title="相平面法（了解）"></a>相平面法（了解）</h3><p><strong>相平面：由系统某变量及其导数构成的用以描述系统状态的平面。</strong></p><p><strong>相轨迹：系统变量及其导数随时间变化在相平面上描绘出来的轨迹。</strong></p><p>相平面法一般用于描述二阶非线性，二阶系统知道x和x的导数就能将运动规律描述清楚，三阶需要三维图像，不好在平面中表述。</p><p>设二阶非线性系统方程为：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/253.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/252.png" class=""><p>结论：曲线总是顺时针旋转运动，且垂直过横轴，否则就是平衡点。</p><p><strong>解析法绘制相轨迹</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/254.png" class=""><p>绘制一个二阶的非线性方程的相轨迹要点是把x的二阶导数化为只有x的一阶导数和x的项，然后两边积分可以得到相轨迹，其中的C和初始位置有关。这里运用到了高数中微分方程求解的技巧。</p><p><strong>等倾斜线法绘制相轨迹</strong></p><p>解析法有时由于微分方程难解行不通，而等倾斜线法是通用的方法。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/255.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/256.png" class=""><p>每条过原点的直线上轨迹通过的斜率都是一致的，通过绘制每条过原点的直线上轨迹的斜率可以大致刻画出轨迹。</p><p>其他曲线也可以用等倾斜线法：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/261.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/262.png" class=""><p><strong>由相轨迹求时间解</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/257.png" class=""><p>这里一般求解每一小段的时间然后求和，可以近似得到时间。</p><p><strong>二阶系统的相轨迹</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/258.png" class=""><h4 id="非线性系统的相平面分析"><a href="#非线性系统的相平面分析" class="headerlink" title="非线性系统的相平面分析"></a>非线性系统的相平面分析</h4><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/259.png" class=""><p>结论：可以采用线性化方法来分析非线性系统在平衡点附近的运动规律。可以看出这个图在0和-1的点都不稳定，一个震荡发散，一个直接发散。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/260.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/263.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/264.png" class=""><p><strong>存在死区的非线性</strong>：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/265.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/266.png" class=""><p><strong>继电特性1</strong>：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/267.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/268.png" class=""><p><strong>继电特性2</strong>：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/269.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/270.png" class=""><p>不论初始点在什么地方都能回到中间的环中，这叫做<strong>极限环</strong>，这是稳定的周期运动——自振，对应二阶非线性系统的周期运动。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/271.png" class=""><p><strong>存在饱和区的非线性</strong>：</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/272.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/273.png" class=""><h3 id="描述函数法（重点）"><a href="#描述函数法（重点）" class="headerlink" title="描述函数法（重点）"></a>描述函数法（重点）</h3><p>这部分涉及傅里叶级数展开的知识点，请回看另一篇文章《傅里叶级数与傅里叶变换公式推导》。</p><p><strong>描述函数定义：输出函数的基波分量（与输入函数频率相同）与输入函数的幅值比和相角差。</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/275.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/274.png" class=""><p>这里需要熟练掌握傅里叶级数展开中$sin\omega t$和$cos\omega t$前面系数$A_1$和$B_1$的求法。对输出函数求傅里叶展开和输入频率相同的那一项。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/276.png" class=""><p>也就是说，具有滞环特性（在某处同样输入的输出有两个值，取决于速度方向），那么描述函数一般是复数，否则为实数。</p><p><strong>描述函数法分析非线性系统</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/277.png" class=""><p>这里使用线性的分析方法分析非线性系统，把系统分解为描述函数和线性系统的串联，并采用的是广义的$(-1,0)$点，在系统运行的过程中，这个点是移动的。</p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/278.png" class=""><p>当x存在比较小的波动即A较小时，广义点在曲线外，系统稳定，A值就会逐渐衰减并保存在曲线外。如果给的是比较大的波动，广义点在曲线内，A值会越来越大，因此第一次穿越曲线的点不是稳定点，而是一个临界点。当A足够大时使广义点在曲线外时，又会回退，最终稳定在曲线边缘，因此第二个曲线的穿越点是一个稳定点，这点的幅值由对应的A值确定，频率由Nyquist曲线决定。规律：从外穿里的不是自振点，从里穿到外的是自振点。</p><p><strong>自振分析</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/279.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/280.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/281.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/282.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/283.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/284.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/285.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/286.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/287.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/288.png" class=""><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/289.png" class=""><p><strong>改善非线性系统性能的措施</strong></p><img src="/2021/02/19/zi-dong-kong-zhi-yuan-li-jing-jiang/290.png" class=""><p>有时可以在线性系统中人为引入非线性从而达到线性系统达不到的控制效果。如：波动小时死区，波动大时有输出的非线性引入到测速反馈前端。</p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ol><li><p>留数法求z变换和逆变换怎么来的？</p></li><li><p>卷积的定义，为什么输出序列等于输入序列的单位脉冲响应序列的卷积？</p></li><li><p>完善离散系统校正的部分。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 自控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉普拉斯变换</title>
      <link href="2021/02/15/la-pu-la-si-bian-huan/"/>
      <url>2021/02/15/la-pu-la-si-bian-huan/</url>
      
        <content type="html"><![CDATA[<p> 阅读本文之前，建议先阅读我的另一篇文章《傅里叶级数与傅里叶变换公式推导》，这是本文的基础。</p><p>另外可参考视频<a href="https://www.bilibili.com/video/BV1MJ41147PH?from=search&amp;seid=794247831929693494">【中文翻译配音】3D动画详细解释傅里叶与拉普拉斯变换！</a>   以及    <a href="https://www.bilibili.com/video/BV16x411M7HR?from=search&amp;seid=794247831929693494">珂学原理」No. 26「拉普拉斯变换了什么</a>   以及  <a href="https://www.bilibili.com/video/BV1qi4y1t7JY">傅里叶变换的直观解释</a></p><h2 id="拉普拉斯变换和傅里叶变换的联系"><a href="#拉普拉斯变换和傅里叶变换的联系" class="headerlink" title="拉普拉斯变换和傅里叶变换的联系"></a>拉普拉斯变换和傅里叶变换的联系</h2><p>首先，列出傅里叶变换的公式：<br>$$<br>F(ω) = \int_{-\infty}^{\infty} f(t) e^{-i\omega t}dt<br>$$<br>变换条件：狄利克雷条件，通俗来说，没办法表示一些持续递增的函数，因此会导致$\int_{-\infty}^{\infty} f(t) e^{-i\omega t}dt$的结果趋于无穷。</p><p>这时，我们对$f(t)$先进行处理，乘上一个衰减因子$e^{-\sigma t}(\sigma&gt;0)$，使其在无穷远处衰减为0。式子变为：<br>$$<br>F(ω) = \int_{-\infty}^{\infty} f(t) e^{-(i\omega+\sigma) t}dt<br>$$</p><p>$$<br>L(s) = \int_{0}^{\infty} f(t) e^{-st}dt<br>$$</p><p>这里我们在工程上只考虑t=0之后的信号变换，因此积分下限为0。并且可以理解为把原函数分解为了$e^{\sigma t}\sin\omega x$和$e^{\sigma t}\sin\omega x$的形式，这样就能解决函数无穷远处无穷大的问题。即傅里叶变换是一个正弦扫描器，而拉普拉斯变换是一个正弦和指数扫描器。</p><p>因此，拉普拉斯的函数是一个复平面函数，是三维的：</p><img src="/2021/02/15/la-pu-la-si-bian-huan/1.jpg" class><p>其中截取其中的$\sigma = 0$的平面就是傅里叶变换的函数。</p><hr><h2 id="拉普拉斯变换的收敛域"><a href="#拉普拉斯变换的收敛域" class="headerlink" title="拉普拉斯变换的收敛域"></a>拉普拉斯变换的收敛域</h2><p><strong>收敛域的定义</strong>：在收敛域中，存在$\sigma$，使得$f(t)e^{-\sigma t}$为收敛函数，从使得$\int_{-\infty}^{\infty} f(t) e^{-(i\omega+\sigma) t}$收敛。</p><p>也就是说，当$\sigma $足够大使得$f(t)e^{-\sigma t}$在无穷远处收敛为0时，此处为收敛域，当$\sigma$小于某一个阈值时为发散域。</p><img src="/2021/02/15/la-pu-la-si-bian-huan/2.png" class><p>通常我们非常关注拉普拉斯变换的极点，这时拉普拉斯变换的作用就体现出来了。很多系统，例如RLC电路，弹簧上的质量，以及普遍的控制系统会产生正弦和指数输出，因此需要比傅里叶变换更强大的工具去分析它们。极点的实部就代表了函数包含的指数项，虚部代表函数包含的三角函数项的频率。在自动控制系统中，出现了虚轴往右的极点，即代表有不衰减甚至增大的信号，系统不稳定。</p><h2 id="拉普拉斯变换的应用"><a href="#拉普拉斯变换的应用" class="headerlink" title="拉普拉斯变换的应用"></a>拉普拉斯变换的应用</h2><h3 id="常用拉普拉斯变换公式"><a href="#常用拉普拉斯变换公式" class="headerlink" title="常用拉普拉斯变换公式"></a>常用拉普拉斯变换公式</h3><p>$$<br>\mathscr{L}(e^{-at}) = \int_{0}^{\infty} e^{-at} e^{-st}dt = -\frac 1 {a+s}e^{-(a+s)t}|_0^{\infty} = \frac 1 {a+s}<br>$$</p><p>$$<br>\mathscr{L}(u(t)) = \frac 1 s<br>$$</p><p>$$<br>\mathscr{L}(\delta(t)) =  \int_0^{+\infty} \delta(t)e^{-st}dt = 1<br>$$</p><p>$$<br>\mathscr{L}(t) = \frac 1 {s^2}<br>$$</p><p>$$<br>\mathscr{L}(\frac {t^2} 2) = \frac 1 {s^2}<br>$$</p><p>$$<br>\mathscr{L}(\frac {t^n} {n!}) = \frac 1 {s^{n+1}}<br>$$</p><p>$$<br>\mathscr{L}(te^{-at}) = \frac 1 {(s+a)^2}<br>$$</p><p>$$<br>\mathscr{L}(sinωt) = \frac ω {s^2+ω^2}<br>$$</p><p>$$<br>\mathscr{L}(cosωt) = \frac s {s^2+ω^2}<br>$$</p><p>$$<br>\mathscr{L}(e^{-at}sinωt) = \frac ω {(s+a)^2+ω^2}<br>$$</p><p>$$<br>\mathscr{L}(e^{-at}cosωt) = \frac {s+a} {(s+a)^2+ω^2}<br>$$</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>拉普拉斯变换是线性变换，也就是说符合叠加原理：<br>$$<br>\mathscr{L}(af(t) + bg(t)) = aF(s)+bG(s)<br>$$<br>求导：<br>$$<br>\mathscr{L}(f’(t))= \int_0^{+\infty}f’(t)e^{-st}dt = f(t)e^{-st}|_0^{+\infty} -\int_0^{+\infty}f(t)(-se^{-st})dt = sF(s)-f(0)=sF(s)<br>$$<br>同理，积分:<br>$$<br>\mathscr{L}(\int_0^t f(t)dt) = \frac {F(s)} s<br>$$<br>卷积：<br>$$<br>\mathscr{L}(f(t)\otimes g(t)) = F(s)G(s)<br>$$<br>这些在解微分方程（描述动态世界的数学手段）等方面大大简化了运算，因此拉普拉斯变换是方便快捷的分析工具。</p><h2 id="拉普拉斯逆变换"><a href="#拉普拉斯逆变换" class="headerlink" title="拉普拉斯逆变换"></a>拉普拉斯逆变换</h2><p>公式：<br>$$<br>L^{-1}(F(s)) = \frac 1 {2\pi i}\int_{c-j\infty}^{c+j\infty}F(s)e^{st}ds<br>$$<br>但这个公式在我们的学习过程中并不常用，通常可以用我们上面的常用拉普拉斯变换公式来推导出逆变换结果。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傅里叶级数与傅里叶变换公式推导</title>
      <link href="2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/"/>
      <url>2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/</url>
      
        <content type="html"><![CDATA[<p> 首先，傅里叶分析是指把一个周期或非周期函数展开成一个个三角函数的叠加，如果是对其还没有基本概念的，可以看看<a href="https://zhuanlan.zhihu.com/p/19763358">傅里叶分析之掐死教程</a>，这篇文章不依赖数学公式却又十分透彻地讲述了傅里叶分析的基本概念，十分值得一读。但如果先深入探讨其中的数学由来，接下来会讲述详细的数学推导。</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1qi4y1t7JY">傅里叶变换的直观解释</a></p><p>傅里叶变换的基为三角函数，为什么要选三角函数作为傅里叶变换的基，因为三角函数的一大特点是，经过线性时不变系统的操作（加减，倍乘，倍除，积分，求导）后，不改变波形，仅改变相角和幅值。这就给我们提供了一个巨大的好处，那就是在分析线性时不变系统时，仅通过信号的相角和幅值指标就能还原信号，可以忽略基函数波形本身。</p><h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h2><h4 id="三角函数系的正交性"><a href="#三角函数系的正交性" class="headerlink" title="三角函数系的正交性"></a>三角函数系的正交性</h4><p>三角函数系：{1,sinx,cosx,sin2x,cos2x,…,sinnx,cosnx,…}，它由无数个sinnx和cosnx组成，其中n=0,1,2,…….。</p><p>正交性：<br>$$<br>\int^\pi_{-\pi}\sin nx \cos mx dx = 0<br>$$</p><p>$$<br>\int^\pi_{-\pi}\cos nx \cos mx dx = 0，n\neq m<br>$$</p><p>$$<br>\int^\pi_{-\pi}\sin nx \sin mx dx = 0，n\neq m<br>$$</p><p>当向量点乘等于0：<br>$$<br>\vec a \cdot \vec b = 0<br>$$<br>则两个<strong>向量正交</strong>。</p><p>拓展到函数中，两个函数相乘，原本点乘的加和变成取积分，则：<br>$$<br>\int^{x_1}_{x_2}f(x) g(x) dx = 0<br>$$<br>称为两个<strong>函数正交</strong>。</p><p>证明其正交性，可以用积化和差公式：<br>$$<br>\int^\pi_{-\pi}\cos nx \cos mx dx<br>= \frac{1}{2}\int^\pi_{-\pi}[cos(n-m)x+cos(n+m)x]dx =0<br>$$<br>其中n,m为大于0的整数，只有n=m时，积分结果才不等于0，其他情况同理。<br>$$<br>\int^\pi_{-\pi}\sin nx \sin mx dx<br>= \frac{1}{2}\int^\pi_{-\pi}[cos(n-m)x-cos(n+m)x]dx<br>$$</p><h4 id="周期为2π的函数展开"><a href="#周期为2π的函数展开" class="headerlink" title="周期为2π的函数展开"></a>周期为2π的函数展开</h4><p>因此当一个函数f(x)周期为2π时，可以展开成<br>$$<br>f(x) = \sum^\infty_{n=0}a_ncosnx + \sum^\infty_{n=0}b_nsinnx<br>= \frac 1 2 a_0 + \sum^\infty_{n=1}({a_ncosnx + b_nsinnx})<br>$$<br>对两边取积分，由于三角函数的正交性<br>$$<br>\int_{-\pi}^\pi f(x)dx = \frac1 2\int_{-\pi}^\pi a_0dx = \pi a_0<br>$$</p><p>$$<br>a_0 = \frac 1 {\pi}\int_{-\pi}^\pi f(x)dx<br>$$</p><p>原式乘以cos mx 再对两边取积分可得：<br>$$<br>\int^\pi_{-\pi}f(x) \cos mx dx  = \sum^\infty_{n=1}\int^\pi_{-\pi} a_ncosnx cosmx dx<br>= \int^\pi_{-\pi} a_ncos^2 nx  dx = a_n\pi<br>$$</p><p>$$<br>a_n = \frac 1 \pi \int^\pi_{-\pi}f(x) \cos nx dx<br>$$</p><p>同理，两边同乘sinmx再取积分可得：<br>$$<br>b_n = \frac 1 \pi \int^\pi_{-\pi}f(x) \sin nx dx<br>$$</p><h4 id="周期为2L的函数展开"><a href="#周期为2L的函数展开" class="headerlink" title="周期为2L的函数展开"></a>周期为2L的函数展开</h4><p>利用换元的方法，令：$x = \frac \pi L t$ ，即$t = \frac L \pi x$，可得：<br>$$<br>f(t) = \frac {a_0} 2 + \sum^\infty_{n=1}({a_ncos \frac{n\pi}{L}t + b_nsin\frac{n\pi}{L}t})<br>$$</p><p>$$<br>a_0 = \frac 1 {L}\int_{-L}^L f(t)dt<br>$$</p><p>$$<br>a_n = \frac 1 L \int^L_{-L}f(x) \cos nx dx<br>$$</p><p>$$<br>b_n = \frac 1 L \int^L_{-L}f(x) \sin nx dx<br>$$</p><p>在工程中t总是从0开始，周期T=2L，ω = $\frac \pi L = \frac 2\pi T$，此时：<br>$$<br>f(t) = \frac {a_0} 2 + \sum^\infty_{n=1}({a_ncosωt + b_nsinωt})<br>$$</p><p>$$<br>a_0 = \frac 2 {T}\int_{0}^T f(t)dt<br>$$</p><p>$$<br>a_n = \frac 2 T \int^T_{0}f(x) \cos nx dx<br>$$</p><p>$$<br>b_n = \frac 2 T \int^T_{0}f(x) \sin nx dx<br>$$</p><h4 id="傅里叶级数的复数表达形式"><a href="#傅里叶级数的复数表达形式" class="headerlink" title="傅里叶级数的复数表达形式"></a>傅里叶级数的复数表达形式</h4><p>欧拉公式：$ e^{iθ} = cosθ + isinθ$ </p><p>可得：<br>$$<br>cosθ = \frac 1 2 (e^{iθ}+e^{-iθ})<br>$$</p><p>$$<br>sinθ = \frac 1 2 i(e^{iθ}-e^{-iθ})<br>$$</p><p>把这两条式子代入f(t)的式子中可得：<br>$$<br>f(t) = \frac {a_0} 2 + \sum_{n=1}^\infty \frac {a_n-ib_n} 2 e^{in\omega t}+ \sum_{n=1}^\infty \frac {a_n+ib_n} 2 e^{-in\omega t}<br>= \sum_{n=0}^0 \frac {a_0} 2 e^{in\omega t} + \sum_{n=1}^\infty \frac {a_n-ib_n} 2 e^{in\omega t}+ \sum_{n=-1}^{-\infty} \frac {a_{-n}+ib_{-n}} 2 e^{in\omega t} = \sum_{-\infty}^\infty C_n e^{in\omega t}<br>$$<br>当n = 0时，<br>$$<br>C_n = \frac {a_0} 2 = \frac 1 {T}\int_{0}^T f(t)dt<br>$$<br>当n &gt; 0时，<br>$$<br>C_n = \frac {a_n-ib_n} 2 = \frac 1 2 (\frac 2 T \int_0^T f(t)cos{n\omega t} - i\frac 2 T \int_0^Tf(t)sin{n\omega t})<br>= \frac 1 T \int_0^T f(t)(cos{n\omega t} - isin{n\omega t}) dt = \frac 1 T \int_0^T f(t) e^{-in\omega t}dt<br>$$<br>当n &lt; 0时，<br>$$<br>C_n = \frac {a_{-n}+ib_{-n}} 2 = \frac 1 T \int_0^T f(t)(cos{n\omega t} - isin{n\omega t}) dt = \frac 1 T \int_0^T f(t) e^{-in\omega t}dt<br>$$</p><p>因此得出结论，一个周期函数f(t)有f(t)=f(t+T)时：<br>$$<br>f(t) = \sum_{-\infty}^\infty C_n e^{in\omega t}<br>$$</p><p>$$<br>C_n = \frac 1 T \int_0^T f(t) e^{-in\omega t}dt<br>$$</p><p>可以得出，互为相反数的n都可以表示同一个频率，它们幅值相等，相角互为相反数，即共轭，可表示为a+bi和a-bi。它们进行叠加后表示实际的频谱，其幅值为单个的2倍，相角与负频率时计算的频谱的相角相等。</p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>对于$C_n$来说，它的值是一个复数，而nω是一个离散的值，那么可以在代表nω的轴上一个个特定的点上设一个平面，这个平面是一个复平面，它的长度和方向代表$C_n$：</p><img src="/2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/1.png" class=""><p>在工程上，横坐标为时间的波形图称为时域表达，而这幅图显示的是在各种不同频率下的值，称为频域表达，也是波形图的频谱，这就是从不同的角度看时间，每一种波形都对应一种频谱。不过很多时候的频谱都不是这种复平面三维的，我们会把$C_n$的幅度即模单独拿出来，就可以表示这个函数在不同频率下的强度了。</p><img src="/2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/2.png" class=""><p>当T增大时，ω数值减小，nω之间就挨得越近。T趋于无穷时会形成一条连续的曲线：</p><img src="/2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/3.png" class=""><p>由：<br>$$<br>f(t) = \sum_{-\infty}^\infty C_n e^{in\omega t}<br>$$</p><p>$$<br>C_n = \frac 1 T \int_0^T f(t) e^{-in\omega t}dt<br>$$</p><p>得到：<br>$$<br>f_T(t) = \sum_{n=-\infty}^{\infty}\frac 1 T \int_{-\frac T 2}^{\frac T 2} f_T(t) e^{-in\omega_0 t}dt e^{inω_0t}<br>$$</p><p>$$<br>f_T(t) = \sum_{n=-\infty}^{\infty}\frac {\Deltaω} {2\pi} \int_{-\frac T 2}^{\frac T 2} f_T(t) e^{-in\omega_0 t}dt e^{inω_0t}<br>$$</p><p>当$T \rightarrow \infty$：<br>$$<br>f(t) = \frac {1} {2\pi}  \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} f(t) e^{-i\omega t}dt e^{inωt}d\omega<br>$$<br>因此我们把中间的公式称为**傅里叶变换(FT)**：<br>$$<br>F(ω) = \int_{-\infty}^{\infty} f(t) e^{-i\omega t}dt<br>$$<br>$$<br>F(ω) = \int_{-\infty}^{\infty}f(t)cos(ωt)dt-i\int_{-\infty}^{\infty}f(t)sin(ωt)dt<br>$$</p><p>通过这个函数可以表示在任何频率的情况下的三角函数的波形的振幅，这通常是一个复数a+bi，实际上用$\sqrt{a^2+b^2}$表示其振幅（实际振幅为2倍），即幅值图，同理还有相角图。其中实数部分代表cos，虚数部分代表-sin。而负频率没有现实意义，其振幅为正频率的共轭a-bi，只是为了在数学上的计算便利。</p><img src="/2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/4.png" class=""><img src="/2021/02/02/fu-li-xie-ji-shu-yu-fu-li-xie-bian-huan-gong-shi-tui-dao/5.png" class=""><p>外面套的公式称为**傅里叶变换的逆变换(IFT)**：<br>$$<br>f(t) = \frac {1} {2\pi}  \int_{-\infty}^{\infty} F(ω) e^{iωt}d\omega<br>$$<br>傅里叶变换的所有内容讲解完毕了，傅里叶变换其实是一种特殊的拉普拉斯变换(s=iω)，遵循拉普拉斯变换的所有性质。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、<strong>傅里叶变换得到的是频率密度函数，它的纵坐标是幅值密度。而傅里叶级数的纵坐标是真实的幅值。</strong></p><p>2、连续周期函数的<strong>傅立叶变换</strong>是冲激函数组成的，可以用三角函数正交性证明。</p><p>3、在一个以2T为周期内f(X)连续或只有有限个第一类间断点，附f（x）单调或可划分成有限个单调区间，则F（x）以2T为周期的傅里叶级数收敛，和函数S（x）也是以2T为周期的周期函数，且在这些间断点上，函数是有限值；在一个周期内具有有限个极值点；绝对可积。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于pycharm中第三方库安装失败的解决方法</title>
      <link href="2021/01/30/guan-yu-pycharm-zhong-di-san-fang-ku-an-zhuang-shi-bai-de-jie-jue-fang-fa/"/>
      <url>2021/01/30/guan-yu-pycharm-zhong-di-san-fang-ku-an-zhuang-shi-bai-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<p> 使用pycharm图形界面安装第三方库失败，遇到下面的错误：</p><p>pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=’files.pythonhosted.org’, port=443): Read timed out.</p><p>解决方法：在评议charm终端中使用命令安装，并直接更换国内安装源进行安装。</p><ul><li>pip国内的一些镜像</li></ul><p>  阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>  中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>  豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>  清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>  中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><ul><li>使用时pip的时候在后面加上-i参数，指定pip源<br>eg: pip install scrapy -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul><p><strong>永久修改</strong>：</p><p>windows:</p><p>win+R 打开用户目录%HOMEPATH%，在此目录下创建 pip 文件夹，在 pip 目录下创建 pip.ini 文件, 内容如下</p><pre class=" language-a"><code class="language-a">[global]timeout = 6000index-url = https://pypi.tuna.tsinghua.edu.cn/simpletrusted-host = pypi.tuna.tsinghua.edu.cn</code></pre>]]></content>
      
      
      <categories>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之k近邻算法</title>
      <link href="2021/01/24/ji-qi-xue-xi-zhi-k-jin-lin-suan-fa/"/>
      <url>2021/01/24/ji-qi-xue-xi-zhi-k-jin-lin-suan-fa/</url>
      
        <content type="html"><![CDATA[<p> 本文的代码基于书本《机器学习实战》</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>k-近邻算法采用测量不同特征值之间距离的方法进行分类。工作原理是：存在一个样本数据集合，称作训练样本集，样本中每个数据都存在标签。输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，算法提取样本集中特征最相似数据（最近邻）的分类标签，我们只选择样本数据集中前k个最相似的数据，使用的是欧式距离的计算公式，通常k是不大于20的整数，选择k个最相似数据中出现次数最多的分类作为新数据的分类，这就是k-近邻算法。</p><h2 id="算法简单示例"><a href="#算法简单示例" class="headerlink" title="算法简单示例"></a>算法简单示例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np                        <span class="token comment" spellcheck="true">#科学计算包</span><span class="token keyword">import</span> operator                           <span class="token comment" spellcheck="true">#运算符模块</span><span class="token keyword">def</span> <span class="token function">createDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true">#创建四组数据</span>    <span class="token comment" spellcheck="true">#四组二维特征</span>    group <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#四组特征的标签</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span><span class="token string">'动作片'</span><span class="token punctuation">,</span><span class="token string">'动作片'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> group<span class="token punctuation">,</span> labels<span class="token keyword">def</span> <span class="token function">classify0</span><span class="token punctuation">(</span>inX<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#numpy函数shape[0]返回dataSet的行数</span>    dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#在列向量方向上重复inX共1次(横向)，行向量方向上重复inX共dataSetSize次(纵向)</span>    diffMat <span class="token operator">=</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataSet    <span class="token comment" spellcheck="true">#二维特征相减后平方</span>    sqDiffMat <span class="token operator">=</span> diffMat<span class="token operator">**</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">#sum()所有元素相加，sum(0)列相加，sum(1)行相加</span>    sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#开方，计算出距离</span>    distances <span class="token operator">=</span> sqDistances<span class="token operator">**</span><span class="token number">0.5</span>    <span class="token comment" spellcheck="true">#返回distances中元素从小到大排序后的索引值</span>    sortedDistIndices <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定一个记录类别次数的字典</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#取出前k个元素的类别</span>        voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#dict.get(key,default=None),字典的get()方法,返回指定键的值,如果值不在字典中返回默认值。</span>        <span class="token comment" spellcheck="true">#计算类别次数</span>        classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#python3中用items()替换python2中的iteritems()</span>    <span class="token comment" spellcheck="true">#key=operator.itemgetter(1)根据字典的值进行排序</span>    <span class="token comment" spellcheck="true">#key=operator.itemgetter(0)根据字典的键进行排序</span>    <span class="token comment" spellcheck="true">#reverse降序排序字典，这是一个列表，包含元组</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回次数最多的类别,即所要分类的类别</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建数据集</span>    group<span class="token punctuation">,</span> labels <span class="token operator">=</span> createDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#测试集</span>    test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#kNN分类</span>    test_class <span class="token operator">=</span> classify0<span class="token punctuation">(</span>test<span class="token punctuation">,</span> group<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打印分类结果</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test_class<span class="token punctuation">)</span></code></pre><h2 id="基于文件处理的算法（改进约会网站的配对效果）"><a href="#基于文件处理的算法（改进约会网站的配对效果）" class="headerlink" title="基于文件处理的算法（改进约会网站的配对效果）"></a>基于文件处理的算法（改进约会网站的配对效果）</h2><p>文件前几行：</p><pre class=" language-txt"><code class="language-txt">40920    8.326976    0.953952    largeDoses14488    7.153469    1.673904    smallDoses26052    1.441871    0.805124    didntLike75136    13.147394    0.428964    didntLike38344    1.669788    0.134296    didntLike72993    10.141740    1.032955    didntLike35948    6.830792    1.213192    largeDoses42666    13.276369    0.543880    largeDoses67497    8.631577    0.749278    didntLike35483    12.273169    1.508053    largeDoses50242    3.723498    0.831917    didntLike63275    8.385879    1.669485    didntLike5569    4.875435    0.728658    smallDoses51052    4.680098    0.625224    didntLike77372    15.299570    0.331351    didntLike43673    1.889461    0.191283    didntLike61364    7.516754    1.269164    didntLike69673    14.239195    0.261333    didntLike15669    0.000000    1.250185    smallDoses</code></pre><p>导入的包：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">import</span> FontProperties<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>lines <span class="token keyword">as</span> mlines<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> operator</code></pre><p>文件处理：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">file2matrix</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#打开文件,此次应指定编码</span>    fr <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取文件所有内容</span>    arrayOLines <span class="token operator">=</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#针对有BOM的UTF-8文本，应该去掉BOM，否则后面会引发错误。</span>    arrayOLines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>arrayOLines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'\ufeff'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#得到文件行数</span>    numberOfLines <span class="token operator">=</span> len<span class="token punctuation">(</span>arrayOLines<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回的NumPy矩阵,解析完成的数据:numberOfLines行,3列</span>    returnMat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>numberOfLines<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回的分类标签向量</span>    classLabelVector <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#行的索引值</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> arrayOLines<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#s.strip(rm)，当rm空时,默认删除空白符(包括'\n','\r','\t',' ')</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#使用s.split(str="",num=string,cout(str))将字符串根据'\t'分隔符进行切片。</span>        listFromLine <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将数据前三列提取出来,存放到returnMat的NumPy矩阵中,也就是特征矩阵</span>        returnMat<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> listFromLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#根据文本中标记的喜欢的程度进行分类,1代表不喜欢,2代表魅力一般,3代表极具魅力   </span>        <span class="token comment" spellcheck="true"># 对于datingTestSet2.txt  最后的标签是已经经过处理的 标签已经改为了1, 2, 3</span>        <span class="token keyword">if</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'didntLike'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'smallDoses'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'largeDoses'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> returnMat<span class="token punctuation">,</span> classLabelVector</code></pre><p>分类函数：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""    inX - 用于分类的数据(测试集)    dataSet - 用于训练的数据(训练集)    labes - 分类标签    k - kNN算法参数,选择距离最小的k个点    sortedClassCount[0][0] - 分类结果"""</span><span class="token keyword">def</span> <span class="token function">classify0</span><span class="token punctuation">(</span>inX<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#numpy函数shape[0]返回dataSet的行数</span>    dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#在列向量方向上重复inX共1次(横向)，行向量方向上重复inX共dataSetSize次(纵向)</span>    diffMat <span class="token operator">=</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataSet    <span class="token comment" spellcheck="true">#二维特征相减后平方</span>    sqDiffMat <span class="token operator">=</span> diffMat<span class="token operator">**</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">#sum()所有元素相加，sum(0)列相加，sum(1)行相加</span>    sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#开方，计算出距离</span>    distances <span class="token operator">=</span> sqDistances<span class="token operator">**</span><span class="token number">0.5</span>    <span class="token comment" spellcheck="true">#返回distances中元素从小到大排序后的索引值</span>    sortedDistIndices <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定一个记录类别次数的字典</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#取出前k个元素的类别</span>        voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#dict.get(key,default=None),字典的get()方法,返回指定键的值,如果值不在字典中返回默认值。</span>        <span class="token comment" spellcheck="true">#计算类别次数</span>        classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#python3中用items()替换python2中的iteritems()</span>    <span class="token comment" spellcheck="true">#key=operator.itemgetter(1)根据字典的值进行排序</span>    <span class="token comment" spellcheck="true">#key=operator.itemgetter(0)根据字典的键进行排序</span>    <span class="token comment" spellcheck="true">#reverse降序排序字典，这是一个列表，包含元组</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回次数最多的类别,即所要分类的类别</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>归一化函数，把数值限制在0到1的范围内，防止数值较大的属性对计算结果的影响大：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">autoNorm</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获得数据的最小值</span>    minVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    maxVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#最大值和最小值的范围</span>    ranges <span class="token operator">=</span> maxVals <span class="token operator">-</span> minVals    <span class="token comment" spellcheck="true">#shape(dataSet)返回dataSet的矩阵行列数</span>    normDataSet <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回dataSet的行数</span>    m <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#原始值减去最小值</span>    normDataSet <span class="token operator">=</span> dataSet <span class="token operator">-</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>minVals<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#除以最大和最小值的差,得到归一化数据</span>    normDataSet <span class="token operator">=</span> normDataSet <span class="token operator">/</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>ranges<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回归一化数据结果,数据范围,最小值</span>    <span class="token keyword">return</span> normDataSet<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals</code></pre><p>分类器测试函数，取百分之十的数据作为测试数据，检测分类器的正确性</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">datingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#打开的文件名</span>    filename <span class="token operator">=</span> <span class="token string">"datingTestSet.txt"</span>    <span class="token comment" spellcheck="true">#将返回的特征矩阵和分类向量分别存储到datingDataMat和datingLabels中</span>    datingDataMat<span class="token punctuation">,</span> datingLabels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取所有数据的百分之十</span>    hoRatio <span class="token operator">=</span> <span class="token number">0.10</span>    <span class="token comment" spellcheck="true">#数据归一化,返回归一化后的矩阵,数据范围,数据最小值</span>    normMat<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获得normMat的行数</span>    m <span class="token operator">=</span> normMat<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#百分之十的测试数据的个数</span>    numTestVecs <span class="token operator">=</span> int<span class="token punctuation">(</span>m <span class="token operator">*</span> hoRatio<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#分类错误计数</span>    errorCount <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#前numTestVecs个数据作为测试集,后m-numTestVecs个数据作为训练集</span>        classifierResult <span class="token operator">=</span> classify0<span class="token punctuation">(</span>normMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> normMat<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             datingLabels<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分类结果:%s\t真实类别:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> classifierResult <span class="token operator">!=</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            errorCount <span class="token operator">+=</span> <span class="token number">1.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误率:%f%%"</span> <span class="token operator">%</span><span class="token punctuation">(</span>errorCount<span class="token operator">/</span>float<span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>分类结果：</p><pre class=" language-a"><code class="language-a">--snip--分类结果:3    真实类别:3[(3, 4)]分类结果:3    真实类别:3[(2, 2), (3, 1), (1, 1)]分类结果:2    真实类别:2[(2, 2), (1, 2)]分类结果:2    真实类别:1[(1, 2), (3, 2)]分类结果:1    真实类别:1错误率:4.000000%</code></pre><p>绘图函数，可视化数据：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">showdatas</span><span class="token punctuation">(</span>datingDataMat<span class="token punctuation">,</span> datingLabels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#设置汉字格式</span>    font <span class="token operator">=</span> FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span>r<span class="token string">"c:\windows\fonts\simhei.ttf"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">##需要查看自己的电脑是否会包含该字体</span>    <span class="token comment" spellcheck="true">#将fig画布分隔成1行1列,不共享x轴和y轴,fig画布的大小为(13,8)</span>    <span class="token comment" spellcheck="true">#当nrow=2,nclos=2时,代表fig画布被分为四个区域,axs[0][0]表示第一行第一个区域</span>    fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>sharex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    numberOfLabels <span class="token operator">=</span> len<span class="token punctuation">(</span>datingLabels<span class="token punctuation">)</span>    LabelsColors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> datingLabels<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            LabelsColors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            LabelsColors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            LabelsColors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#画出散点图,以datingDataMat矩阵的第一(飞行常客例程)、第二列(玩游戏)数据画散点数据,散点大小为15,透明度为0.5</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span>LabelsColors<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置标题,x轴label,y轴label</span>    axs0_title_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>u<span class="token string">'每年获得的飞行常客里程数与玩视频游戏所消耗时间占比'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    axs0_xlabel_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span>u<span class="token string">'每年获得的飞行常客里程数'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    axs0_ylabel_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>u<span class="token string">'玩视频游戏所消耗时间占比'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs0_title_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs0_xlabel_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs0_ylabel_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#画出散点图,以datingDataMat矩阵的第一(飞行常客例程)、第三列(冰激凌)数据画散点数据,散点大小为15,透明度为0.5</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span>LabelsColors<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置标题,x轴label,y轴label</span>    axs1_title_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>u<span class="token string">'每年获得的飞行常客里程数与每周消费的冰激淋公升数'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    axs1_xlabel_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span>u<span class="token string">'每年获得的飞行常客里程数'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    axs1_ylabel_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>u<span class="token string">'每周消费的冰激淋公升数'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs1_title_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs1_xlabel_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs1_ylabel_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#画出散点图,以datingDataMat矩阵的第二(玩游戏)、第三列(冰激凌)数据画散点数据,散点大小为15,透明度为0.5</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span>LabelsColors<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置标题,x轴label,y轴label</span>    axs2_title_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>u<span class="token string">'玩视频游戏所消耗时间占比与每周消费的冰激淋公升数'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    axs2_xlabel_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span>u<span class="token string">'玩视频游戏所消耗时间占比'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    axs2_ylabel_text <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span>u<span class="token string">'每周消费的冰激淋公升数'</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs2_title_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs2_xlabel_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>axs2_ylabel_text<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#设置图例</span>    didntLike <span class="token operator">=</span> mlines<span class="token punctuation">.</span>Line2D<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span>                      markersize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'didntLike'</span><span class="token punctuation">)</span>    smallDoses <span class="token operator">=</span> mlines<span class="token punctuation">.</span>Line2D<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span>                      markersize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'smallDoses'</span><span class="token punctuation">)</span>    largeDoses <span class="token operator">=</span> mlines<span class="token punctuation">.</span>Line2D<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span>                      markersize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'largeDoses'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#添加图例</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>didntLike<span class="token punctuation">,</span>smallDoses<span class="token punctuation">,</span>largeDoses<span class="token punctuation">]</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>didntLike<span class="token punctuation">,</span>smallDoses<span class="token punctuation">,</span>largeDoses<span class="token punctuation">]</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>didntLike<span class="token punctuation">,</span>smallDoses<span class="token punctuation">,</span>largeDoses<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#显示图片</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>图片效果：</p><img src="/2021/01/24/ji-qi-xue-xi-zhi-k-jin-lin-suan-fa/1.png" class=""><p>结果预测程序：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">classifyPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#输出结果</span>    resultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'讨厌'</span><span class="token punctuation">,</span><span class="token string">'有些喜欢'</span><span class="token punctuation">,</span><span class="token string">'非常喜欢'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#三维特征用户输入</span>    precentTats <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"玩视频游戏所耗时间百分比:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ffMiles <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"每年获得的飞行常客里程数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    iceCream <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"每周消费的冰激淋公升数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开的文件名</span>    filename <span class="token operator">=</span> <span class="token string">"datingTestSet.txt"</span>    <span class="token comment" spellcheck="true">#打开并处理数据</span>    datingDataMat<span class="token punctuation">,</span> datingLabels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#训练集归一化</span>    normMat<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#生成NumPy数组,测试集</span>    inArr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>ffMiles<span class="token punctuation">,</span> precentTats<span class="token punctuation">,</span> iceCream<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#测试集归一化</span>    norminArr <span class="token operator">=</span> <span class="token punctuation">(</span>inArr <span class="token operator">-</span> minVals<span class="token punctuation">)</span> <span class="token operator">/</span> ranges    <span class="token comment" spellcheck="true">#返回分类结果</span>    classifierResult <span class="token operator">=</span> classify0<span class="token punctuation">(</span>norminArr<span class="token punctuation">,</span> normMat<span class="token punctuation">,</span> datingLabels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打印结果</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你可能%s这个人"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>resultList<span class="token punctuation">[</span>classifierResult<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-a"><code class="language-a">玩视频游戏所耗时间百分比:11.11每年获得的飞行常客里程数:10000每周消费的冰激淋公升数:1[(3, 2), (2, 1)]你可能非常喜欢这个人</code></pre><h2 id="示例：手写识别系统"><a href="#示例：手写识别系统" class="headerlink" title="示例：手写识别系统"></a>示例：手写识别系统</h2><p>实际图像储存在两个文件夹中，trainingDigits文件夹有约2000个数据文件，testDigits约200个。简单起见，数字已经处理成文本格式。数据文件示例：</p><pre class=" language-a"><code class="language-acode></pre><p>导入包：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> operator<span class="token keyword">from</span> os <span class="token keyword">import</span> listdir</code></pre><p>为了使用前面的分类器，需要将这个32*32数据处理为一个1*1024向量：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">img2vector</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建1x1024零向量</span>    returnVect <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开文件</span>    fr <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#按行读取</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#读一行数据</span>        lineStr <span class="token operator">=</span> fr<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#每一行的前32个元素依次添加到returnVect中</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            returnVect<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>lineStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回转换后的1x1024向量</span>    <span class="token keyword">return</span> returnVect</code></pre><p>同样把前面的分类函数拿过来后编写测试函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">handwritingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#测试集的Labels</span>    hwLabels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#返回trainingDigits目录下的文件名</span>    trainingFileList <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token string">'trainingDigits'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回文件夹下文件的个数</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>trainingFileList<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#初始化训练的Mat矩阵,测试集</span>    trainingMat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从文件名中解析出训练集的类别</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获得文件的名字</span>        fileNameStr <span class="token operator">=</span> trainingFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#获得分类的数字</span>        classNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>fileName87Str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将获得的类别添加到hwLabels中</span>        hwLabels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classNumber<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将每一个文件的1x1024数据存储到trainingMat矩阵中</span>        trainingMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">'trainingDigits/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fileNameStr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回testDigits目录下的文件名</span>    testFileList <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token string">'testDigits'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#错误检测计数</span>    errorCount <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true">#测试数据的数量</span>    mTest <span class="token operator">=</span> len<span class="token punctuation">(</span>testFileList<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从文件中解析出测试集的类别并进行分类测试</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获得文件的名字</span>        fileNameStr <span class="token operator">=</span> testFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#获得分类的数字</span>        classNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获得测试集的1x1024向量,用于训练</span>        vectorUnderTest <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">'testDigits/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fileNameStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获得预测结果</span>        classifierResult <span class="token operator">=</span> classify0<span class="token punctuation">(</span>vectorUnderTest<span class="token punctuation">,</span> trainingMat<span class="token punctuation">,</span> hwLabels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分类返回结果为%d\t真实结果为%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span> classNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classifierResult <span class="token operator">!=</span> classNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>            errorCount <span class="token operator">+=</span> <span class="token number">1.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共错了%d个数据\n错误率为%f%%"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>errorCount<span class="token punctuation">,</span> errorCount<span class="token operator">/</span>mTest<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-a"><code class="language-a">--snip--分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9分类返回结果为9    真实结果为9总共错了10个数据错误率为1.0571%</code></pre><h2 id="使用第三方库sklearn的代码"><a href="#使用第三方库sklearn的代码" class="headerlink" title="使用第三方库sklearn的代码"></a>使用第三方库sklearn的代码</h2><p>新导入的包：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier <span class="token keyword">as</span> kNN</code></pre><p>测试函数代码修改：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">handwritingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#测试集的Labels</span>    hwLabels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#返回trainingDigits目录下的文件名</span>    trainingFileList <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token string">'trainingDigits'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回文件夹下文件的个数</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>trainingFileList<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#初始化训练的Mat矩阵,测试集</span>    trainingMat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从文件名中解析出训练集的类别</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获得文件的名字</span>        fileNameStr <span class="token operator">=</span> trainingFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#获得分类的数字</span>        classNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将获得的类别添加到hwLabels中</span>        hwLabels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classNumber<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将每一个文件的1x1024数据存储到trainingMat矩阵中</span>        trainingMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">'trainingDigits/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fileNameStr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#构建kNN分类器</span>    neigh <span class="token operator">=</span> kNN<span class="token punctuation">(</span>n_neighbors <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> algorithm <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#拟合模型, trainingMat为训练矩阵,hwLabels为对应的标签</span>    neigh<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trainingMat<span class="token punctuation">,</span> hwLabels<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回testDigits目录下的文件列表</span>    testFileList <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token string">'testDigits'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#错误检测计数</span>    errorCount <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true">#测试数据的数量</span>    mTest <span class="token operator">=</span> len<span class="token punctuation">(</span>testFileList<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从文件中解析出测试集的类别并进行分类测试</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获得文件的名字</span>        fileNameStr <span class="token operator">=</span> testFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#获得分类的数字</span>        classNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获得测试集的1x1024向量,用于训练</span>        vectorUnderTest <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">'testDigits/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fileNameStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获得预测结果</span>        <span class="token comment" spellcheck="true"># classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3)</span>        classifierResult <span class="token operator">=</span> neigh<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>vectorUnderTest<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分类返回结果为%d\t真实结果为%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span> classNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classifierResult <span class="token operator">!=</span> classNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>            errorCount <span class="token operator">+=</span> <span class="token number">1.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共错了%d个数据\n错误率为%f%%"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>errorCount<span class="token punctuation">,</span> errorCount<span class="token operator">/</span>mTest <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>函数说明：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">sklearn</span><span class="token punctuation">.</span>neighbors<span class="token punctuation">.</span>KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token string">'uniform'</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> leaf_size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">'minkowski'</span><span class="token punctuation">,</span> metric_params<span class="token operator">=</span>None<span class="token punctuation">,</span> n_jobs<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre><ul><li><strong>n_neighbors</strong>：默认为5，就是k-NN的k的值，选取最近的k个点。</li><li><strong>weights</strong>：默认是uniform，参数可以是uniform、distance，也可以是用户自己定义的函数。uniform是均等的权重，就说所有的邻近点的权重都是相等的。distance是不均等的权重，距离近的点比距离远的点的影响大。用户自定义的函数，接收距离的数组，返回一组维数相同的权重。</li><li><strong>algorithm</strong>：快速k近邻搜索算法，默认参数为auto，可以理解为算法自己决定合适的搜索算法。除此之外，用户也可以自己指定搜索算法ball_tree、kd_tree、brute方法进行搜索，brute是蛮力搜索，也就是线性扫描，当训练集很大时，计算非常耗时。kd_tree，构造kd树存储数据以便对其进行快速检索的树形数据结构，kd树也就是数据结构中的二叉树。以中值切分构造的树，每个结点是一个超矩形，在维数小于20时效率高。ball tree是为了克服kd树高纬失效而发明的，其构造过程是以质心C和半径r分割样本空间，每个节点是一个超球体。</li><li><strong>leaf_size</strong>：默认是30，这个是构造的kd树和ball树的大小。这个值的设置会影响树构建的速度和搜索速度，同样也影响着存储树所需的内存大小。需要根据问题的性质选择最优的大小。</li><li><strong>metric</strong>：用于距离度量，默认度量是minkowski，也就是p=2的欧氏距离(欧几里德度量)。</li><li><strong>p</strong>：距离度量公式。在上小结，我们使用欧氏距离公式进行距离度量。除此之外，还有其他的度量方法，例如曼哈顿距离。这个参数默认为2，也就是默认使用欧式距离公式进行距离度量。也可以设置为1，使用曼哈顿距离公式进行距离度量。</li><li><strong>metric_params</strong>：距离公式的其他关键参数，这个可以不管，使用默认的None即可。</li><li><strong>n_jobs</strong>：并行处理设置。默认为1，临近点搜索并行工作数。如果为-1，那么CPU的所有cores都用于并行工作。</li></ul><table><thead><tr><th><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.fit"><code>fit</code></a>（X，y）</th><th>从训练数据集中拟合k最近邻分类器。</th></tr></thead><tbody><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.get_params"><code>get_params</code></a>（[deep]）</td><td>获取此估计量的参数。</td></tr><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.kneighbors"><code>kneighbors</code></a>（[X，n_neighbors，return_distance]）</td><td>查找点的K邻居。</td></tr><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"><code>kneighbors_graph</code></a>（[X，n_neighbors，mode]）</td><td>计算X中点的k邻居的（加权）图</td></tr><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.predict"><code>predict</code></a>（X）</td><td>预测提供的数据的类标签。</td></tr><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.predict_proba"><code>predict_proba</code></a>（X）</td><td>测试数据X的返回概率估计。</td></tr><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.score"><code>score</code></a>（X，y [，sample_weight]）</td><td>返回给定测试数据和标签上的平均准确度。</td></tr><tr><td><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier.set_params"><code>set_params</code></a>（**params）</td><td>设置此估算器的参数。</td></tr></tbody></table><p>具体用法可查看<a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html</a></p><p>运行结果与我们之前自己写的算法差不多，但运行速度明显快了不少。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> kNN算法的优缺点</p><p><strong>优点</strong></p><ul><li>简单好用，容易理解，精度高，理论成熟，既可以用来做分类也可以用来做回归；</li><li>可用于数值型数据和离散型数据；</li><li>训练时间复杂度为O(n)；无数据输入假定；</li><li>对异常值不敏感。</li></ul><p><strong>缺点：</strong></p><ul><li>计算复杂性高；空间复杂性高；</li><li>样本不平衡问题（即有些类别的样本数量很多，而其它样本的数量很少）；</li><li>一般数值很大的时候不用这个，计算量太大。但是单个样本又不能太少，否则容易发生误分。</li><li>最大的缺点是无法给出数据的内在含义。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown数学公式表示法</title>
      <link href="2021/01/23/markdown-shu-xue-gong-shi-biao-shi-fa/"/>
      <url>2021/01/23/markdown-shu-xue-gong-shi-biao-shi-fa/</url>
      
        <content type="html"><![CDATA[<p> 查看更多请前往<a href="https://katex.org/docs/supported.html">https://katex.org/docs/supported.html</a></p><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">α</td><td align="center">\alpha</td><td align="center">β</td><td align="center">\beta</td></tr><tr><td align="center">γ</td><td align="center">\gamma</td><td align="center">δ</td><td align="center">\delta</td></tr><tr><td align="center">ε</td><td align="center">\epsilon</td><td align="center">ζ</td><td align="center">\zeta</td></tr><tr><td align="center">η</td><td align="center">\eta</td><td align="center">θ</td><td align="center">\theta</td></tr><tr><td align="center">ι</td><td align="center">\iota</td><td align="center">κ</td><td align="center">\kappa</td></tr><tr><td align="center">λ</td><td align="center">\lambda</td><td align="center">μ</td><td align="center">\mu</td></tr><tr><td align="center">ν</td><td align="center">\nu</td><td align="center">ξ</td><td align="center">\xi</td></tr><tr><td align="center">π</td><td align="center">\pi</td><td align="center">ρ</td><td align="center">\rho</td></tr><tr><td align="center">σ</td><td align="center">\sigma</td><td align="center">τ</td><td align="center">\tau</td></tr><tr><td align="center">υ</td><td align="center">\upsilon</td><td align="center">φ</td><td align="center">\phi</td></tr><tr><td align="center">χ</td><td align="center">\chi</td><td align="center">ψ</td><td align="center">\psi</td></tr><tr><td align="center">ω</td><td align="center">\omega</td><td align="center">Δ</td><td align="center">\Delta</td></tr></tbody></table><h3 id="特殊符号："><a href="#特殊符号：" class="headerlink" title="特殊符号："></a>特殊符号：</h3><table><thead><tr><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">∞</td><td align="center">\infty</td><td align="center">∑</td><td align="center">\sum</td></tr><tr><td align="center">∪</td><td align="center">\cup</td><td align="center">∏</td><td align="center">\prod</td></tr><tr><td align="center">∩</td><td align="center">\cap</td><td align="center">±</td><td align="center">\pm</td></tr><tr><td align="center">⊂</td><td align="center">\subset</td><td align="center">×</td><td align="center">\times</td></tr><tr><td align="center">⊃</td><td align="center">\supset</td><td align="center">÷</td><td align="center">\div</td></tr><tr><td align="center">⊆</td><td align="center">\subseteq</td><td align="center">∣</td><td align="center">\mid</td></tr><tr><td align="center">∈</td><td align="center">\in</td><td align="center">≠</td><td align="center">\neq</td></tr><tr><td align="center">∠</td><td align="center">\angle</td><td align="center">≤</td><td align="center">\leq</td></tr><tr><td align="center">∵</td><td align="center">\because</td><td align="center">≥</td><td align="center">\geq</td></tr><tr><td align="center">∴</td><td align="center">\therefore</td><td align="center">∅</td><td align="center">\emptyset</td></tr><tr><td align="center">∇</td><td align="center">\nabla</td><td align="center">⋁</td><td align="center">\bigvee</td></tr><tr><td align="center">⊥</td><td align="center">\bot</td><td align="center">⋀</td><td align="center">\bigwedge</td></tr><tr><td align="center">⊇</td><td align="center">\supseteq</td><td align="center">⨄</td><td align="center">\biguplus</td></tr><tr><td align="center">∀</td><td align="center">\forall</td><td align="center">⨆</td><td align="center">\bigsqcup</td></tr><tr><td align="center">∃</td><td align="center">\exists</td><td align="center">∫</td><td align="center">\int</td></tr><tr><td align="center">≠</td><td align="center">\not=</td><td align="center">∬</td><td align="center">\iint</td></tr><tr><td align="center">⊄</td><td align="center">\not\subset</td><td align="center">∭</td><td align="center">\iiint</td></tr><tr><td align="center">↑</td><td align="center">\uparrow</td><td align="center">∮</td><td align="center">\oint</td></tr><tr><td align="center">↓</td><td align="center">\downarrow</td><td align="center">y^</td><td align="center">\hat{y}</td></tr><tr><td align="center">→</td><td align="center">\rightarrow</td><td align="center">⨀</td><td align="center">\bigodot</td></tr><tr><td align="center">←</td><td align="center">\leftarrow</td><td align="center">⨂</td><td align="center">\bigotimes</td></tr><tr><td align="center">≈</td><td align="center">\approx</td><td align="center">⨁</td><td align="center">\bigoplus</td></tr><tr><td align="center">≡</td><td align="center">\equiv</td><td align="center">⇒</td><td align="center">\leftarrow</td></tr><tr><td align="center">∐</td><td align="center">\coprod</td><td align="center">⇐</td><td align="center">\Leftarrow</td></tr><tr><td align="center"><img src="https://www.zhihu.com/equation?tex=%5Cmathcal%7BL%7D"></td><td align="center">\mathcal{L}</td><td align="center"><img src="https://www.zhihu.com/equation?tex=%5Cmathscr%7BL%7D"></td><td align="center">\mathscr{L}</td></tr></tbody></table><ul><li>上标：^   下标： _             例子：C_n^2</li><li>矢量：\vec a ，\overrightarrow{xy}</li><li>分式：\frac{公式1}{公式2}</li><li>根式：\sqrt{x}{y}</li><li>特殊函数：\sin x，\ln x，\max(A,B,C)，\log</li><li>极限：\lim_{x \to 0}</li><li>平均数：\bar{y}</li><li>微分表示：\dot{}，\ddot{}，\dddot{}，\ddddot{}</li><li>注意：数学公式用$内容$表示的话不会换行，用$$内容$$表示会换行。</li></ul><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><ol><li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li><li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li><li>大空格，符号<code>\</code>，如：$x \  y$</li><li>中空格，符号<code>\:</code>，如：$x : y$</li><li>小空格，符号<code>\,</code>，如：$x , y$</li><li>没有空格，符号``，如：$xy$</li><li>紧贴，符号<code>\!</code>，如：$x ! y$</li></ol><h2 id="矩阵与块"><a href="#矩阵与块" class="headerlink" title="矩阵与块"></a>矩阵与块</h2><img src="/2021/01/23/markdown-shu-xue-gong-shi-biao-shi-fa/1.png" class="">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记（一）</title>
      <link href="2021/01/21/ji-qi-xue-xi-bi-ji-yi/"/>
      <url>2021/01/21/ji-qi-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>机器学习，就是让计算机拥有想人一样的学习能力的技术，从堆积如山的数据中寻找有用知识的数据挖掘技术，如从视频库中寻找自己喜欢的视频资料，根据用户的购买记录向用户推荐其他相关商品。</p><p>根据处理数据种类的不同，可以分为监督学习，无监督学习，强化学习几种类型。监督学习是指既给数据，又给答案，对这种规律进行概括，从而对没学习过的数据也能做出正确解答，让计算机获得这种泛化能力是监督学习的目标。非监督学习是指没有明确答案，只有数据，学习目标不必十分明确，计算机自己提取其中规律的过程。这一类机器学习的典型任务有聚类、异常检测等。强化学习与监督学习类似，不设置答案，自己对预测的结果进行评估，往往认为是人类主要的学习方式之一，在机器人自动控制，游戏中的人工智能，市场战略的最优化等方面有广泛运用，强化学习中经常用到回归，分类，聚类，降维等机器学习算法。</p><h2 id="机器学习任务的例子"><a href="#机器学习任务的例子" class="headerlink" title="机器学习任务的例子"></a>机器学习任务的例子</h2><p><strong>回归</strong>是指把实函数在样本点附近加以近似的有监督的函数近似问题，作为训练集的输入输出样本是已知的，需要获得一个函数y = f（x）使得无论什么问题输出的答案于真实的函数f对应，获得这个函数是监督学习的最终目标。<strong>分类</strong>是指对于特定模式进行识别的有监督的模式识别问题，对d维实向量x为输入样本，所有的输出样本，可以划分为c个类别的问题进行说明。<strong>异常检测</strong>是指寻找输入样本中包含的异常数据的问题。<strong>聚类</strong>属于无监督学习的一种，只给出输入样本，判断各个样本分别属于哪个簇，相同簇之间具有相同性质，如何判断样品直接相似度是很重要的课题。降维是指从高纬度的数据中提取关键信息，转换为易于计算的低纬度问题进而求解的方法。</p><p>在已知模式<strong>x</strong>的时候如果能求得使分类类别y的条件概率p（y|x）达到最大值的类别y的话，就可以进行模式识别了。</p><hr><h1 id="学习模型"><a href="#学习模型" class="headerlink" title="学习模型"></a>学习模型</h1><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><p>在对函数f进行近似时，最简单的模型就是线性模型θ×x。θ表示模型的参数，通过对这个参数进行学习完成函数的近似计算，这个模型只能表现线性的输入输出函数，没有太多实用价值，对上述的线性模型进行相应的扩展，可以使线性模型用于表示非线性的输入输出。<br>$$<br>f_θ(x) = \sum_{j=1}^b\theta_j\phi_j(x)=\theta^T\phi(x)<br>$$</p><p>其中θ<sub>j</sub> (x)基函数向量的第j个因子，b是基函数的个数。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级好用的网站和手机app</title>
      <link href="2021/01/13/chao-ji-hao-yong-de-wang-zhan-he-shou-ji-app/"/>
      <url>2021/01/13/chao-ji-hao-yong-de-wang-zhan-he-shou-ji-app/</url>
      
        <content type="html"><![CDATA[<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ol><li><a href="https://www.xuetangx.com/">学堂在线</a>，自学网站。</li><li><a href="https://www.coursera.org/">Coursera</a>,大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。旨在同世界顶尖大学合作，在线提供网络公开课程。</li><li><a href="http://scholar.hedasudi.com/">谷歌学术镜像</a>，研究必备。</li><li><a href="https://banber.docer.wps.cn/library">数据简报</a>，工作汇报神器，大量制作模板，强推。</li><li><a href="https://slidesgo.com/">slidesgo</a>，大量免费PPT模板下线。</li><li><a href="https://www.logosc.cn/so/">搜图神器</a>，大量免版权图片下载，再也不用担心侵权啦，强烈推荐UP主使用。</li><li><a href="https://crashcourse.club/">Crash Course 中文字幕组</a>，汉化大量的优秀的外国学习视频，是视频中的精品。</li><li><a href="https://www.liuchengtu.com/">迅捷画图</a>，在线画流程图，思维导图，现成模板可以套用，十分方便。</li><li><a href="http://coursegraph.com/navigation/">公开课导航</a>，大量优秀课程的中转平台，在上面找到想要学的课程之后会转到Coursera，网易公开课，学堂在线等平台进行学习。</li><li><a href="https://www.w3school.com.cn/h.asp">W3school</a>，编程语言自学网站，大量浅显易懂文字教程，适合初学者。</li><li><a href="https://www.dotcpp.com/">C语言网</a>，不止有C语言，还有C++，数据结构，单片机，Python，编译器的教程，以及各种编程练习和比赛。</li><li><a href="https://www.runoob.com/">菜鸟教程</a>，各种编程语言的教程，大量文字教程，适合新手。</li><li><a href="https://www.lookae.com/">LookAE</a>，各种视频制作后期资源。</li><li><a href="https://wallhaven.cc/">wallhaven</a>，高清壁纸网站</li><li><a href="https://wallhaven.cc/">耳聆网</a>，非营利性网站，各种免费声音供你使用，强推UP主使用。</li><li><a href="http://www.ypppt.com/">优品PPT</a>，免费PPT模板下载网站，强推。</li><li><a href="https://docsmall.com/">docsmall</a>，在线免费图片压缩，GIF压缩，PDF压缩，合并，分割。</li><li><a href="https://airportal.cn/">AirPortal|空投</a>，方便快捷的文件传输方法，上传之后对方输入取件码即可接收，普通账号有文件大小限制。</li><li><a href="http://www.gddyu.com/">够低调解析</a>，VIP视频白嫖网站，可播放腾讯，爱奇艺等多个视频网站的VIP视频。</li><li><a href="https://www.uupoop.com/">稿定设计|在线PS</a>，方便快捷的在线PS网站，可以智能抠图，证件照换底色，海报素材等。</li><li><a href="https://www.zitijia.com/">字体家</a>，大量免费商业字体，UP主必备。</li><li><a href="https://www.kt1.com/">大数据词云</a>，用大数据生成真正值得分享的词云图。</li><li><a href="https://greasyfork.org/zh-CN">Greasy Fork</a>，谁用谁知道，白嫖神器，具体看我另一篇博文《关于超神插件油猴脚本-Tampermonkey的安装和使用》，首推。</li><li><a href="https://github.com/">Github</a>，一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub，程序员神器，提升项目经验神器。</li><li><a href="https://gitee.com/">Gitee</a>，中文版Github，访问速度比Github快得多，将Github仓库转到Gitee可以大大增加下载速度。</li><li><a href="https://www.csdn.net/?spm=1011.2124.3001.5359">CSDN</a>，专业开发者社区，程序员神器，大量视频教程，大量干货博客，大量项目代码，同时也能发表自己的博客和工程，提出疑问等等，强推。</li><li><a href="https://www.51zxw.net/">我要自学网</a>，各式各样超多学习课程，自学必备。</li><li><a href="https://sci-hub.tf/">SCI-HUB</a>，文献白嫖网站，输入DOI码即可免费获得文献全文，学术研究必备，网站会受到多方攻击，不太稳定。</li><li><a href="http://www.4243.net/">大木虫学术导航</a>，集合了各种各样的学术网站和广大的搜索领域，学术研究必备。</li></ol><hr><h2 id="手机app"><a href="#手机app" class="headerlink" title="手机app"></a>手机app</h2><ol><li>轻启动，秒杀打开app出现的几秒钟广告，帮你节省无数个几秒钟。</li><li>实用工具箱，内含上百种实用工具，一个app顶10个。</li><li>网易云课堂，户外充电必备，课程质量很高，零基础入门无障碍。</li><li>慕课网，大量IT行业教程等你学习。</li><li>录音转文字助手，会议必备，帮你快速记录会议内容。</li><li>计划大师，帮你记录你的计划行程，杜绝遗忘。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 工具推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于超神插件油猴脚本(Tampermonkey)的安装和使用</title>
      <link href="2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/"/>
      <url>2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Tampermonkey 是一款浏览器脚本管理插件，常见浏览器都支持，结合脚本网站 Greasyfork，能够方便的实现脚本旳一键安装、自动更新、快速启用等便捷功能。可以让浏览器实现各种各样的扩展功能。比如获取网盘下载地址、微博页面精简等，去视频广告，去百度广告等等等等，给浏览器开挂，而且资源占用也极小，浏览器的辅助神器。</p><h2 id="Tampermonkey的安装"><a href="#Tampermonkey的安装" class="headerlink" title="Tampermonkey的安装"></a>Tampermonkey的安装</h2><p>首先，在360浏览器的右上角找这个四个小方块图标，点击它，再点添加：</p><img src="/2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/1.png" class=""><p>搜索Tempermonkey进行安装：</p><img src="/2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/2.png" class=""><hr><h2 id="Tampermonkey的使用"><a href="#Tampermonkey的使用" class="headerlink" title="Tampermonkey的使用"></a>Tampermonkey的使用</h2><p>进入Greasy Fork网站（提供脚本的超强网站），搜索你需要的脚本：</p><img src="/2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/3.png" class=""><img src="/2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/4.png" class=""><p>搜索完成后进行安装：</p><p>安装完成后打开对应网页可以看到脚本自动运行了：</p><img src="/2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/6.png" class=""><p>可以在网站内的一个位置找到隐藏按钮打开控制台：</p><img src="/2021/01/13/guan-yu-chao-shen-cha-jian-you-hou-jiao-ben-tampermonkey-de-an-zhuang-he-shi-yong/5.png" class=""><p>注意，如果没看到控制台那么要注意关闭浏览器的广告拦截插件。</p><hr><h1 id="好用的脚本"><a href="#好用的脚本" class="headerlink" title="好用的脚本"></a>好用的脚本</h1><ul><li><strong>淘宝党自动比价工具</strong></li></ul><p>在你浏览商品页面时，自动比较同款商品在淘宝/京东/亚马逊/当当/苏宁/等百家商城的最低价，提供价格历史、口碑评分等查询，还有降价提醒等功能，为你的选择提供参考，数据由购物党网站提供。</p><ul><li><strong>哔哩哔哩番剧解锁大会员,B站视频下载、解析，A站视频下载、解析，集合了优酷、爱奇艺、腾讯、芒果、乐视、等全网VIP视频免费破解去广告,高清普清电视观看，增加对手机支持，持续更新</strong></li><li><strong>视频站启用html5播放器</strong></li><li><strong>懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、百度网盘直接下载、知乎视频下载等多合一版。长期更新，放心使用</strong></li><li><strong>网页解除限制</strong></li></ul><p>详情查看Greasy Fork网站会发现更多惊喜。</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 油猴脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践笔记</title>
      <link href="2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/"/>
      <url>2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>编程环境的安装请见我另两篇文章《Pycharm安装及破解方法》及《Pycharm配置和使用教程》，下面以你能正常使用pycharm为前提。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="变量及简单数据类型"><a href="#变量及简单数据类型" class="headerlink" title="变量及简单数据类型"></a>变量及简单数据类型</h2><h3 id="变量名的使用"><a href="#变量名的使用" class="headerlink" title="变量名的使用"></a>变量名的使用</h3><ol><li>变量名只能包含字母，数字和下划线。可以以字母和下划线开头，但不能以数字开头。</li><li>变量名不能包含空格，可用下划线来分割单词，如：greeting_message。</li><li>不要将Python关键字和函数名用作变量名。</li><li>变量名应既简短又具有描述性。</li><li>慎用小写字母l和大写字母O，容易被看成1和0。</li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是一串字符，引号括起的都是字符串，可以是单引号或双引号，如：</p><pre class=" language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"ada lovelace"</span></code></pre><pre class=" language-python"><code class="language-python">str<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#单词首字母大写</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#单词所有字母大写</span>str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#单词所有字母小写</span>str <span class="token operator">=</span> str1 <span class="token operator">+</span> str2          <span class="token comment" spellcheck="true">#字符串相加</span><span class="token comment" spellcheck="true">#字符串中出现\t是制表符，\n是换行符</span>str<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#删除空格，不改变原变量</span></code></pre><h3 id="整型（浮点型同理）"><a href="#整型（浮点型同理）" class="headerlink" title="整型（浮点型同理）"></a>整型（浮点型同理）</h3><p>加减乘除不必多说</p><pre class=" language-python"><code class="language-python"><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span>     <span class="token comment" spellcheck="true">#乘方，结果是9</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span>      <span class="token comment" spellcheck="true">#求模，返回余数</span></code></pre><p>注意，整型相除也是整型，会自行砍掉小数。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><pre class=" language-python"><code class="language-python">str<span class="token punctuation">(</span>age<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 转变为字符串</span>int<span class="token punctuation">(</span>age<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 转变为整型</span></code></pre><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表由一系列特定元素排列而成，如：</p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span><span class="token string">'cannondale'</span><span class="token punctuation">,</span><span class="token string">'redline'</span><span class="token punctuation">,</span><span class="token string">'specialized'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python">list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true">#表示第一个元素</span>list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                 <span class="token comment" spellcheck="true">#表示最后一个元素</span><span class="token comment" spellcheck="true">#列表的增删改</span>list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'honda'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#在列表末尾添加字符串'honda'</span>list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'ducati'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#在第一位插入字符串'ducati',后面的元素后移一位</span><span class="token keyword">del</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>              <span class="token comment" spellcheck="true">#删除第一个元素</span>str <span class="token operator">=</span> list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#删除列表末尾的元素，同时可以把这个元素赋值给另一个变量</span>str <span class="token operator">=</span> list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#删除第一个元素，同时可以把这个元素赋值给另一个变量</span>list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#不清楚元素位置，知道元素值的删除方法</span><span class="token comment" spellcheck="true">#列表的排列（排列时列表数据类型要保持一致）</span>list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#按字母顺序排列列表</span>list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按与字母顺序相反的顺序排列列表</span>sorted<span class="token punctuation">(</span>list<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#不影响原有列表的排列顺序，直接返回一个排列好的列表</span>sorted<span class="token punctuation">(</span>list<span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#反向排列，不改变原有列表</span>list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#将列表元素反转排列</span><span class="token comment" spellcheck="true">#使用列表一部分</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#输出一个包含列表第1到3个元素的列表，没有list[3]</span>list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>                 <span class="token comment" spellcheck="true">#输出一个包含列表前四个元素的列表</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                 <span class="token comment" spellcheck="true">#输出一个包含列表第三个元素开始往后的元素的列表</span>list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#输出一个包含列表最后三个元素的列表</span><span class="token comment" spellcheck="true">#复制一个列表</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true">#不能使用list2 = list1，因为这样它们的地址是一样的</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#确定列表长度</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#打印整个列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#1到4的整数，是可迭代对象</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#2到10的整数，步长为2（2，4，6，8，10）</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#转换为列表</span>min<span class="token punctuation">(</span>list_digits<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#找出数字列表的最小值</span>max<span class="token punctuation">(</span>list_digits<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#找出数字列表的最大值</span>list <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#一行代码生成列表</span></code></pre><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>不可修改的列表称为元组。</p><pre class=" language-python"><code class="language-python">tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#两个元素的元组</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>                <span class="token comment" spellcheck="true">#不合法 </span>tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#可以给储存元组的变量重新赋值，合法</span></code></pre><hr><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#检查单个条件</span><span class="token keyword">if</span> car <span class="token operator">==</span> <span class="token string">'bmw'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">elif</span> car <span class="token operator">==</span> <span class="token string">'saf'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#检查多个条件</span><span class="token keyword">if</span> age_0 <span class="token operator">>=</span> <span class="token number">21</span> <span class="token operator">and</span> age_1 <span class="token operator">>=</span> <span class="token number">21</span><span class="token keyword">if</span> age_0 <span class="token operator">>=</span> <span class="token number">21</span> <span class="token operator">or</span> age_1 <span class="token operator">>=</span> <span class="token number">21</span><span class="token comment" spellcheck="true">#检查特定值是否在列表中，特定值是否在字符串中同理</span><span class="token keyword">if</span> <span class="token string">'value'</span> <span class="token keyword">in</span> list<span class="token keyword">if</span> <span class="token string">'value'</span> <span class="token operator">not</span> <span class="token keyword">in</span> list<span class="token comment" spellcheck="true">#确定列表不是空的</span><span class="token keyword">if</span> list</code></pre><hr><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一系列的键值对：</p><pre class=" language-python"><code class="language-python">dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'points'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>dict<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true">#访问字典中'color'所对应的值</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字典是动态结构，可随时在其中添加键值对,键值对的排列顺序和添加顺序不同，Python不关心键值对顺序，只关心键与值的联系</span>dict<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">#修改字典中的值</span>dict<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">#删除键值对</span><span class="token keyword">del</span> dict<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#遍历字典</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#item方法返回一个键值对列表，依次是键，值，键，值。。。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token operator">/</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">for</span> key <span class="token keyword">in</span> dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true">#遍历字典所有键</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> key <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#按顺序遍历字典所有键</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> value <span class="token keyword">in</span> dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#嵌套，字典储存于列表或列表储存于字典</span><span class="token comment" spellcheck="true">#字典储存于列表中可运用于游戏中产生的一群敌人（列表），每个敌人的数据都不相同（字典）</span><span class="token comment" spellcheck="true">#列表储存于字典运用于一个特征由多个元素组成，如披萨的原料，顾客点的披萨：外壳：硬，原料：蘑菇，奶酪。</span><span class="token comment" spellcheck="true">#字典中储存字典，运用于网站用户，用户名作为键，用户信息储存于一个字典中，字典作为值。</span></code></pre><hr><h2 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h2><ul><li>函数input()让程序暂停运行，等待用户输入文本，获取用户输入后，Python将其储存在一个变量中，供你使用：</li></ul><pre class=" language-python"><code class="language-python">message <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Tell me something,and I will repeat it back to you:"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#获取输入，input中是提示信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></code></pre><ul><li>while循环不断执行，知道指定的条件不满足为止：</li></ul><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> num <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num<span class="token operator">+</span><span class="token operator">+</span>    <span class="token keyword">if</span> city <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#可以设定条件主动退出循环</span>        <span class="token keyword">break</span>               <span class="token comment" spellcheck="true">#continue为退出本次循</span></code></pre><ul><li>在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素，可使用while进行修改：</li></ul><pre class=" language-python"><code class="language-python">unconfirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span><span class="token string">'brian'</span><span class="token punctuation">,</span><span class="token string">'candace'</span><span class="token punctuation">]</span>confirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> unconfirmed_users<span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true">#验证所有未验证用户，并从旧列表中删除，将已验证用户加入新列表中</span>    current_user <span class="token operator">=</span> unconfirmed_users<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>current_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    confirmed_users<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_users<span class="token punctuation">)</span></code></pre><ul><li>删除包含特定值的所有列表元素</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> pets<span class="token punctuation">:</span>    pets<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span></code></pre><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是带名字的代码块，用于完成具体的工作。需要程序多次执行同一项任务是，无需反复编写代码，只需反复调用执行改任务的函数即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#向函数传递信息</span><span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>                                          <span class="token comment" spellcheck="true">#一个参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> username<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type <span class="token operator">=</span> ‘rabbit’<span class="token punctuation">,</span>pet_name <span class="token operator">=</span> <span class="token string">'snoby'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#两个参数，可以给形参设定默认值，这样就可以不用传入实参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have a"</span> <span class="token operator">+</span> animal_type <span class="token operator">+</span> <span class="token string">'.The name is'</span> <span class="token operator">+</span> pet_name<span class="token punctuation">)</span>    describe_pet<span class="token punctuation">(</span><span class="token string">'hamster'</span><span class="token punctuation">,</span><span class="token string">'harry'</span><span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true">#实际调用</span>describe_pet<span class="token punctuation">(</span>animal_type <span class="token operator">=</span> <span class="token string">'hamster'</span><span class="token punctuation">,</span>pet_name <span class="token operator">=</span> <span class="token string">'harry'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#有返回值的函数</span><span class="token keyword">def</span> <span class="token function">git_fromatted_name</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> last_name    <span class="token keyword">return</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">#return {'first':first_name,'last':last_name}    可返回字典</span><span class="token comment" spellcheck="true">#把列表传给函数后，函数可以直接对其进行修改,注意这在简单数据类型行不通。如果不想修改列表本身可以用list[:]副本传入</span><span class="token keyword">def</span> <span class="token function">print_models</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> unprinted_designs<span class="token punctuation">:</span>        current_designs <span class="token operator">=</span> unprinted_designs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Printing model:'</span> <span class="token operator">+</span> current_design<span class="token punctuation">)</span>        completed_models<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_design<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#传递任意数量的实参</span><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>                                        <span class="token comment" spellcheck="true">#这里toppings是一个元组，可以传入任意数量的元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>toppings<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span><span class="token string">'green peppers'</span><span class="token punctuation">,</span><span class="token string">'extra cheese'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#调用函数，传入的参数自行组成元组</span><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>                                   <span class="token comment" spellcheck="true">#结合使用    </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"make a "</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">"pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- "</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用任意数量的关键字实参（传入任意数量元素的字典）</span><span class="token keyword">def</span> <span class="token function">build_profile</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>last<span class="token punctuation">,</span><span class="token operator">**</span>user_info<span class="token punctuation">)</span><span class="token punctuation">:</span>                         <span class="token comment" spellcheck="true">#传入信息和键值对，合并成一个字典</span>    profile <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    profile<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> first    profile<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> last    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> user_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>：        profile<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> profilebild_profile<span class="token punctuation">(</span><span class="token string">'albert'</span><span class="token punctuation">,</span><span class="token string">'einstein'</span><span class="token punctuation">,</span>location <span class="token operator">=</span> <span class="token string">'princeton'</span><span class="token punctuation">,</span>field <span class="token operator">=</span> <span class="token string">'physics'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#调用</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#将函数储存在模块中</span><span class="token comment" spellcheck="true">#创建一个存储函数的独立文件，在其所在目录中的其他py文件都可以通过import+文件名导入模块</span><span class="token comment" spellcheck="true">#pizza.py</span><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>                                            <span class="token keyword">print</span><span class="token punctuation">(</span>toppings<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#making_pizzas.py</span><span class="token keyword">import</span> pizza                          <span class="token comment" spellcheck="true">#import pizza as p 可以给模块指定别名</span>pizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushroom'</span><span class="token punctuation">,</span><span class="token string">'green peppers'</span><span class="token punctuation">,</span><span class="token string">'extra cheese'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#导入特定函数</span><span class="token keyword">from</span> pizza <span class="token keyword">import</span> make_pizza <span class="token keyword">as</span> mp           <span class="token comment" spellcheck="true">#可以给函数指定别名</span><span class="token comment" spellcheck="true">#导入模块中所有函数</span><span class="token keyword">from</span> pizza <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>面向对象编程是最有效的软件编写方法之一。在面向对象编程是，你编写表示现实世界中的事物和场景的类，基于这些类来创造对象，每个对象都具备类的通用行为，也可根据需要赋予每个对象独特的个性。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建一个类</span><span class="token comment" spellcheck="true">#self是一个指向实类本身的引用，让实例能访问类中的属性和方法。</span><span class="token comment" spellcheck="true">#Python调用_init_()方法来创建实例时会自动传入实参self，我们自己不需要传递它。</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#注意init两边的横线的两条杠            </span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token number">0</span>             <span class="token comment" spellcheck="true">#可以在此处定义另外没传入的变量</span>    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ‘<span class="token keyword">is</span> now sitting<span class="token punctuation">.</span>’<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'rolled over!'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token comment" spellcheck="true">#创建实例</span>my_dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'willie'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>my_dog<span class="token punctuation">.</span>name                        <span class="token comment" spellcheck="true">#访问实例中的变量</span>my_dog<span class="token punctuation">.</span>age                         <span class="token comment" spellcheck="true">#访问实例中的变量</span>my_dog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">#调用类中的方法</span><span class="token comment" spellcheck="true">#修改属性的值</span>my_dog<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token number">10</span>                  <span class="token comment" spellcheck="true">#大多数情况为了封装完整，应该使用方法对属性进行修改</span>my_dog<span class="token punctuation">.</span>update_model<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#这样修改</span></code></pre><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>编写类是，并非总是从空白开始。一个类继承另一个类时，自动获得另一个类所有的属性和方法，原有的类称为父类，新类称为子类，子类也可定义属于自己的属性和方法。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#假设前面已有一个Car类</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_init_<span class="token punctuation">(</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#super是一个特殊函数，将父类和子类联系起来，代表了父类，此处父类和子类的_init_函数保持一致</span>        <span class="token comment" spellcheck="true">#此处编写ElecticCar类的独特属性</span><span class="token comment" spellcheck="true">#子类可以重写父类的方法</span><span class="token comment" spellcheck="true">#可以将实例用作属性</span><span class="token keyword">class</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>skip<span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_init_</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_init_<span class="token punctuation">(</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> Battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">#实例作属性</span></code></pre><h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><p>Python允许你将类储存在模块中，然后在主程序中导入所需的模块：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#car.py</span>Class <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>skipClass <span class="token class-name">Smartphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>skip<span class="token comment" spellcheck="true">#my_car.py</span><span class="token keyword">from</span> car <span class="token keyword">import</span> Car          <span class="token comment" spellcheck="true">#导入整个模块用import car，运用是要在类前加mudule_name.。导入模块中所有类用from car import *</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span><span class="token string">'a4'</span><span class="token punctuation">,</span><span class="token number">2016</span><span class="token punctuation">)</span></code></pre><hr><h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><p>自此，你已掌握了编写组织有序易于使用的程序所需的基本技巧，为了让程序用途更广，本章将学习处理文件，让程序快速分析大量数据；处理异常，用于管理程序运行时出现的错误，还将学习模块json，保存用户数据，以免程序停止运行后丢失。本章的学习可提高程序的实用性，可用性，稳定性。</p><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><p>假设已创建了一个文件pi_digits.txt</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#读取文件，显示内容，不需要主动调用close</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'pi_digits.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#文件命名为file_object。相对路径行不通可以用绝对路径</span>    contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#读取文件内容，传入字符串中 </span>    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#rstrip()方法删除字符串末尾的空白</span><span class="token comment" spellcheck="true">#逐行读取</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    lines <span class="token operator">=</span> file_object<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#readlines()方法从文件中读取每一行，储存在一个列表中</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file_object<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>        </code></pre><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#整体写入</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#以写入模式打开文件，如果文件不存在会自动创建，已经存在会清空文件</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming."</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#注意只能写入字符串，写入多行时可以加换行符</span><span class="token comment" spellcheck="true">#附加内容</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#以附加模式打开文件，不会清空原有文件，写入的行添加到文件末尾</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming."</span><span class="token punctuation">)</span>        </code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>发生程序异常时未对异常进行处理，程序会停止。使用try-except代码块时，即使出现异常，也会继续运行，显示你编写的友好的错误信息而不是traceback。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You can\'t divide by zero!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>                                                              <span class="token comment" spellcheck="true">#正常运行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"answer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#处理文件找不到的异常</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>        contents <span class="token operator">=</span> f_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token string">"Sorry,the file"</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"does not exist."</span>          <span class="token comment" spellcheck="true">#如果这里写pass，错误时可以不输出信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></code></pre><h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><pre class=" language-python"><code class="language-python">str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#以空格为分隔符将字符串拆分为多个部分，并储存到一个列表中</span><span class="token comment" spellcheck="true">#计算文本单词数</span><span class="token keyword">def</span> <span class="token function">count_words</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>            contents <span class="token operator">=</span> f_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Sorry,the file does not exist'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        word <span class="token operator">=</span> contents<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        num_words <span class="token operator">=</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The file "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"has about "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>num_words<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" words."</span><span class="token punctuation">)</span></code></pre><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>程序需要把用户提供的数据存储在列表和字典等数据结构中，用户关闭程序时，需要保存他们提供的信息，一种简单的办法是用模块json来储存信息</p><p><strong>json.dump()和json.load()</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonnumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>filename <span class="token operator">=</span> <span class="token string">'numbers.json'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>f_obj<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#传入要储存的数据和储存数据的文件对象</span><span class="token comment" spellcheck="true">#文件中数据存储格式和Python中一样[2,3,5,7,11,13]</span><span class="token comment" spellcheck="true">#再将列表读取到内存中</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>    numbers <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f_obj<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#列表被读取出来</span></code></pre><hr><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>每个程序员都需要经常测试其代码，在用户发现问题前找到它，因此需要编写测试代码改进代码。</p><p>Python标准库中的模块unittest提供了测试工具，单元测试用于核实函数的某个方面没有问题。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> name_function <span class="token keyword">import</span> get_formatted_name<span class="token comment" spellcheck="true">#测试类,所有以test_开头的方法自动运行</span><span class="token keyword">class</span> <span class="token class-name">NamesTestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true">#必须继承unittest.TestCase</span>    <span class="token keyword">def</span> <span class="token function">test_first_last_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                         <span class="token comment" spellcheck="true">#核实名和姓能否被正确格式化</span>        formatted_name <span class="token operator">=</span> get_formatted_name<span class="token punctuation">(</span><span class="token string">'janis'</span><span class="token punctuation">,</span><span class="token string">'joplin'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>formatted_name<span class="token punctuation">,</span><span class="token string">'Janis Joplin'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#断言方法，核实得到的结果与期望是否一致</span>unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果全部测试通过会输出OK,第一行的句点表明几个测试通过</span><span class="token comment" spellcheck="true">#不通过第一行会有E,最后显示FALLED</span><span class="token comment" spellcheck="true">#测试不通过时，意味新代码有错。不要修改测试，而应修改导致测试不通过的代码。</span></code></pre><table><thead><tr><th align="center">方法</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">assertEqual(a,b)</td><td align="center">核实a == b</td></tr><tr><td align="center">assertNotEqual(a,b)</td><td align="center">核实a != b</td></tr><tr><td align="center">assertTrue(x)</td><td align="center">核实x为True</td></tr><tr><td align="center">assertFalse(x)</td><td align="center">核实x为False</td></tr><tr><td align="center">assertIn(item,list)</td><td align="center">核实item在list中</td></tr><tr><td align="center">assertNotIn(item,list)</td><td align="center">核实item不在list中</td></tr></tbody></table><p>类的测试和函数的测试类似：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#假设已经创建了一个匿名调查类AnonymousSurvey</span><span class="token keyword">from</span> survey <span class="token keyword">import</span> AnonymousSurvey<span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestAnonmyousSurvey</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_store_single_response</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        question <span class="token operator">=</span> <span class="token string">'what language did you first learn to speak?'</span>        my_survey <span class="token operator">=</span> AnonymousSurvey<span class="token punctuation">(</span>question<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#问题</span>        my_survey<span class="token punctuation">.</span>store_response<span class="token punctuation">(</span><span class="token string">'English'</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#答案，会添加到答案列表中  </span>        my_survey<span class="token punctuation">.</span>store_response<span class="token punctuation">(</span><span class="token string">'Chinese'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIn<span class="token punctuation">(</span><span class="token string">'English'</span><span class="token punctuation">,</span>my_survey<span class="token punctuation">.</span>responses<span class="token punctuation">)</span>unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>方法setUp()，TestCase类包含方法，对测试函数初始化</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> survey <span class="token keyword">import</span> AnonymousSurvey<span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestAnonmyousSurvey</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        question <span class="token operator">=</span> <span class="token string">'what language did you first learn to speak?'</span>        my_survey <span class="token operator">=</span> AnonymousSurvey<span class="token punctuation">(</span>question<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#输入问题</span>        self<span class="token punctuation">.</span>responses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'English'</span><span class="token punctuation">,</span><span class="token string">'Spanish'</span><span class="token punctuation">,</span><span class="token string">'Mandarin'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">test_store_single_response</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">#测试一个答案 </span>        my_survey<span class="token punctuation">.</span>store_response<span class="token punctuation">(</span>self<span class="token punctuation">.</span>responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                         self<span class="token punctuation">.</span>assertIn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my_survey<span class="token punctuation">.</span>responses<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_store_three_responses</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">#测试三个答案</span>        <span class="token keyword">for</span> response <span class="token keyword">in</span> self<span class="token punctuation">.</span>responses<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>my_survey<span class="token punctuation">.</span>store_reponse<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">for</span> response <span class="token keyword">in</span> self<span class="token punctuation">.</span>responses<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>assertIn<span class="token punctuation">(</span>response<span class="token punctuation">,</span>self<span class="token punctuation">.</span>my_survey<span class="token punctuation">.</span>responses<span class="token punctuation">)</span>unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>数据可视化是通过可视化来表示探索数据，与数据挖掘紧密相关，在基因研究，天气研究，政治经济分析等众多领域，大家都使用Python完成数据密集型工作，数据科学家编写了一系列令人印象深刻的可视化和分析工具，最流行的是matplotlib，它是一个数学绘图库，可以制作简单的图表。我们还将使用Pygal包，它专注于生成适合在数字设备上显示的图表。</p><p>pycharm安装matplotlib十分方便快捷，直接在File→setting→Project interpreter中一键导入即可，不再赘述。</p><h3 id="绘制简单曲线图"><a href="#绘制简单曲线图" class="headerlink" title="绘制简单曲线图"></a>绘制简单曲线图</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#最简版</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltsquares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>squres<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/1.png" class=""><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#改善可读性</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltinput_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>                           <span class="token comment" spellcheck="true">#x轴的值</span>squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>                              <span class="token comment" spellcheck="true">#y轴的值</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>input_values，squares<span class="token punctuation">,</span>linewidth <span class="token operator">=</span>  <span class="token number">5</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#线段宽度</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Square Numbers"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#标题及其大小</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Value"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#x轴标签及其大小</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Square of Value"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#y轴标签及其大小</span>plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">'both'</span><span class="token punctuation">,</span>labelsize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#设置刻度标记的大小</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/2.png" class=""><h3 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>y_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#scatter方法绘制散点图，可删除数据点黑色轮廓，可设置颜色，默认为蓝色。cmap = plt.cm.Blues为设置渐变蓝色</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_values<span class="token punctuation">,</span>y_values<span class="token punctuation">,</span>s <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>edgecolor <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">)</span>   plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Square Numbers"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">#配置四连，不再赘述</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Value"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span>                   plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Square of Value"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span>         plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token string">'both'</span><span class="token punctuation">,</span>labelsize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/3.png" class=""><h3 id="保存图表"><a href="#保存图表" class="headerlink" title="保存图表"></a>保存图表</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#第一个实参是文件名，第二个指定将图表多余的空白裁剪掉</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'squares_plot.png'</span><span class="token punctuation">,</span>bbox_inches <span class="token operator">=</span> <span class="token string">'tight'</span><span class="token punctuation">)</span></code></pre><h3 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> choice<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">class</span> <span class="token class-name">RandomWalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num_points <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num_points <span class="token operator">=</span> num_points        self<span class="token punctuation">.</span>x_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>y_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">fill_walk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x_values<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>num_points<span class="token punctuation">:</span>            x_direction <span class="token operator">=</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#这里采用choice方法选取随机数</span>            x_distance <span class="token operator">=</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            x_step <span class="token operator">=</span> x_direction <span class="token operator">*</span> x_distance            y_direction <span class="token operator">=</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            y_distance <span class="token operator">=</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            y_step <span class="token operator">=</span> y_direction <span class="token operator">*</span> y_distance            <span class="token keyword">if</span> x_step <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> y_step <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            next_x <span class="token operator">=</span> self<span class="token punctuation">.</span>x_values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x_step            next_y <span class="token operator">=</span> self<span class="token punctuation">.</span>y_values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> y_step            self<span class="token punctuation">.</span>x_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>next_x<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>y_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>next_y<span class="token punctuation">)</span>rw <span class="token operator">=</span> RandomWalk<span class="token punctuation">(</span><span class="token punctuation">)</span>rw<span class="token punctuation">.</span>fill_walk<span class="token punctuation">(</span><span class="token punctuation">)</span>point_numbers <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>rw<span class="token punctuation">.</span>num_points<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>s <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">,</span>edgecolor <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">#绘制起点            </span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>rw<span class="token punctuation">.</span>x_values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rw<span class="token punctuation">.</span>y_values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">,</span>edgecolor <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#绘制终点</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>rw<span class="token punctuation">.</span>x_values<span class="token punctuation">,</span>rw<span class="token punctuation">.</span>y_values<span class="token punctuation">,</span>s <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>c <span class="token operator">=</span> point_numbers<span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">#根据绘制的先后决定点颜色的深浅   </span>            cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Blues<span class="token punctuation">,</span>edgecolor <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#plt.figure(dpi=128,figsize=(10,6))      调整绘图窗口尺寸</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/4.png" class=""><h3 id="使用Pygal模拟掷骰子（柱状图）"><a href="#使用Pygal模拟掷骰子（柱状图）" class="headerlink" title="使用Pygal模拟掷骰子（柱状图）"></a>使用Pygal模拟掷骰子（柱状图）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">import</span> pygal<span class="token keyword">class</span> <span class="token class-name">Die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>numsides <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num_sides <span class="token operator">=</span> numsides    <span class="token keyword">def</span> <span class="token function">roll</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>num_sides<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#投掷1000次，结果储存在列表中</span>die <span class="token operator">=</span> Die<span class="token punctuation">(</span><span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> roll_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> die<span class="token punctuation">.</span>roll<span class="token punctuation">(</span><span class="token punctuation">)</span>    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#处理数据</span>frequencies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>die<span class="token punctuation">.</span>num_sides<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    frequency <span class="token operator">=</span> results<span class="token punctuation">.</span>count<span class="token punctuation">(</span>value<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#count函数，计算列表中一个值出现的次数</span>    frequencies<span class="token punctuation">.</span>append<span class="token punctuation">(</span>frequency<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#构建柱状图</span>hist <span class="token operator">=</span> pygal<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>hist<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Results of rolling one D6 1000 times.'</span>hist<span class="token punctuation">.</span>x_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>hist<span class="token punctuation">.</span>x_title <span class="token operator">=</span> <span class="token string">"Result"</span>hist<span class="token punctuation">.</span>y_title <span class="token operator">=</span> <span class="token string">"Frequency of Result"</span>hist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'D6'</span><span class="token punctuation">,</span>frequencies<span class="token punctuation">)</span>hist<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'die_visual.svg'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#保存文件</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/5.png" class=""><hr><h2 id="从网上下载数据并处理和绘图"><a href="#从网上下载数据并处理和绘图" class="headerlink" title="从网上下载数据并处理和绘图"></a>从网上下载数据并处理和绘图</h2><p>本章中，你将从网上下载数据，并对数据进行可视化。我们将使用Python模块csv来处理以CSV（逗号分隔的值）格式存储的天气数据，使用模块json来访问以JSON存储的人口数据。</p><h3 id="绘制天气情况图表"><a href="#绘制天气情况图表" class="headerlink" title="绘制天气情况图表"></a>绘制天气情况图表</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimefilename <span class="token operator">=</span> <span class="token string">'death_valley_2014.csv'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#创建一个与该文件向关联的阅读器</span>    header_row <span class="token operator">=</span> next<span class="token punctuation">(</span>reader<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#返回文件中的下一行，这里是第一行，返回一个列表，以逗号分隔开的内容为一个元素</span><span class="token comment" spellcheck="true">#    for index,conlumn_header in enumerate(header_row):  #enumerate()方法获取列表每个元素的索引和值</span><span class="token comment" spellcheck="true">#        print(index,conlumn_header)</span>    dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>lows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 遍历文件余下的各行，阅读器对象从其停留的地方继续往下读取csv文件，每次返回下一行，第一行已经读取，这里从第二行开始</span>    <span class="token comment" spellcheck="true"># 返回的都是第二列每一天最高温度的值</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>                                                    <span class="token comment" spellcheck="true">#对缺失的数据进行检查</span>            current_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这里获取日期，第二个参数指定如何解读日期</span>            high <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">#转化为整形，matplotlib才能读取它们</span>            low <span class="token operator">=</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>current_date<span class="token punctuation">,</span><span class="token string">'missing data'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_date<span class="token punctuation">)</span>            highs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>high<span class="token punctuation">)</span>            lows<span class="token punctuation">.</span>append<span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘图代码</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">#调节图的大小，第一个参数是窗口分辨率，第二个是长和宽</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">#画折线图，alpha为透明度</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>lows<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>lows<span class="token punctuation">,</span>facecolor <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#中间填充颜色</span>fig<span class="token punctuation">.</span>autofmt_xdate<span class="token punctuation">(</span><span class="token punctuation">)</span>                                             <span class="token comment" spellcheck="true">#绘制倾斜的x轴标签</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Daily high and low temperatures - 2014'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Temperature(F)'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">,</span>which <span class="token operator">=</span> <span class="token string">'major'</span><span class="token punctuation">,</span>labelsize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>datetime.strptime方法第一个参数是传入的字符串，第二个参数规定字符串的格式，下表列出了一些这样的实参：</p><table><thead><tr><th align="center">实参</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%A</td><td align="center">星期的名称，如Monday</td></tr><tr><td align="center">%B</td><td align="center">月份名称，如January</td></tr><tr><td align="center">%m</td><td align="center">用数字表示的月份（01-12）</td></tr><tr><td align="center">%d</td><td align="center">用数字表示的月份中的一天（01-31）</td></tr><tr><td align="center">%Y</td><td align="center">四位的年份，如2021</td></tr><tr><td align="center">%y</td><td align="center">两位的年份，如21</td></tr><tr><td align="center">%H</td><td align="center">24小时的小时数（00-23）</td></tr><tr><td align="center">%I</td><td align="center">12小时的小时数（01-12）</td></tr><tr><td align="center">%p</td><td align="center">am或pm</td></tr><tr><td align="center">%M</td><td align="center">分钟数（00-59）</td></tr><tr><td align="center">%S</td><td align="center">秒数（00-61）</td></tr></tbody></table><h3 id="制作世界人口地图"><a href="#制作世界人口地图" class="headerlink" title="制作世界人口地图"></a>制作世界人口地图</h3><p>JSON文件其实是一个很长的列表，每个元素都是字典。</p><p>书本提供的链接已经不能下载数据，但感谢CSDN的兄弟，让我下载到了这份数据，链接附上：</p><p><a href="https://pan.baidu.com/s/1FlwB2SQzn_z06SR3eM9mJg%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Aq6vy">https://pan.baidu.com/s/1FlwB2SQzn_z06SR3eM9mJg，提取码：q6vy</a></p><p>注意：原来的pygal.i18n的包已经弃用，改为pygal.maps.world，请自行下载pygal_maps_world模块。</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">from</span> pygal<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>world <span class="token keyword">import</span> COUNTRIES      <span class="token comment" spellcheck="true">#注意原来的包已经弃用，COUNTIES是一个字典，两位国别码是键，国家名是值</span><span class="token keyword">import</span> pygal<span class="token keyword">from</span> pygal<span class="token punctuation">.</span>style <span class="token keyword">import</span> RotateStyle <span class="token keyword">as</span> RS<span class="token punctuation">,</span>LightColorizedStyle <span class="token keyword">as</span> LCS<span class="token keyword">def</span> <span class="token function">get_country_code</span><span class="token punctuation">(</span>country_name<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#获取两位国别码的函数</span>    <span class="token keyword">for</span> code<span class="token punctuation">,</span>name <span class="token keyword">in</span> COUNTRIES<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> country_name<span class="token punctuation">:</span>            <span class="token keyword">return</span> code    <span class="token keyword">return</span> Nonefilename <span class="token operator">=</span> <span class="token string">"population_data.json"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    pop_data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#生成一个列表，每个元素是字典</span>cc_populations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> pop_dict <span class="token keyword">in</span> pop_data<span class="token punctuation">:</span>    <span class="token keyword">if</span> pop_dict<span class="token punctuation">[</span><span class="token string">'Year'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2010'</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#只用2010年的信息</span>        country_name <span class="token operator">=</span> pop_dict<span class="token punctuation">[</span><span class="token string">'Country Name'</span><span class="token punctuation">]</span>        population <span class="token operator">=</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>pop_dict<span class="token punctuation">[</span><span class="token string">'Value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> get_country_code<span class="token punctuation">(</span>country_name<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#获取两位国别码</span>        <span class="token keyword">if</span> code<span class="token punctuation">:</span>                                  <span class="token comment" spellcheck="true">#过滤掉不是国家的信息</span>            cc_populations<span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token operator">=</span> populationcc_pops_1<span class="token punctuation">,</span>cc_pops_2<span class="token punctuation">,</span>cc_pops_3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">#分成三类可以用不同颜色的深浅表示，区分度更明显</span><span class="token keyword">for</span> cc<span class="token punctuation">,</span>pop <span class="token keyword">in</span> cc_populations<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pop <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">:</span>        cc_pops_1<span class="token punctuation">[</span>cc<span class="token punctuation">]</span> <span class="token operator">=</span> pop    <span class="token keyword">elif</span> pop <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">:</span>        cc_pops_2<span class="token punctuation">[</span>cc<span class="token punctuation">]</span> <span class="token operator">=</span> pop    <span class="token keyword">else</span><span class="token punctuation">:</span>        cc_pops_3<span class="token punctuation">[</span>cc<span class="token punctuation">]</span> <span class="token operator">=</span> popwm_style <span class="token operator">=</span> RS<span class="token punctuation">(</span><span class="token string">'#336699'</span><span class="token punctuation">,</span>base_style<span class="token operator">=</span>LCS<span class="token punctuation">)</span>           #让地图颜色更一致，更明亮，更容易区分不同的编组wm <span class="token operator">=</span> pygal<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>world<span class="token punctuation">.</span>World<span class="token punctuation">(</span>style <span class="token operator">=</span> wm_style<span class="token punctuation">)</span>wm<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'World Population in 2010, by Country'</span><span class="token punctuation">)</span>wm<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'0-10m'</span><span class="token punctuation">,</span>cc_pops_1<span class="token punctuation">)</span>wm<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'10m-1bn'</span><span class="token punctuation">,</span>cc_pops_2<span class="token punctuation">)</span>wm<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'>1bn'</span><span class="token punctuation">,</span>cc_pops_3<span class="token punctuation">)</span>wm<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'americas.svg'</span><span class="token punctuation">)</span></code></pre><p>｛% asset_img 7.png %｝</p><hr><h2 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h2><p>在本章，程序将使用Web应用编程接口（API）自动请求网站的特定信息而不是整个网站，再对信息进行可视化，这样信息是最新的。</p><p>使用API调用请求数据，在浏览器地址栏输入：</p><pre><code>https://api.github.com/search/repositories?q=language:python&amp;sort=stars</code></pre><p>这个调用返回GitHub当前托管了多少个项目，还有最受欢迎的Python仓库的信息。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://api.github.com/search/repositories?q=language:python&amp;sort=stars'</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Status code:'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#状态码为200则响应成功</span>response_dict <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#这个API返回的是JSON格式信息，因此转换为字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>response_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total repositories:"</span><span class="token punctuation">,</span>response_dict<span class="token punctuation">[</span><span class="token string">'total_count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#看仓库总数</span><span class="token comment" spellcheck="true">#看获取了多少仓库的信息</span>repo_dicts <span class="token operator">=</span> response_dict<span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Repositories returned:"</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>repo_dicts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查看获取到的每个仓库的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSelected information about each repository:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> repo_dict <span class="token keyword">in</span> repo_dicts<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nName:"</span><span class="token punctuation">,</span>repo_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Owner:"</span><span class="token punctuation">,</span> repo_dict<span class="token punctuation">[</span><span class="token string">'owner'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Stars:'</span><span class="token punctuation">,</span>repo_dict<span class="token punctuation">[</span><span class="token string">'stargazers_count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Repository:'</span><span class="token punctuation">,</span>repo_dict<span class="token punctuation">[</span><span class="token string">'html_url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Description:'</span><span class="token punctuation">,</span>repo_dict<span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>监视API速率限制，在浏览器输入：<a href="https://api.github.com/rate_limit%EF%BC%8C%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A">https://api.github.com/rate_limit，内容如下：</a></p><pre><code>{"resources":    {"core":        {"limit":60,"remaining":60,"reset":1610899050,"used":0},        "graphql":{"limit":0,"remaining":0,"reset":1610899050,"used":0},        "integration_manifest":{"limit":5000,"remaining":5000,"reset":1610899050,"used":0},        "search":{"limit":10,"remaining":10,"reset":1610895510,"used":0}    },    "rate":{"limit":60,"remaining":60,"reset":1610899050,"used":0}}</code></pre><p>我们关心的是搜索API的速率限制，可知极限为每分钟10个请求，用完配额后会受到一条简单的响应，必须等待配额重置。很多API都要求你注册获得API秘钥后才能执行API调用。</p><p><strong>使用API可视化仓库：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> pygal<span class="token keyword">from</span> pygal<span class="token punctuation">.</span>style <span class="token keyword">import</span> LightColorizedStyle <span class="token keyword">as</span> LCS<span class="token punctuation">,</span>LightenStyle <span class="token keyword">as</span> LSurl <span class="token operator">=</span> <span class="token string">'https://api.github.com/search/repositories?q=language:python&amp;sort=stars'</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Status code:'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#状态码为200则响应成功</span>response_dict <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#这个API返回的是JSON格式信息，因此转换为字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>response_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total repositories:"</span><span class="token punctuation">,</span>response_dict<span class="token punctuation">[</span><span class="token string">'total_count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#看仓库总数</span>repo_dicts <span class="token operator">=</span> response_dict<span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#收集每个仓库的名字和星数信息</span>names<span class="token punctuation">,</span>plot_dicts<span class="token punctuation">,</span>stars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> repo_dict <span class="token keyword">in</span> repo_dicts<span class="token punctuation">:</span>    names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>repo_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plot_dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'value'</span><span class="token punctuation">:</span> repo_dict<span class="token punctuation">[</span><span class="token string">'stargazers_count'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">#数据</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>repo_dict<span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">#描述</span>        <span class="token string">'xlink'</span><span class="token punctuation">:</span> repo_dict<span class="token punctuation">[</span><span class="token string">'html_url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">#链接</span>        <span class="token punctuation">}</span>    plot_dicts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>plot_dict<span class="token punctuation">)</span>    stars<span class="token punctuation">.</span>append<span class="token punctuation">(</span>repo_dict<span class="token punctuation">[</span><span class="token string">'stargazers_count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>my_style <span class="token operator">=</span> LS<span class="token punctuation">(</span><span class="token string">'#333366'</span><span class="token punctuation">,</span>base_style<span class="token operator">=</span>LCS<span class="token punctuation">)</span>   #定义样式，基色为深蓝色my_config <span class="token operator">=</span> pygal<span class="token punctuation">.</span>Config<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#创建设定，下面是一系列设定</span>my_config<span class="token punctuation">.</span>x_label_rotation <span class="token operator">=</span> <span class="token number">45</span>my_config<span class="token punctuation">.</span>show_legend <span class="token operator">=</span> <span class="token boolean">False</span>my_config<span class="token punctuation">.</span>title_font_size <span class="token operator">=</span> <span class="token number">24</span>my_config<span class="token punctuation">.</span>label_font_size <span class="token operator">=</span> <span class="token number">14</span>my_config<span class="token punctuation">.</span>major_label_font_size <span class="token operator">=</span> <span class="token number">18</span>      <span class="token comment" spellcheck="true">#主要标签大小</span>my_config<span class="token punctuation">.</span>truncate_label <span class="token operator">=</span> <span class="token number">15</span>             <span class="token comment" spellcheck="true">#较长的项目名缩短为15个字符</span>my_config<span class="token punctuation">.</span>show_y_guides <span class="token operator">=</span> <span class="token boolean">False</span>           <span class="token comment" spellcheck="true">#隐藏图表中的水平线</span>my_config<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">1000</span>                    <span class="token comment" spellcheck="true">#图表宽度</span>chart <span class="token operator">=</span> pygal<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span>my_config<span class="token punctuation">,</span>style <span class="token operator">=</span> my_style<span class="token punctuation">)</span>chart<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Most_Starred Python Projects on Github"</span>chart<span class="token punctuation">.</span>x_labels <span class="token operator">=</span> names                    <span class="token comment" spellcheck="true">#x轴标签</span>chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>plot_dicts<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#导入数据</span>chart<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'python_repos.svg'</span><span class="token punctuation">)</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/6.png" class=""><p>探索如何使用其他网站的API调用，可以自己去查API接口，这部分内容我会在以后更新放在其他博文里。</p><hr><h2 id="Django入门"><a href="#Django入门" class="headerlink" title="Django入门"></a>Django入门</h2><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><p>Python提供了一组开发Web开发的卓越工具，这时一个Web框架，一套用于帮助开发交互式网站的工具。</p><p><strong>建立虚拟环境</strong>，新建一个目录，将终端切换到这个目录，使用如下命令建立虚拟环境:</p><pre><code>python -m venv 11_env</code></pre><p>建立虚拟环境后，需要使用如下命令<strong>激活</strong>它：</p><pre><code>source 11_env/Scripts/activate</code></pre><p>环境处于激活状态时环境名包含在括号里，这时可以在环境中安装包，使用已安装的包，在11_env中安装的包在环境处于活动状态时才能使用。</p><p>如果要<strong>停止</strong>虚拟环境，执行命令：</p><pre><code>deactivate</code></pre><p><strong>安装Django</strong>:</p><pre><code>pip3 install Django</code></pre><p><strong>在Django中创建项目：</strong></p><pre><code>django-admin.py startproject learning_log</code></pre><p>这时在根目录下就会出现learning_log文件夹，内含几个.py文件。manage.py接受命令交给Django的相关部分执行，管理诸如使用数据库和运行服务器等任务。文件settings.py指定Django如何与你的系统交互，如何管理项目。urls.py告诉Django应该创建哪些网页来响应浏览器的请求。文件wsgi.py帮助Django提供它创建的文件。</p><p><strong>创建数据库：</strong></p><p>Django将大部分与项目相关的信息都储存在数据库中，因此我们需要创建一个供Django使用的数据库，活跃状态下进入manage.py的目录执行如下命令：</p><pre><code>python manage.py migrate</code></pre><p>我们将修改数据库成为迁移数据库，在使用SQLite的新项目中首次执行这个命令时，Django将新建一个数据库。在这里Django创建必要的数据库表，用于储存我们将在这个项目中使用的信息，确保数据库结构与当前代码匹配。</p><p>核实Django是否正确创建了项目：</p><pre><code>python manage.py runserver</code></pre><p>Django启动服务器，让你能够查看系统中的项目，当你在浏览器中输入URL请求网页时，Django服务器将进行响应。打开浏览器输入：<a href="http://localhost:8000/%E5%8D%B3%E5%8F%AF%E6%9F%A5%E7%9C%8B%E7%BD%91%E9%A1%B5%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8C%89Ctrl+C%E5%8F%AF%E4%BB%A5%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82">http://localhost:8000/即可查看网页，控制台按Ctrl+C可以关闭服务器。</a></p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/8.png" class=""><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a><strong>创建应用程序</strong></h3><p>在激活状态下，切换到manage.py的目录下执行命令：</p><pre><code>python manage.py startapp learning_logs</code></pre><p>Django创建程序应用learning_logs，项目文件新增一个文件夹learning_logs，里面有一些.py文件，其中models.py定义我们要在应用程序中管理的数据。</p><p>models.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#Model是Django中定义了模型基本功能的类，只有text和date_added两个属性</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#CharField储存少量文本，在数据库中预留200个字符的位置</span>    date_added <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#记录日期和时间，当用户创建新主题，自动设置成当前日期和时间</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#显示模型的简单表示</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text</code></pre><p>然后打开learning_log目录下的setting.py，把修改一段代码：</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>                              <span class="token comment" spellcheck="true">#安装在项目中的应用程序</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#我的应用程序</span>    <span class="token string">'learning_logs'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>接下来需要Django修改数据库，使其能够储存于模型Topic相关的信息，在终端执行：</p><pre><code>python manage.py makemigrations learning_logs</code></pre><p>命令makemigrations让Django确定如何修改数据库，使其储存与我们定义的新模型相关的数据，Django创建了一个名为0001——initial.py的迁移文件，这个文件在数据库中为模型Topic创建一个表。</p><p>应用这种迁移：</p><pre><code>python manage.py migrate</code></pre><p><strong>当需要修改数据时，都需要采取如下三个步骤：修改models.py，对learning_logs调用makemigrations，让Django迁移项目。</strong></p><p><strong>Django管理网站：</strong></p><p>为应用程序定义模型时，Django提供的管理网站（admin site）让你能轻松处理模型。</p><p>Django允许创建具备所有权限的用户——超级用户，命令如下（要在cmd执行否则不成功）：</p><pre><code>python manage.py createsuperuser</code></pre><p><strong>向管理网站注册模型：</strong></p><p>Django自动在网站中添加了一些模型，如User和Group，但对于我们自己创建的模型，必须进行手工注册。</p><p>models.py所在的目录中有admin.py文件，为向管理网站注册Topic，输入下面代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> learning_logs<span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic            <span class="token comment" spellcheck="true">#导入要注册的模型</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Topic<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">#可以通过管理网站管理模型了</span></code></pre><p>访问<a href="http://localhost:8000/admin/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%BF%9B%E5%85%A5%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E8%AE%BF%E9%97%AE%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%BD%A0%E6%B7%BB%E5%8A%A0%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%EF%BC%8C%E7%AE%A1%E7%90%86%E5%88%9A%E6%89%8D%E5%AE%9A%E4%B9%89%E7%9A%84%E6%A8%A1%E5%9E%8BTopic%E7%9B%B8%E5%85%B3%E7%9A%84%E6%95%B0%E6%8D%AE%E3%80%82">http://localhost:8000/admin/，输入用户名和密码，可以进入超级用户账户访问管理网站，可以让你添加修改用户和用户组，管理刚才定义的模型Topic相关的数据。</a></p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/9.png" class=""><p><strong>添加主题</strong></p><p>单击Topics进入主题网页，单击Add，看到一个用于添加新主题的菜单，输入Chess单击Save。在Add一个Rock Climbing。这样就有两个主题了。</p><p><strong>定义模型Entry：</strong></p><p>要记录学到的国际象棋和攀岩知识，需要为用户可在学习笔记中添加的条目定义模型，每个条目都与特定主题相关联，这种关系被称为多对一关系，即多个条目可关联到同一个主题：</p><p>models.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#Model是Django中定义了模型基本功能的类，只有text和date_added两个属性</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#CharField储存少量文本，在数据库中预留200个字符的位置</span>    date_added <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#记录日期和时间，当用户创建新主题，自动设置成当前日期和时间</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#显示模型的简单表示</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#外键是数据库术语，引用数据库中另一条记录将条目关联到特定的主题</span>    <span class="token comment" spellcheck="true">#在django2.0后，定义外键和一对一关系的时候需要加on_delete选项，此参数为了避免两个表里的数据不一致问题，不然会报错</span>    topic <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Topic<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>     text <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">#不需要长度限制的字段</span>    date_added <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#按创建顺序呈现条目，条目旁边放置时间戳</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>                                           <span class="token comment" spellcheck="true">#储存用于管理模型的额外信息，可以使用entries表示多个条目</span>        verbose_name_plural <span class="token operator">=</span> <span class="token string">'entries'</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"..."</span>                     <span class="token comment" spellcheck="true">#呈现条目时只显示前50个字符</span></code></pre><p>修改完models.py后记得迁移模型：</p><pre><code>python manage.py makemigrations learning_logspython manage.py migrate</code></pre><p>这时会生成一个新的迁移文件0002——entry.py，使数据库能储存于模型Entry相关的信息。</p><p>然后向管理网站注册Entry：</p><p>admin.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic<span class="token punctuation">,</span>Entryadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Topic<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Entry<span class="token punctuation">)</span></code></pre><p>这时登录超级用户管理网站，就可以在主题下添加条目了：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/10.png" class=""><p>输入一些数据后，就可以通过交互式终端会话以编程方式查看这些数据了，这种交互式环境被称为Django Shell，是测试项目和排除故障的理想之地。下面是交互式Shell示例:</p><pre><code>$ python manage.py shell&gt;&gt;&gt; from learning_logs.models import Topic&gt;&gt;&gt; Topic.objects.all()&lt;QuerySet [&lt;Topic: Chess&gt;, &lt;Topic: Rock Climbing&gt;]&gt;&gt;&gt;&gt; topics = Topic.objects.all()&gt;&gt;&gt; for topic in topics:...     print(topic.id,topic)...1 Chess2 Rock Climbing</code></pre><p>知道对象的ID后，就可获取该对象并查看其任何属性，其中内容展示由于中文原因造成乱码：</p><pre><code>&gt;&gt;&gt; t = Topic.objects.get(id=1)&gt;&gt;&gt; t.text'Chess'&gt;&gt;&gt; t.date_addeddatetime.datetime(2021, 1, 18, 15, 29, 47, 62586, tzinfo=&lt;UTC&gt;)&gt;&gt;&gt; t.entry_set.all()&lt;QuerySet [&lt;Entry: ▒й▒▒▒▒▒▒▒▒▒▒▒▒˫▒▒▒▒ִ16▒ӣ▒˫▒▒▒▒˫▒▒˫▒ڣ▒˫▒▒˫ʿ▒▒▒▒▒䣬һ▒▒▒▒▒▒▒▒▒▒▒▒90▒▒λ▒ÿɹ▒▒▒▒▒...&gt;]&gt;</code></pre><p>退出shell会话输入exit()按回车即可。</p><h3 id="创建网页：学习笔记主页"><a href="#创建网页：学习笔记主页" class="headerlink" title="创建网页：学习笔记主页"></a>创建网页：学习笔记主页</h3><p>使用Django创建网页的过程分为三个阶段：定义URL、编写视图、编写模板。</p><p>首先必须定义URL模式，URL模式描述了URL是如何设计的，让Django知道如何将浏览器请求与网站URL匹配，以确定返回哪个网页。</p><p>每个URL都被映射到特定的视图——视图函数获取并处理网页所需的信息。视图函数通常调用一个模板，后者生成浏览器能够理解的网页。</p><p><strong>映射URL：</strong></p><p>用户通过在浏览器中点击链接或输入URL来请求网页，因此我们需要确定项目需要哪些URL。主页的URL最重要，是用户访问项目的基础URL<a href="http://localhost:8000/%E3%80%82%E6%88%91%E4%BB%AC%E5%B0%86%E8%BF%99%E4%B8%AA%E5%9F%BA%E7%A1%80URL%E6%98%A0%E5%B0%84%E5%88%B0%E2%80%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%9D%E7%9A%84%E4%B8%BB%E9%A1%B5%E3%80%82">http://localhost:8000/。我们将这个基础URL映射到“学习笔记”的主页。</a></p><p><strong>在这里书本上的代码是Django1.0时期的，而后来新出的Django2.0使代码有了很大变化，此处是书本的大坑。</strong>此处请参照下面代码：</p><p>urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#注意2.0的代码的变化</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'learning_logs.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'learning_logs'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>此时我们需要在文件夹learning_logs中创建另一个urls.py文件，代码修改如下：</p><p>urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views                <span class="token comment" spellcheck="true">#从此文件所在的目录中导入wiews</span>app_name<span class="token operator">=</span><span class="token string">'learning_logs'</span>           <span class="token comment" spellcheck="true">#巨坑，书中没有，不写runserver时会报错</span><span class="token comment" spellcheck="true">#URL模式是一个对函数path的调用，第一个参数是正则表达式，第二个参数指定了调用的视图函数第三个参数指定名称</span><span class="token comment" spellcheck="true">#当需要提供到这个主页的链接时，都将使用这个名称而不是编写URL</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">#包含可在learning_logs中请求的网页</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true"># 主页</span>   <span class="token punctuation">]</span></code></pre><p>视图函数接受请求中的信息，准备好生成网页所需要的数据，再将这些数据发送给浏览器，这通常定义了网页是什么样的模板实现的。</p><p>views.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/index.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#参数是原始请求对象以及一个可用于创建网页的模板</span></code></pre><p>URL请求与我们刚才定义的模式匹配时，Django将在views.py文件中查找函数，再将请求对象传递给这个视图函数，在这里我们不需要处理任何数据。</p><p><strong>编写模板：</strong></p><p>模板定义了网页的结构，指定了网页是什么样的，每当网页被请求时，Django将填入相关的数据，模板能让你访问视图提供的任何数据，我们的主页视图没有提供任何的数据，因此相应的模板非常简单。</p><p>在文件夹learning_logs中新建一个文件夹，命名templates，在里面新建一个文件夹名为learning_logs，在learning_logs中新建文件命名index.html。</p><p>index.html:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>learning Log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Learning Log helps you keep track of your learning.for any topic you're learning about.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p> &lt;p&gt;&lt;/p&gt; 标识段落。这里定义两个段落，第一个充当标题，第二个阐述内容。</p><p>此时运行服务器，进入首页，看到的不是默认的Django网页，而是调用函数view.index()后使用index.html模板来渲染的网页。</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/11.png" class=""><p>创建网页的过程看起来很复杂，但将URL、视图、模板分离的效果实际上很好，这让我们能够分别考虑到项目的不同方面，在项目很大时，每个参与者可专注于其擅长的方面。数据库专家专注于模型，程序员专注于视图代码，Web设计人员专注于模板。</p><h3 id="创建其他网页"><a href="#创建其他网页" class="headerlink" title="创建其他网页"></a>创建其他网页</h3><p>我们将创建两个显示数据的网页，一个列出所有主题，一个显示特定主题下的所有条目，每个网页都将指定URL模式，编写一个视图函数，并编写一个模板，但这样做之前，要先创建一个父模板，项目中的其他模板都继承它。</p><p><strong>模板继承：</strong></p><p>在创建网站时，有一些所有网页都包含的元素，可编写一个包含通用元素的模板，让所有网页继承这个模板。</p><p>首先创建一个名为base.html的模板，储存在index.html所在的目录中，所有页面都包含顶端的标题，这个标题设置为到主页的链接：</p><p>base.html:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>learning Log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{% block content %}{% endblock content %}</code></pre><p>第一部分创建了包含项目名的段落，该段落也是一个到主页的链接。为创建链接，我们使用了一个模板标签，它生成了一个URL，该URL与learning_logs/urls.py中定义的名为index的URL模式匹配。此时，learning_logs是一个命名空间，index是该命名空间中一个名称独特的URL模式，在简单的HTML页面中，链接是使用锚标签定义的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link_url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>link text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>使用模板标签生成URL可让链接保持最新容易得多，修改项目中的URL只需修改urls.py的URL模式。</p><p>第二部分插入了一对块标签，名为content，是一个占位符，其中的内容由子模板指定。在父模板中，可使用任意多的块来预留空间，而子模板可根据需要定义相应数量的块。</p><p>重新编写index.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Learning Log helps you keep track of your learning.for any topic you're learning about.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>与原来的代码相比，我们将标题替换为了从父模板继承的代码。在子模板中只需包含当前网页特有的内容，简化了模板，让网站修改容易得多。</p><h4 id="显示所有主题的页面："><a href="#显示所有主题的页面：" class="headerlink" title="显示所有主题的页面："></a>显示所有主题的页面：</h4><p>首先定义显示所有主题页面的URL，我们将使用单词topics，因此<a href="http://localhost:8000/topics/">http://localhost:8000/topics/</a>  将返回这个页面，<strong>learning_logs/urls.py</strong>修改如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views                <span class="token comment" spellcheck="true">#从此文件所在的目录中导入wiews</span>app_name<span class="token operator">=</span><span class="token string">'learning_logs'</span>           <span class="token comment" spellcheck="true">#巨坑，书中没有，不写runserver时会报错</span><span class="token comment" spellcheck="true">#URL模式是一个对函数path的调用，第一个参数是正则表达式，第二个参数指定了调用的视图函数第三个参数指定名称</span><span class="token comment" spellcheck="true">#当需要提供到这个主页的链接时，都将使用这个名称而不是编写URL</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">#包含可在learning_logs中请求的网页</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true"># 主页</span>    path<span class="token punctuation">(</span><span class="token string">'topics/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>topics<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true"># 显示所有的主题</span>   <span class="token punctuation">]</span></code></pre><p>views.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic                  <span class="token comment" spellcheck="true">#导入所需数据相关的模型</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/index.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">topics</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true">#形参是Django从服务器收到的request对象          </span>    <span class="token comment" spellcheck="true">#显示所有主题</span>    topics <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'date_added'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#查询数据库，请求提供Topic对象，按属性date_added进行排序</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'topics'</span><span class="token punctuation">:</span>topics<span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">#定义一个要发送给模板的上下文字典，键是模板中访问数据的名称，值是我们发送给模板的数据</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/topics.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里多传递一个数据</span></code></pre><p>同样在index.html所在目录中，创建topics.html：</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        {% for topic in topics %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% empty %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>No topics have been added yet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% endfor %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>在content块中，首先显示一个主题名称的文本。然后使用了一个for循环的模板标签，遍历字典context中的列表topics，这里for循环必须使用 endfor 标签来显式指出其结束位置。在循环中，需要将变量名用双花括号括起来，告诉Django使用了一个模板变量，这样每次循环都会被替换成topic当前值。在标签对&lt;ul&gt;&lt;/ul&gt;的内部，&lt;li&gt;与&lt;/li&gt;之间的内容都是一个项目列表项。 empty 标签告诉Django列表topics为空怎么办。</p><p>此时修改父模板，将其包含到显示所有主题的页面的链接：</p><p>base.html:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>learning Log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> -    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topics<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{% block content %}{% endblock content %}</code></pre><p>主页链接后面添加了一个连字符。后面新加一行让Django生成一个链接，与learning_logs/urls.py中名为topics的URL模式匹配。</p><p>现在可以在浏览器看到效果了：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/12.png" class=""><h4 id="显示特定主题的页面"><a href="#显示特定主题的页面" class="headerlink" title="显示特定主题的页面"></a>显示特定主题的页面</h4><p>显示特定主题的URL模式与前面所有的URL模式有所不同，它将使用主题的id属性来指出请求的是哪个主题，例如用户查看主题Chess（id为1）的详细页面，URL将为<a href="http://localhost:8000/topics/1/%E3%80%82">http://localhost:8000/topics/1/。</a></p><p>urls.py：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views                <span class="token comment" spellcheck="true">#从此文件所在的目录中导入wiews</span>app_name<span class="token operator">=</span><span class="token string">'learning_logs'</span>           <span class="token comment" spellcheck="true">#巨坑，书中没有，不写runserver时会报错</span><span class="token comment" spellcheck="true">#URL模式是一个对函数path的调用，第一个参数是正则表达式，第二个参数指定了调用的视图函数第三个参数指定名称</span><span class="token comment" spellcheck="true">#当需要提供到这个主页的链接时，都将使用这个名称而不是编写URL</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">#包含可在learning_logs中请求的网页</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true"># 主页</span>    path<span class="token punctuation">(</span><span class="token string">'topics/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>topics<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true"># 显示所有的主题</span>    re_path<span class="token punctuation">(</span><span class="token string">'topics/(?P&lt;topic_id>\d+)/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>topic<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'topic'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 特定主题的详细页面</span>    <span class="token comment" spellcheck="true">#使用正则表达式要用re_path否则控制台报警告</span>   <span class="token punctuation">]</span></code></pre><p>这里采用了正则表达式。这里捕获URL中的值?P和topic_id意思是将捕获到的值储存到topic_id中，\d+指与任何整数匹配，不管多少位。</p><p>views.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic                  <span class="token comment" spellcheck="true">#导入所需数据相关的模型</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/index.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">topics</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true">#形参是Django从服务器收到的request对象</span>    <span class="token comment" spellcheck="true">#显示所有主题</span>    topics <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'date_added'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#查询数据库，请求提供Topic对象，按属性date_added进行排序</span>    <span class="token comment" spellcheck="true"># 定义一个要发送给模板的上下文字典，键是模板中访问数据的名称，值是我们发送给模板的数据</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'topics'</span><span class="token punctuation">:</span>topics<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/topics.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里多传递一个数据</span><span class="token keyword">def</span> <span class="token function">topic</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#显示单个主题及其所有条目</span>    topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>topic_id<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#获取指定的主题</span>    entries <span class="token operator">=</span> topic<span class="token punctuation">.</span>entry_set<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-date_added'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取与该主题相关联的条目，按date_added降序排序</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"topic"</span><span class="token punctuation">:</span>topic<span class="token punctuation">,</span><span class="token string">'entries'</span><span class="token punctuation">:</span>entries<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#数据储存在字典中发送给模板topic.html</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/topic.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span></code></pre><p>topic.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Topic:{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for entry in entries %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ entry.date_added|date:'M d, Y H:i }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ entry.text|linebreaks }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% empty %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>         There are no entries for this topic yet.        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>首先使用了包含在字典context里的topic作为主题。然后遍历entries条目，显示出属性date_added的值，竖线|表示模板过滤器，对模板变量的值修改的函数，过滤器date:’M d, Y H:i以这样的格式显示时间戳：January 1,2021 23:00。接下来的一行享受text的完整值，过滤器linebreaks将包含换行符的长条目转换为浏览器能够理解的格式，以免显示一个不间断的文本块。</p><p>将所有主题页面中的每个主题都设置为链接：</p><p>topics.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for topic in topics %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topic<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% empty %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>No topics have been added yet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>再次访问网页发现功能已经实现：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/13.png" class=""><hr><h2 id="用户账户"><a href="#用户账户" class="headerlink" title="用户账户"></a>用户账户</h2><p>Web应用程序的核心是让任何用户都能够注册账户并能够使用它。本章中，你将创建一些表单让用户能够添加主题和条目，以及编辑现有条目。你还将学习Django如何防范对基于表单的网页发起的常见攻击。然后，我们将实现一个用户身份验证系统，创建一个注册页面，供用户注册，并让有些页面只让已登录的用户访问。接下来，修改一些视图参数，使用户只能看到自己的数据。</p><h3 id="让用户能输入数据"><a href="#让用户能输入数据" class="headerlink" title="让用户能输入数据"></a>让用户能输入数据</h3><p>首先让用户能添加新主题，与前面的方法几乎一样，主要差别是需要导入包含表单的模块form.py。</p><p>用户输入并提交的信息都是表单，我们需要验证提供的信息是正确的数据类型且不是恶意信息，再对有效的信息进行处理。创建表单最简单的方式是使用ModelForm，它根据我们之前定义的模型中的信息自动创建表单。接下来在models.py的目录下创建forms.py文件：</p><p>form.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic<span class="token keyword">class</span> <span class="token class-name">TopicForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Topic               <span class="token comment" spellcheck="true">#根据模型Topic创建一个表单</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">#该表单只包含字段text</span>        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#不用为text生成标签</span></code></pre><p><strong>URL模式new_topic:</strong></p><p>当用户要添加新主题时，我们将切换到<a href="http://localhost:8000/new_topic/%E3%80%82">http://localhost:8000/new_topic/。</a></p><p>learning_logs/urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">#包含可在learning_logs中请求的网页</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    path<span class="token punctuation">(</span><span class="token string">'new_topic/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>new_topic<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'new_topic'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 同于添加新主题的网页</span>   <span class="token punctuation">]</span></code></pre><p>views.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic                  <span class="token comment" spellcheck="true">#导入所需数据相关的模型</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse            <span class="token comment" spellcheck="true">#注意这里在django2.0的包名有所变化</span><span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> TopicForm<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">new_topic</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#判断请求是GET还是POST,如未提交数据（点击进入页面链接），创建一个新表单</span>        form <span class="token operator">=</span> TopicForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>                                  <span class="token comment" spellcheck="true">#POST请求，对提交的表单数据进行处理（点击了提交按钮）</span>        form <span class="token operator">=</span> TopicForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#使用用户输入的数据创建一个TopicForm实例，储存在form中</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#检查填写了所有必不可少的字段（默认所有），且输入的数据与要求的类型一致</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#表单中的数据写入数据库</span>            <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:topics'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取topics的URL，重新定位到页面topics</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/new_topic.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span></code></pre><p>创建Web应用程序时，用到的两种主要请求类型是GET请求和POST请求。只是从服务器读取数据的页面使用GET请求，用户需要通过表单提交信息使用POST请求，处理所有表单时，我们都将使用POST方法。</p><p>新建new_topic.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Add a new topic:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_topic<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {{ form.as_p }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add topic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>从form标签哪一行开始，定义了一个HTML表单，实参action告诉服务器提交的表单数据发送到视图函数new_topic()，以POST请求的方式。  csrf_token 标签防止攻击者利用表单获得对服务器未经授权的访问。显示表单，自动创建表单需要的全部字段，修饰符as_p以段落格式渲染所有表单元素。下边设置一个提交按钮。</p><p>topics.html添加一个到new_topic的链接:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>   --snip--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_topic<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add a new topic:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>现在打开服务器，打开网页，可以看到效果了：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/14.png" class=""><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/15.png" class=""><p><strong>添加新条目：</strong></p><p>forms.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic<span class="token punctuation">,</span>Entry<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">EntryForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Entry        field <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">}</span>        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#设置widgets可覆盖Django选择的默认小部件。forms.Textarea定制字段'text'的输入小部件，并设置文本宽度80列</span>        widgets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span> forms<span class="token punctuation">.</span>Textarea<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'cols'</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>learning_logs/urls.py:</p><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">#包含可在learning_logs中请求的网页</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    re_path<span class="token punctuation">(</span><span class="token string">'new_entry/(?P&lt;topic_id>\d+)/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>new_entry<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'new_entry'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 添加新条目的网页</span>   <span class="token punctuation">]</span></code></pre><p>views.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> TopicForm<span class="token punctuation">,</span>EntryForm<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">new_entry</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>topic_id<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> EntryForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> EntryForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#填充数据</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_entry <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#保存到new_entry中，但不保存到数据库中</span>            new_entry<span class="token punctuation">.</span>topic <span class="token operator">=</span> topic                  <span class="token comment" spellcheck="true">#获取主题</span>            new_entry<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">#保存到数据库，与主题关联</span>            <span class="token comment" spellcheck="true">#列表args包含在URL中的所有实参，在这里只有一个</span>            <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:topic'</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span>topic_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'topic'</span><span class="token punctuation">:</span> topic<span class="token punctuation">,</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">}</span>    <span class="token keyword">return</span>  render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/new_entry.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span></code></pre><p>new_entry.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topic<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Add a new entry:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_entry<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {{ form.as_p}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>页面的顶端是主题名，同时也是一个链接。表单的实参action包含topic_id值，让视图函数能将新条目关联到正确的主题。</p><p>更改topic.html，添加链接：</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Topic:{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Entries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_entry<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add new entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>--snip--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>这时网页就可以看到效果了：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/16.png" class=""><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/17.png" class=""><h3 id="编辑条目"><a href="#编辑条目" class="headerlink" title="编辑条目"></a>编辑条目</h3><p>创建一个页面，让用户能编辑现有的条目。</p><p>urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">#包含可在learning_logs中请求的网页</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    re_path<span class="token punctuation">(</span><span class="token string">'edit_entry/(?P&lt;topic_id>\d+)/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>edit_entry<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'edit_entry'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 编辑条目页面</span>   <span class="token punctuation">]</span></code></pre><p>views.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Topic<span class="token punctuation">,</span>Entry             <span class="token comment" spellcheck="true">#导入所需数据相关的模型</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse            <span class="token comment" spellcheck="true">#注意这里在django2.0的包名有所变化</span><span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> TopicForm<span class="token punctuation">,</span>EntryForm<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">edit_entry</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>entry_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    entry <span class="token operator">=</span> Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">-</span>entry_id<span class="token punctuation">)</span>    topic <span class="token operator">=</span> entry<span class="token punctuation">.</span>topic    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> EntryForm<span class="token punctuation">(</span>instance<span class="token operator">=</span>entry<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#根据现有条目创建表单</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> EntryForm<span class="token punctuation">(</span>instance<span class="token operator">=</span>entry<span class="token punctuation">,</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#根据现有条目创建表单，根据POST内容对其进行修改</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:topic'</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span>topic<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'entry'</span><span class="token punctuation">:</span>entry<span class="token punctuation">,</span><span class="token string">'topic'</span><span class="token punctuation">:</span>topic<span class="token punctuation">,</span><span class="token string">'form'</span><span class="token punctuation">:</span>form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/edit_entry.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span></code></pre><p>新建edit_entry.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topic<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Edit entry:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:edit_entry<span class="token punctuation">'</span> entry.id %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {{ form.as_p}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>save changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>修改topic.html:</p><pre class=" language-html"><code class="language-html">--snip--        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ entry.date_added|date:'M d, Y H:i' }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ entry.text|linebreaks }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:edit_entry<span class="token punctuation">'</span> entry.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>edit entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>--snip--</code></pre><p>这时打开网页可以看到效果：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/18.png" class=""><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/19.png" class=""><h3 id="创建用户账户"><a href="#创建用户账户" class="headerlink" title="创建用户账户"></a>创建用户账户</h3><p>下面将建立用户注册和身份验证系统，我们将创建一个新的应用程序，包含与处理用户账户相关的所有功能。</p><p>首先使用命令创建名为users的应用程序，结构与learning_logs相同：</p><pre class=" language-cmd"><code class="language-cmd">python manage.py startapp users</code></pre><p>settings.py</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>                              <span class="token comment" spellcheck="true">#安装在项目中的应用程序</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token comment" spellcheck="true">#我的应用程序</span>    <span class="token string">'learning_logs'</span><span class="token punctuation">,</span>    <span class="token string">'users'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>learning_log/urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'learning_logs.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'learning_logs'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'users/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'users.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h4 id="登录页面："><a href="#登录页面：" class="headerlink" title="登录页面："></a><strong>登录页面：</strong></h4><p>在users文件夹中新建urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>views <span class="token keyword">import</span> LoginView         <span class="token comment" spellcheck="true">#导入默认视图LoginView</span>app_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token comment" spellcheck="true">#URL模式是一个对函数path的调用，第一个参数是正则表达式，第二个参数指定了调用的视图函数第三个参数指定名称</span><span class="token comment" spellcheck="true">#当需要提供到这个主页的链接时，都将使用这个名称而不是编写URL</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">#鉴于没有编写视图函数而是使用默认的LoginView，后面的as_view告诉Django去哪里寻找模板</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> LoginView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>template_name<span class="token operator">=</span><span class="token string">'users/login.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span></code></pre><p>接下来在users中创建一个templates目录，在templates中创建一个users目录，又在这个users目录中创建login.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}  ｛% if form.errors %｝    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>>Your username and password didn't match.Please try again.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   {% endif %}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> {% <span class="token punctuation">'</span>users:login<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       {% csrf_token %}       {{ form.as_p }}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>首先如果表单的errors属性被设置，就显示错误信息，表示用户名密码不匹配。要让登录视图处理表单，因此将action设置为登录页面的URL，登录视图发送一个表单给模板，模板中显示这个表单并添加一个提交按钮。最后包含了一个隐藏表单元素next，其中的参数value告诉Django在用户登录成功后定位到主页。</p><p>下面在base.html添加到登录页面的链接:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>learning Log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> -    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topics<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> -    {% if user.is_authenticated %}      Hello,{{ user.username }}.    {% else %}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:login<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    {% endif %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{% block content %}{% endblock content %}</code></pre><p>在Django身份验证系统中，每个模板都可使用变量user，这个变量的is_authenticated属性在登录时为True，否则为False。</p><p>此时在admin页面退出管理员账户，就可以在网页中看到log in按钮，点击它：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/20.png" class=""><h4 id="注销："><a href="#注销：" class="headerlink" title="注销："></a><strong>注销：</strong></h4><p>让用户点击一个按钮就可注销并返回主页：</p><p>users/urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> LoginView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>template_name<span class="token operator">=</span><span class="token string">'users/login.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span>    path<span class="token punctuation">(</span><span class="token string">'logout/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>logout_view<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'logout'</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span></code></pre><p>users/views.py（注意新版的包名有所变化）:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> logout<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token keyword">def</span> <span class="token function">logout_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>建立链接，修改base.html，给登录后的用户名旁边加上log out按钮：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>learning Log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> -    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topics<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> -    {% if user.is_authenticated %}      Hello,{{ user.username }}.      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:logout<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log out<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    {% else %}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:login<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    {% endif %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{% block content %}{% endblock content %}</code></pre><h4 id="注册页面："><a href="#注册页面：" class="headerlink" title="注册页面："></a>注册页面：</h4><p>users/urls.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> LoginView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>template_name<span class="token operator">=</span><span class="token string">'users/login.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'logout/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>logout_view<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'logout'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>register<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span></code></pre><p>users/views.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> logout<span class="token punctuation">,</span>login<span class="token punctuation">,</span>authenticate<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>forms <span class="token keyword">import</span> UserCreationForm<span class="token keyword">def</span> <span class="token function">logout_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#点击注册，创建一个表单</span>        form <span class="token operator">=</span> UserCreationForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>                                        <span class="token comment" spellcheck="true">#点击提交，录入信息，切换登录状态，转到主页</span>        form <span class="token operator">=</span> UserCreationForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_user <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            authenticated_user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>new_user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>password<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'password1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>authenticated_user<span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span>form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'users/register.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span></code></pre><p>保存用户信息后，我们调用authenticate()，将实参用户名和密码传递给它，返回一个通过了 身份验证的用户对象，然后调用login登录。用户注册时被要求输入密码两次，输入两次相同表单才可能有效。</p><p>在login.html目录下新建register.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:register<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {{ form.as_p}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>在base.html添加用户在没有登录时显示到注册页面的链接：</p><pre class=" language-html"><code class="language-html">--snip--    {% else %}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:register<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> -      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:login<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    {% endif %}--snip--</code></pre><p>现在可以看到效果了：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/21.png" class=""><h3 id="让用户拥有自己的数据"><a href="#让用户拥有自己的数据" class="headerlink" title="让用户拥有自己的数据"></a>让用户拥有自己的数据</h3><p>这里将创建一个系统，确定各项数据所属用户，再限制对页面的访问，让用户只能使用自己的数据。</p><p>Django提供了修饰器@login_required，可以实现某些页面只允许已登录的用户访问。</p><p>修改learning_logs/views.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>@login_required<span class="token keyword">def</span> <span class="token function">topics</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>@login_required<span class="token keyword">def</span> <span class="token function">topic</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span>@login_required<span class="token keyword">def</span> <span class="token function">new_topic</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>@login_required<span class="token keyword">def</span> <span class="token function">new_entry</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>@login_required<span class="token keyword">def</span> <span class="token function">edit_entry</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>entry_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span></code></pre><p>login_required()检查用户是否已登录，当用户已登录时，才运行topics的代码，否则重定向到登录页面。</p><p>修改settings.py，让Django知道到哪里查找登录页面，在末尾添加：</p><pre class=" language-python"><code class="language-python">LOGIN_URL <span class="token operator">=</span> <span class="token string">'/users/login/'</span></code></pre><p>现在未登录状态下点击topics或输入编辑添加主题条目的链接，就会跳转到登录页面。</p><p><strong>将数据关联到用户：</strong></p><p>我们只需将最高层的数据关联到用户，这样更底层的数据自动管理到用户。下面修改模型Topic，添加一个关联到用户的外键，完成后必须对数据库进行迁移。最后必须对一些视图进行修改，使其只显示与当前登录的用户相关联的数据。</p><p>models.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>              text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>     date_added <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      owner <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#显示模型的简单表示</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span></code></pre><p>确定当前数据库有哪些用户，输入命令启动Django shell会话：</p><pre class=" language-cmd"><code class="language-cmd">$ python manage.py shellPython 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license" for more information.(InteractiveConsole)>>> from django.contrib.auth.models import User>>> User.objects.all()......................................>>> for user in User.objects.all():...     print(user.username,user.id)...tianjue 1testAccount 2>>></code></pre><p>迁移数据库：</p><pre class=" language-cmd"><code class="language-cmd">$ python manage.py makemigrations learning_logsYou are trying to add a non-nullable field 'owner' to topic without a default; we can't do that (the database needs something to populate existing rows).Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.pySelect an option: 1Please enter the default value now, as valid PythonThe datetime and django.utils.timezone modules are available, so you can do e.g. timezone.nowType 'exit' to exit this prompt>>> 1Migrations for 'learning_logs':  learning_logs\migrations\0003_topic_owner.py    - Add field owner to topic</code></pre><p>执行迁移：</p><pre class=" language-cmd"><code class="language-cmd">$ python manage.py migrate</code></pre><p>现在可以在shell中验证是否符合预期：</p><pre class=" language-cmd"><code class="language-cmd">>>> from learning_logs.models import Topic>>> for topic in Topic.objects.all():...     print(topic,topic.owner)...Chess tianjueRock Climbing tianjueLearning tianjue</code></pre><p>可以看到每个主题都属于用户tianjue了。</p><p><strong>只允许访问自己的主题：</strong></p><p>learning_logs/views.py:</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token punctuation">,</span>Http404<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>@login_required<span class="token keyword">def</span> <span class="token function">topics</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>                         <span class="token comment" spellcheck="true"># 查询数据库，请求提供Topic对象，只让所有者访问，按属性date_added进行排序</span>    topics <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>owner<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'date_added'</span><span class="token punctuation">)</span>      context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'topics'</span><span class="token punctuation">:</span>topics<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/topics.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span>@login_required<span class="token keyword">def</span> <span class="token function">topic</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>topic_id<span class="token punctuation">)</span>                    <span class="token keyword">if</span> topic<span class="token punctuation">.</span>owner <span class="token operator">!=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">:</span>                               <span class="token comment" spellcheck="true">#如果主题不归用户所有，返回404响应</span>        <span class="token keyword">raise</span>  Http404    entries <span class="token operator">=</span> topic<span class="token punctuation">.</span>entry_set<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-date_added'</span><span class="token punctuation">)</span>         context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'topic'</span><span class="token punctuation">:</span>topic<span class="token punctuation">,</span><span class="token string">'entries'</span><span class="token punctuation">:</span>entries<span class="token punctuation">}</span>              <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/topic.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span>@login_required<span class="token keyword">def</span> <span class="token function">new_topic</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>                   form <span class="token operator">=</span> TopicForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>                                          form <span class="token operator">=</span> TopicForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>             <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                           new_topic <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            new_topic<span class="token punctuation">.</span>owner <span class="token operator">=</span> request<span class="token punctuation">.</span>user                         <span class="token comment" spellcheck="true">#把新建立的主题和用户关联上</span>            new_topic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'learning_logs:topics'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'learning_logs/new_topic.html'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span>@login_required<span class="token keyword">def</span> <span class="token function">new_entry</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>topic_id<span class="token punctuation">)</span>    <span class="token keyword">if</span> topic<span class="token punctuation">.</span>owner <span class="token operator">!=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">:</span>                              <span class="token comment" spellcheck="true">#如果主题不归用户所有，返回404响应</span>        <span class="token keyword">raise</span> Http404    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>@login_required<span class="token keyword">def</span> <span class="token function">edit_entry</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>entry_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    entry <span class="token operator">=</span> Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>entry_id<span class="token punctuation">)</span>    topic <span class="token operator">=</span> entry<span class="token punctuation">.</span>topic    <span class="token keyword">if</span> topic<span class="token punctuation">.</span>owner <span class="token operator">!=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">:</span>                               <span class="token comment" spellcheck="true">#如果主题不归用户所有，返回404响应</span>        <span class="token keyword">raise</span> Http404    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span></code></pre><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/22.png" class=""><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/23.png" class=""><p>现在这个项目运行任何用户注册，每个用户可以随意添加主题和条目，并且只能访问自己的数据。</p><hr><h2 id="设置应用程序的样式并对其进行部署"><a href="#设置应用程序的样式并对其进行部署" class="headerlink" title="设置应用程序的样式并对其进行部署"></a>设置应用程序的样式并对其进行部署</h2><h3 id="设置项目的样式"><a href="#设置项目的样式" class="headerlink" title="设置项目的样式"></a>设置项目的样式</h3><p>当前，学习笔记的功能基本完成，但未设置样式。我们将使用Bootstrap库，这是一种工具，用于为Web应用程序设置样式，最后把这个项目部署到服务器端。</p><p>执行命令，安装django-bootstrap3:</p><pre class=" language-cmd"><code class="language-cmd">$ pip3 install django-bootstrap3</code></pre><p>在settings.py中添加代码：</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>                                  <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token comment" spellcheck="true">#第三方应用程序</span>    <span class="token string">'bootstrap3'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#我的应用程序</span>    <span class="token string">'learning_logs'</span><span class="token punctuation">,</span>    <span class="token string">'users'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>BOOTSTRAP3 <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'include_jquery'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>需要让django-bootstrap3包含jQuery，这是一个JavaScript库，能够让你使用Bootstrap模板的一些交互性元素，这样无需手工下载jQuery。</p><p>Bootstarp是一个大型样式设置工具集，提供了大量的模板，具体可访问<a href="https://getbootstrap.com/%E3%80%82">https://getbootstrap.com/。</a></p><p>首先需要修改base.html,在这个文件定义HTML头部，添加一些在模板中使用Bootstrap所需的信息，删除base.html全部代码，改为：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/28.png" class=""><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/29.png" class=""><p>首先，HTML分为两个主要部分：头部(head)和主体(body)，头部不包含任何内容，只是将正确显示页面所需的信息告诉浏览器。</p><p>主体包含用户在页面上看到的内容&lt;nav&gt;元素表示页面的导航链接部分，这个元素内的所有内容，都根据(selector)navbar、navbar-default、navbar-static-top定义的Bootstrap样式规则来设置样式，选择器决定了特定的样式规则应用于页面的哪些元素。</p><p>在class=”navbar-header”的地方，定义了一个按钮&lt;button&gt;，将浏览器窗口太窄，无法水平显示的整个导航栏显示出来，如果用户点击这个按钮，会出现一个下拉列表，包含所有的导航元素，在用户缩小浏览器窗口或在屏幕较小的移动设备上显示网页，collapse会使导航栏折叠起来。 在class=”navbar-brand”的地方表示在导航栏的左边显示项目名，设置为主页链接。</p><p>div id=”navbar” class=”navbar-collapse collapse”定义了一组让用户能够在网站中导航的链接，导航栏是一个以ul 开头的列表，其中的每个链接都是列表项 li，要添加更多的链接，可插入下述结构的行：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:title<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>后面的部分是一个容器，包含一个名为header的块和content块，header块决定页面包含哪些消息以及用户可在页面上执行哪些操作，其属性page-header将一系列的样式应用于这个块。</p><p>现在打开浏览器可以看到网页发生了很大改变：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/24.png" class=""><p><strong>设置登录页面的样式：</strong></p><p>login.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% load bootstrap3 %}{% block header %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Log in to your account.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>{% endblock header %}{% block content %}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>users:login<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       {% csrf_token %}       {% bootstrap_form form %}       {% buttons %}         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>       {% endbuttons %}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>首先是加载bootstrap3模板，然后定义header块，原来的if form.error代码块删除了，因为bootstrap3会自动管理表单错误。</p><p>后面用bootstrap_form form显示表单，替换了原来的form.as_p。后面的按钮用了bootstrap3模板标签。</p><p>现在 访问login页面，样式已经改变：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/25.png" class=""><p><strong>设置new_topic页面的样式：</strong></p><p>修改new_topic.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% load bootstrap3 %}{% block header %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Add a new topic:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>{% endblock header %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_topic<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {% bootstrap_form form %}    {% buttons %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add topic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {% endbuttons %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>可以看到效果：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/26.png" class=""><p><strong>设置topics页面的样式：</strong></p><p>topics.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block header %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Add a new topic:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>{% endblock header %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for topic in topics %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topic<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% empty %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>No topics have been added yet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_topic<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add a new topic:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>这里没有使用bootstrap3自定义标签，只是加了header块，改了字体大小。</p><p><strong>设置topic页面中的条目样式：</strong></p><p>topic.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% block header %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>{% endblock header %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_entry<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add new entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{% for entry in entries %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>              {{ entry.date_added|date:'M d, Y H:i' }}              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:edit_entry<span class="token punctuation">'</span> entry.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>edit entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{ entry.text|linebreaks }}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- panel --></span>{% empty %}    There are no entries for this topic yet.{% endfor %}{% endblock content %}</code></pre><p>删除了以前使用的无序列表结构，创建了面板式div元素，而不是将每一个条目作为一个列表项，其中有两个嵌套div：面板标题(panel-heading)div和面板主体(panel-body)div。面板标题div包含条目的创建日期以及用于编辑条目的链接，还使用了标签small使其比时间戳小一些。面板主体包含实际文本。</p><p>效果如下：</p><img src="/2021/01/13/python-bian-cheng-cong-ru-men-dao-shi-jian-bi-ji/27.png" class=""><p>同样，给其他页面设置：</p><p>new_entry.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% load bootstrap3 %}{% block header %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topic<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Add a new entry:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>{% endblock header %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:new_entry<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {% bootstrap_form form %}    {% buttons %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {% endbuttons %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><p>edit_entry.html:</p><pre class=" language-html"><code class="language-html">{% extends "learning_logs/base.html" %}{% load bootstrap3 %}{% block header %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:topic<span class="token punctuation">'</span> topic.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Edit entry:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>{% endblock header %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>learning_logs:edit_entry<span class="token punctuation">'</span> entry.id %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    {% bootstrap_form form %}    {% buttons %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>save changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {% endbuttons %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{% endblock content %}</code></pre><h3 id="部署学习笔记"><a href="#部署学习笔记" class="headerlink" title="部署学习笔记"></a>部署学习笔记</h3><p>由于在墙内是注册不了书本上要求的网站的，没办法还原书本的操作。我们需要按自己的方法部署。这部分需要话费的精力较多，还需要购买云服务器，需要一定的时间成本和金钱成本，具体可参考视频<a href="https://www.bilibili.com/video/BV18t411Y7of?from=search&amp;seid=15366684656551352770">python3 django项目部署方案</a>和<a href="https://www.bilibili.com/video/BV1rx411272x?from=search&amp;seid=15366684656551352770">Nginx + uWsgi 部署 Django + Mezzanine 生产服务器</a>。等我以后有需求时会写一篇新博文来完善此处内容。</p><hr><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>至此，pyhon的基本知识学习完毕了，我们掌握了python的基本语法，能够自己下载和处理一些数据了，还能用Django搭建自己的网站，现在已经具备了开发各种项目所需的python基本技能。在学习的过程中，肯定会遇到自己不能解决的问题，这时候，查阅资料的能力尤为关键，其中给我最大帮助的是CSDN，遇到的大多数问题都能在其中找到答案，最后郑重提醒：每学完一项技术时，一定要写博客，写博客，写博客，很重要！这对知识的巩固有至关重要的作用，博客的搭建可以参考我的另一篇博文《个人建立hexo博客Matery主题的过程心得》。</p><p>祝贺你在学习Python的道路上走出了坚实的一步，愿你在以后的学习中好运相伴！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm配置和使用教程</title>
      <link href="2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/"/>
      <url>2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="pycharm的配置"><a href="#pycharm的配置" class="headerlink" title="pycharm的配置"></a>pycharm的配置</h2><p>首先在安装pycharm的窗口：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/1.png" class=""><p>四个√可以全部打上，第一个是在桌面创建64位启动器的快捷方式，第二个是给启动器添加PATH地址，第三个是在鼠标右键的菜单添加“以工程的方式打开文件夹的选项”，第四个是文件添加.py后缀。</p><p>在file→setting可以对pycharm进行设置：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/4.png" class=""><p>Appearance中，Theme项可以改主题，黑色或白色。</p><p>Editor→General→Font可以调字体大小</p><p>如果想在代码中加上个人信息，可以这样设置：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/5.png" class=""><p><strong>导入第三方库</strong>：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/7.png" class=""><p>project→project interpreter</p><hr><h2 id="pycharm的使用"><a href="#pycharm的使用" class="headerlink" title="pycharm的使用"></a>pycharm的使用</h2><p>pycharm最下方三个按钮</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/2.png" class=""><p>Terminal是终端，作用和cmd一样，可以直接输入py文件名***.py直接看运行结果。Run用来呈现运行结果。Python Console是python控制台，可以输入程序进行测试。</p><p>右上角是运行历史，有你最近运行的文件，可以直接进行运行调试操作：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/3.png" class=""><p>右键点击文件夹可直接在文件夹下创建各种文件：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/6.png" class=""><hr><p>pycharm的快捷键</p><p>为了提高编写代码的速度，以及方面程度，需要知道一些常用的快捷键。</p><p>最常用的是：</p><ol><li><p>ctrl+c  复制</p></li><li><p>ctrl+d  快速复制上行的内容至下一行</p></li><li><p>Ctrl+shift+n   通过文件名快速查找工程内的文件</p></li><li><p>ctrl +a    全选</p></li><li><p>Ctrl+alt+l  调整代码格式</p></li><li><p>Alt+enter  导入模块</p></li><li><p>Ctrl+z  回退</p></li><li><p>ctrl+x  剪贴</p></li><li><p>ctrl+/   注释，去注释</p></li><li><p>shift +Tab  往移动</p></li><li><p>shift +enter  自动回车，跳入下一行</p></li><li><p>ctrl +enter  自动回车，跳入上一行</p></li></ol><p>更多的快捷键：<a href="https://segmentfault.com/a/1190000005776418">https://segmentfault.com/a/1190000005776418</a></p><hr><p>pycharm的调试</p><p>设置好断点，点击debug：</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/8.png" class=""><p>每一行都会出现运行结果的数据，按下F8可以运行下一行，按下F9运行至下一个断点处。</p><img src="/2021/01/12/pycharm-pei-zhi-he-shi-yong-jiao-cheng/9.png" class=""><p>所有的数据都可以在下方的栏目中找到，随着运行过程的进行，数据也会随之改变。</p>]]></content>
      
      
      <categories>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm配置和使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm安装及破解方法</title>
      <link href="2021/01/12/pycharm-an-zhuang-ji-po-jie-fang-fa/"/>
      <url>2021/01/12/pycharm-an-zhuang-ji-po-jie-fang-fa/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先下载好pycharm专业版2018.2.4安装包，文件名为pycharm-professional-2018.2.4.exe，并进行安装。</p></li><li><p>将0.0.0.0 account.jetbrains.com添加到hosts文件最后，注意hosts文件无后缀，如果遇到无法修改或权限问题，可以采用覆盖的方法去替换hosts文件。修改后请检查hosts文件是否修改，激活码无法激活的原因99.99%是因为hosts没有修改正确。Windows系统hosts文件路径：c:\windows\system32\drivers\etc</p></li><li><p>下载破解文件并将 JetbrainsCrack-3.1-release-enc.jar 放置到 pycharm安装目录的\bin目录下（位置可随意，只要配置文件填写相对应的路径）。</p></li><li><p>在 Pycharm安装目录的\bin目录下找到 <code>pycharm.exe.vmoptions</code> 和 <code>pycharm64.exe.vmoptions</code> (如果你是idea激活则是：idea.exe.vmoptions和idea64.exe.vmoptions)，以文本格式打开并同时在两个文件最后追加 -javaagent:D:\JetBrains\PyCharm 2018.2.1\bin\JetbrainsIdesCrack-3.4-release-enc.jar，注意路径修改成你的pycharm安装路径，文件名称是你破解包名，然后保存。</p></li><li><p>打开pycharm64，点击activate code，输入以下激活码</p><p>ThisCrackLicenseId-{<br>“licenseId”:”11011”,<br>“licenseeName”:”微信公众号”,<br>“assigneeName”:”随便输入”,<br>“assigneeEmail”:”邮箱，随便输入”,<br>“licenseRestriction”:””,<br>“checkConcurrentUse”:false,<br>“products”:[<br>{“code”:”II”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DM”,”paidUpTo”:”2099-12-31”},<br>{“code”:”AC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RS0”,”paidUpTo”:”2099-12-31”},<br>{“code”:”WS”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DPN”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”PS”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RM”,”paidUpTo”:”2099-12-31”},<br>{“code”:”CL”,”paidUpTo”:”2099-12-31”},<br>{“code”:”PC”,”paidUpTo”:”2099-12-31”}<br>],<br>“hash”:”2911276/0”,<br>“gracePeriodDays”:7,<br>“autoProlongated”:false}</p></li></ol><p>点击OK,激活完成。</p>]]></content>
      
      
      <categories>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm安装破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么样玩转信息研究方法指南学习笔记</title>
      <link href="2021/01/11/zen-me-yang-wan-zhuan-xin-xi-yan-jiu-fang-fa-zhi-nan-xue-xi-bi-ji/"/>
      <url>2021/01/11/zen-me-yang-wan-zhuan-xin-xi-yan-jiu-fang-fa-zhi-nan-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>本文是基于《怎样玩转信息研究方法指南》所写的个人的阅读总结，该书采用漫画方式进行叙述，十分直观易懂，我在阅读过程中整理笔记，在此基础上进行压缩总结，整理成本文。</p><h3 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h3><p><strong>定一个论题</strong>，开始研究，但题目不能过大（如：美国内战），这不是一个人能完成的工作，可以延伸成“美国内战时期，谁的武器更好”，但这依旧不够具体。谁是指什么？更好是指什么方面？必须更加深入地挖掘才能明确问题。然后再延伸为“武器供给怎样影响了美国内战的结果？”，还是有点宽泛。改为“北方联邦的武器制造和供应系统是否助力于北方联盟在美国内战中打败南部同盟”，这是个好论题。由于是研究小论文，应当把提问改为陈述：“美国联邦的武器制造和分配有助于北方联邦在美国内战中打败南部同盟”。</p><hr><h3 id="找文献"><a href="#找文献" class="headerlink" title="找文献"></a>找文献</h3><p>这就是“论题陈述”，接下来是<strong>收集论据</strong>，可能会发现有一些论据表明你的观点是错误的，请不要无视，可以调整和改进自己的论题。<strong>首先不要用百度，谷歌，维基百科</strong>，把内容拷贝作为你的观点。原因：1. 以用户为主导的开放网站上的信息，有些时候不太靠谱。2. 你或许一直都错误地将谷歌，百度百科用于学术研究行为，它们应该是起点，而不是全部。对搜索背景信息来说，百度是个好地方，但问题在于其中的巨量信息很多没用或完全错误。<strong>实体书和电子书</strong>是不错的信息来源，在搜索背景信息的时候，会看到<strong>参考文献</strong>，这个非常实用。还有就是<strong>图书馆的资料库</strong>，里面有编目系统，包含书架上的实体书目，资料，还有相关的网络资源，包括电子书，期刊论文以及图书馆没有的实体版本的资料。另一个就是<strong>学术期刊论文</strong>，与书籍相比，期刊论文可以聚焦于某一论题下一个相当有针对性的方面，让你的问题豁然开朗。图书馆可能有期刊的影印本。</p><p>为了对抗网络上不相关，不准确，动机险恶的信息，你们应该牢记一些东西：</p><ol><li>谁创造了它？</li><li>它紧跟时代吗？能帮你解答你的研究问题吗？还是离题了？</li><li>支撑作者的结论是什么？</li><li>作者写作它的目的是什么？</li><li>它是写给谁看的？</li><li>它是经过专业认证的吗？</li></ol><p>你是在前人的成果上做进一步的研究调查，引文能表明你知道哪些相关工作已经完成，而你的研究是以之为基础的，因此你需要<strong>引用它们</strong>，这十分有必要，比你先做这些研究的人们希望并需要有人认可他们做出的努力，不希望被人钻空子，声称你这些都是你自己的成果。其次要让读者能<strong>追溯你思维的逻辑</strong>，从而确认你的研究调查的确可以推导出所得结论。最后，记得一直<strong>追踪记录</strong>你的研究过程：数据库、文献、搜索关键字等。</p><hr><h3 id="信息组织和查找原理"><a href="#信息组织和查找原理" class="headerlink" title="信息组织和查找原理"></a>信息组织和查找原理</h3><p><strong>元数据</strong>能用一种便于数据库和编目系统查询的方式描述信息。普通搜索本质上是在经过谷歌排序的网页里搜寻你输入的短语（或关键字）。网页按照短语出现的位置、频率、包含多少链接、该网页存在了多久等因素进行排序，很有可能翻出来一大堆无用的垃圾信息。在图书馆提供的资源里，会看到许多标签，都代表这本资料的一个特征。当我们把一系列类似的概念归入同一个标准标签是，就称这个标签为一个“<strong>受控词汇</strong>（唯一官方指定）”，目的是为了信息更容易被搜索和发现。“<strong>主题标目</strong>（描述性标签）”是数据库和编目系统实用的一类元数据。如果在编目系统搜索“座位”，可能会看到座位——见椅子的信息，让你知道所使用的并不是系统偏好的词汇，明确“椅子”是官方使用的词语。使用主题词的时候，可以表明狭义信息，也可以是广义信息，例如可以搜“椅子”或“家具”。</p><hr><h3 id="信息搜索与图书馆编目系统"><a href="#信息搜索与图书馆编目系统" class="headerlink" title="信息搜索与图书馆编目系统"></a>信息搜索与图书馆编目系统</h3><p><strong>编目系统</strong>是一个巨大的、可检索的在线列表，只要把一份写有元数据的记录添加到系统中，就能搜索并找到那项资料。我们要把一个中心论点拆分开来，分成一些有用的搜索关键词，剔除无用信息，找到<strong>中心论点的核心</strong>。如：社交媒体的使用限制了职场生产力并降低收入，可以拆除：社交媒体、职场生产力、收入三个关键词。然后想出一些同义词或近义词代替关键词，如：社交网络代替社交媒体，效率和生产代替职场生产力，利润代替收入。然后，将这些词语组合起来，输入搜索栏，改变搜索词语的组合方式，可能会给搜索结果的数量、质量带来巨大的影响（可以搜：社交网络和职场，社交媒体和生产力等）。记录下你使用过的搜索词汇，那些有效，哪些无效。可以通过编目系统和数据库提供的一系列选项，切换到<strong>高级搜索</strong>功能（范围有全文，主题，作者，编目号码，系列名，期刊名等）。先试试<strong>主题搜索</strong>，系统会浏览一系列主题词标签登记在这个词汇下的书籍++，主题搜索比关键词搜索更简洁，更有条理，许多东西不止一个主题。如果不知道这种东西被赋予什么标签，不熟悉有关某一论题的正确的主题词，可以通过同义词词典找到可替换的术语从而扩大或缩小搜索范围，或使用图书馆提供的图书编目系统或数据库的主题词指南，查找官方使用的主题词（点击图书档案下的主题词会为你呈现这个主题标目下所有书目的书单）。也可以使用<strong>作者搜索</strong>，注意准确拼写。也可以使用<strong>书名搜索</strong>，但不确定书名的情况下，最好用主题或关键词搜索。总之，要在正确的范围内作调查，研究“美国内战”却 用作者搜索不会带给你想要的结果，弄清楚你想要哪种搜索，应该输入什么词汇。</p><ul><li><p>可以用<strong>布尔运算符</strong>(AND,OR,NOT)进行词汇的组合搜索，改进关键词搜索，同时也可以用括号来组织复杂的搜索语句，例如：（基因改良食品 or 转基因食品）and （安全）。</p></li><li><p>如果记不起一个词的准确拼法，可以使用<strong>截词</strong>（搜theroy可以用thero*），小心不要截掉太多内容，否则会给出海量结果。</p></li><li><p><strong>通配符</strong>可以让你在一个词的中间填空，例如：gr?y，alumin!um。问好代表一个字母，感叹号代表一个字母或没有字母。</p></li><li><p>另一种搜索技巧是使用<strong>引号</strong>搜索档案或电子书全文中的某一具体短语，能保证你的搜索词是一个整体，而不是两个分开的短语。例如：搜“心脏病”数据库不会把它们拆成“心脏”和“病”看待。</p></li><li><p>假设你找到了很好的信息资源，它往往自带一张<strong>参考资料或引用文献</strong>，列举了作者在研究过程中使用过的书、论文、网址等信息。浏览看看是否有你值得一看的东西，在数据库里搜索一下，往往会有惊喜。</p><hr></li></ul><h3 id="期刊和数据库"><a href="#期刊和数据库" class="headerlink" title="期刊和数据库"></a>期刊和数据库</h3><p><strong>期刊</strong>是一些定期出版的资料，可以是杂志，新闻报刊，学术期刊，可以是网上发布的文章或实体书，一般分为三大类：大众、行业/职业、学术/理论/同行评议。<strong>大众类期刊</strong>是你在书店或杂货店看到的杂志和报纸，采用光滑的纸张，明亮的颜色吸引读者，时常包含大量广告，出版非常频繁，每月，每周甚至每天出版，决定大众出版物内容的最重要因素是潮流，一些未经深入调查研究的时兴话题往往占据了这些出版物大部分版面，很少专业术语，没什么技术含量，不包含参考文献，无法让你对某一话题有更加深入的了解，无法为学术研究项目提供可靠的资料。<strong>专业或行业出版物</strong>专门提供与某一行业相关的信息，通常由专业组织来出版。主要面向熟悉该领域特有技术行话的读者。其重点不是独创性的调查研究，挑选文章的标准是以实验为基础，会提供引文和参考文献，但不必须经过实验检验，可能会对你的研究调查有帮助，但需要验证有疑点的推断和结论，同时也会用炫酷的设计和投放广告，广告与行业相关，行业出版物一般每一个月或两个月出版一次，网络版要频繁很多。<strong>学术期刊、理论期刊、同行评议期刊、调查研究期刊</strong>，这些都由专业学者和研究人员撰写，专业组织或学术机构出版的出版物，内容是对专业领域或学术领域非常重要的论题独创性的研究和分析，是最可靠的文章，是学者们相互交流研究进程的基本渠道之一。学术期刊针对的是非常特定的读者群体，使用大量术语和行话，标题明确，充满术语，内容很长，充满图表以及其他佐证文章观点的插图，没有与核心内容无关的广告，印刷简约。世界上很多学术期刊只能在图书馆数据库看到，十分昂贵，通常每月，双月，每季，每年甚至几年才出版一次。一卷指的是一年，期刊两个月出版一次，一年就有六期，六期包含在这一卷中。一卷的页码只有第一其从1算起，之后的几期可能会接着前一期的页码算。学术期刊中的文章要经历一个同行评议的过程，能确保文章的准确性。</p><p>大部分学术期刊里的文章无法被谷歌搜索出来，谷歌只能帮你定位一大堆学术论文或全文的引文，大部分论文的全文是找不到的，之所以能在图书馆找到是因为图书馆付费了，但不意味你获得了资料的所有权，大部分时候，学生和学者都可以得到所需的信息。<strong>数据库</strong>和编目系统搜索方式相似。搜索之后可以看到期刊刊名，卷号，期号和页码，且可以看到获取全文的链接。两个非常重要的搜索结果限制是<strong>同行评议限制</strong>和<strong>全文限制</strong>，同行评议限制排除没有通过同行评议流程的结果，全文限制排除了不提供论文全文的结果，能搜出非常好的文章。</p><ul><li><p><strong>主题标目</strong>是一片金库，如果文章列表的一些主题标目跟你的论题高度一致，那么就要快速记下以便之后使用。</p></li><li><p><strong>摘要</strong>是数据库档案中极有用的部分，用一两段话提供一篇论文的概述，简要说明论文讲了什么，用了什么方法，最终的发现是什么，可以立刻判断出论文对你的研究有没有用，节约时间。</p></li><li><p>搜期刊论文的方法一是在编目系统中搜索期刊名，再去书架上找卷号和期号。另一种是看能否在图书馆数据库找到，可以在综合性数据库和专题类数据库中尝试查找一下期刊名，用卷号、期号、论文题目缩小搜索范围。</p></li><li><p>学术期刊会在官方网站或社交媒体上提供免费博客、播客和新闻，某些期刊与你的研究相关，一定要关注它们的更新。这些信息可以谷歌一些期刊名称，或者数据库专题期刊列表里找找看。</p></li><li><p>有困难时，可以找图书管理员聊聊。</p><hr></li></ul><h3 id="在开放时间中搜索信息"><a href="#在开放时间中搜索信息" class="headerlink" title="在开放时间中搜索信息"></a>在开放时间中搜索信息</h3><ul><li><p>用谷歌、必应、雅虎或其他商业搜索引擎做普通搜索时，想找到我们需要的信息很难，因为信息实在太多了，事实上互联网上的大部分信息你都无法知晓（没有被搜索引擎的爬虫获取到）。如果使用普通网络搜索而不是数据库搜索，会错过一大堆信息，这是写学术论文的一大损失。图书馆资源可以排除混乱的信息，增加你搜索的深度并提高搜索质量。</p></li><li><p>搜索引擎也有<strong>高级搜索</strong>选项，可以沿用布尔运算符，可以限制搜索范围如：使用语种，上一次更新时间，文件类型，域名类型等。使用普通搜索时，在一个词前加减号可以将它从搜索词中剔除，网址前加”site:”可以让你搜索网址里面的内容，短语加引号可以搜索完整的短语。大部分搜索引擎默认你搜索词汇中有and。</p></li><li><p>一些政府官方网站，公众网站，非营利组织官方网站有时也会提供与你课题相关的信息。</p></li><li><p>百度百科可以作为你研究的起点，但不能再研究成果中引用百度百科的内容，因为这些文章不能作为真正意义上的学术信息来源，也不是原创的研究，只是信息稍加整合，告诉你一个基本的概念而已。因此用这些资料打打基础就好，熟悉一下这个论题的各个方面，在百科全书文章中，最有用的是参考文献，引述作品，注释和其他一些页面上呈现的内容，是现成的可以查找的资源。阅读百科文章时要谨慎，防止有人添加劣质信息。</p></li></ul><hr><h3 id="评估信息资源"><a href="#评估信息资源" class="headerlink" title="评估信息资源"></a>评估信息资源</h3><p>无论你使用的信息来自学术期刊，流行杂志，书，网站请核实这些信息的来源，每一点信息都需要进行评估，很多复杂因素决定了信息来源是否可用。哪怕一些很<br>“学术”的信息不一定适合你的研究，也不仅仅因为“大众化”的东西就把它排除在外。评估是持续不断的过程，不要收集一堆资源进行一次性评估，而是找到一个，评估是否保留，再找下一个。评估信息资源的重要性不止体现在学术研究上，高质量的信息能帮你做出很多人生抉择。</p><p>进行信息评估时的几个问题：</p><ul><li>信息来自哪里</li><li>谁制造发布了这些信息</li><li>哪个机构负责出版这些信息</li><li>作者和出版方在论题相关领域足够权威吗</li><li>作者是否有足够教育背景，他们的经历和该学科相关吗</li><li>是什么让一份出版物和网站信息相当可靠，作为可靠信息有一段时间了吗</li><li>是不是经过同行评议审核的作品，并且是学术资源，还是更像通俗读物</li></ul><p>评估网站信息的时候，一定要<strong>确保这个机构可以对内容负责</strong>，如果不是官方发布的学术资料，看看能否在网页上找到“关于我们”的链接，能提供与该机构有关的信息，有时会发现许多机构有明显倾向性，动机是达成某项目的，而不是研究本身，这样的机构可能不会给出你需要的客观而有学术价值的信息。</p><p>对于应该相信谁，相信什么，要<strong>建立自己的认知系统</strong>，这是建立在我们个人经验，偏见以及与现存的其他系统的交互之上的，因此我们要保持辩证的观点看问题，保持健康的怀疑心态，主动接受种类更广的，不同类别的作者创造的内容，问自己为什么这条信息有用，这个作者更值得信赖。</p><p>学术型资源有不同的目标群体，看看信息中的语言是否太过专业难懂，或者太过浅显不足以应当研究需求。看看资源的研究范围，是覆盖了一个论题的多个方面还是仅仅针对十分细枝末节的话题，是把你知道的信息重复了一遍，还是提供了你之前不知道的新视角，新内容？这就要看<strong>你的研究到底需要什么</strong>，早点明确你的研究需求很重要。</p><p>有时有些信息有意说服读者相信一些事情，这种做法不一定值得信任，小心在某一话题立场鲜明的作者，使用一种有说服意图的资源之前，请确保你已经了解过其他对立的观点，并且一些矛盾已经被解决了。</p><p>在评估一个信息资源时，引文和参考文献扮演十分重要的角色。作者有没有提供一份他们在研究过程中参考过的文献清单？有没有解释哪种信息资源提供了哪段引文或论据？你应该能按照他们提供的信息资源顺藤摸瓜，证实作者正确使用了这些信息，回溯他们的研究。</p><p>要检查信息的时效性：它是多久之前被创造的？有时你会希望信息越新越好，在科技、医药和其他更新迅速的研究领域尤为重要，看看新的信息是否颠覆了旧的内容。</p><hr><h3 id="信息使用道德"><a href="#信息使用道德" class="headerlink" title="信息使用道德"></a>信息使用道德</h3><p><strong>抄袭</strong>是指把别人的成果拿走，当做你自己的成果使用，并且不给哪些真正研究和写作的人署名，这就是知识的盗窃。把署名放在该放的地方就叫<strong>引文</strong>。记住，研究是一种群体行为，作为研究者，你的贡献是在他人成果基础上有所建树，每一种新发现都是建立在其他人的研究成果之上的。用自己的话把别人的内容再进行叙述也是抄袭，因为拿走了学术创意当做自己的。你要说明原版是哪里来的，以及原版不是你的作品，这就是<strong>转述</strong>。如果你压缩并精简了一个想法，那就叫做<strong>概述</strong>。</p><p>不是所有内容都需要引文，如果你的论文中有一些论据是常识，不是建立在其他人原创研究的基础上的，这些论据就不需要写引文。</p><p>作为一个研究者，你应该把你遇到的各种知识综合成一个新的产物，创造新知识，你用的是已存在的研究和信息，但最后的产物必须是你自己创造，你自己对零碎信息的理解和整合。不是简单罗列总结其他人的研究成果，而是在创立对研究的新观点，为现有的知识体系做贡献。</p><p>写论文时，一定要细心整理信息资源，否则会很容易忘记自己需要用到的信息出处，是谁写了哪些内容。至少记下使用过的信息来源，让你能回过头参考，可以使用<strong>参考文献管理软件</strong>（bibliographic manager）帮你在网上追踪信息来源。</p><p>写引文不仅能帮你避免被指控抄袭的麻烦，还能帮你找到有益于自己的研究信息资源。</p><p>学术论文有很多种“方式”写作，最常见的有MLA写作指南，APA出版手册，芝加哥写作手册，不同的写作方式一般与不同的学术学科密切相关。这些指南提供了非常多的细节指导，保证你论文的规范性。</p><p>在引用信息资源时，要关注两种主要组成部分，一种是小注释，跟在引文，转述或总结后面，标识信息是怎么样来的，另一种是你放在论文最后一张的清单，详细讲述你在研究过程中使用过的信息的来源。文内引文和脚注/尾注不只是告诉你的读者信息来自另一个地方，也会引导读者去看你论文末尾的完整清单，这张清单里必须包含你在研究里使用过的所有信息资源。</p><p>书和论文不是需要引用的唯一信息资源，根据不同的论题，你可能还要引用电影，纪录片，电视，博客，视频，网站等等。引文不一定是官方的，你提供一个在线链接，就是简单，非正式地引用了一个信息。<strong>zotero那样的免费在线工具</strong>可以帮你生成和组织所有类型的引文。</p><p>版权是法律对知识产权所有者的保护，一般版权所有者有在一定时间内贩卖、发行他们的知识产权的权利。</p><p>一般情况下，正当使用信息要求你的作品不使原作的商业潜能受损，并且你只使用了原作的一小部分，并非所有对受版权法保护资料的使用都必须是非营利和教育目的，只要最终产物和原作品有实质性的不同就行。要小心使用资源，在版权方面宁求稳妥，不要冒险！</p><p>另一方面，一些版权所有者鼓励人们使用他们的作品，一种方法是加入知识共享许可协议的条件下发表作品，该协议是保护自己作为创造者的权益同时允许其他人使用，发布甚至在他们作品上继续加工的协议。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究方法 </tag>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人建立hexo博客Matery主题的过程心得</title>
      <link href="2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/"/>
      <url>2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><hr><h2 id="下载git和node"><a href="#下载git和node" class="headerlink" title="下载git和node"></a>下载git和node</h2><p>首先，搭建博客需要两个环境，一个是node.js，一个是git。</p><p>打开cmd控制台输入</p><pre class=" language-cmd"><code class="language-cmd">node -v               #查看node版本git --version      #查看git版本</code></pre><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/1.jpg" class=""><p>如果没有显示版本号则需要配置环境变量：</p><p>右键点击“我的电脑”→高级系统设置→环境变量</p><p>给在系统变量给node新建变量：</p><p>变量：NODE_PATH            值：node文件夹所在地址（如：F:\node）</p><p>然后点击系统变量中Path的编辑，新建以下几个环境变量：</p><pre class=" language-script"><code class="language-script">F:\node\F:\Git\Git\cmdF:\node\node_global\#具体情况需要看文件位置而定</code></pre><p>然后再验证node和git的版本。</p><hr><h2 id="cnpm安装"><a href="#cnpm安装" class="headerlink" title="cnpm安装"></a>cnpm安装</h2><p>直接用npm速度会比较慢（源在国外），因此要利用npm安装cnpm.</p><p>打开Git Bash输入以下命令：</p><pre class=" language-cmd"><code class="language-cmd">npm install -g cnpm --registry=http://registry.npm.taobao.org#安装淘宝的cnpm 管理器</code></pre><p>安装完成后，以后可以用cnpm直接代替npm.</p><hr><h2 id="hexo框架安装"><a href="#hexo框架安装" class="headerlink" title="hexo框架安装"></a>hexo框架安装</h2><pre class=" language-cmd"><code class="language-cmd">cnpm install -g hexo-cli    #安装hexo框架hexo -v        #查看hexo版本</code></pre><hr><h2 id="利用hexo搭建博客"><a href="#利用hexo搭建博客" class="headerlink" title="利用hexo搭建博客"></a>利用hexo搭建博客</h2><p>在一个地方创建空文件夹（命名blog），所有东西将在里面生成。</p><p>打开文件夹，在此文件夹下运行git bash（右键单击空白处）</p><pre class=" language-git"><code class="language-git">sudo hexo init     #生成博客 初始化博客</code></pre><p>这时候系统会自动克隆文件到blog，并默认landscape主题。再输入命令：</p><pre class=" language-git"><code class="language-git">hexo s    #启动本地博客服务</code></pre><p>浏览器访问 <a href="http://localhost:4000/%EF%BC%8C%E8%BF%99%E6%97%B6%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">http://localhost:4000/，这时可以看到系统默认的版本。</a></p><hr><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><pre class=" language-git"><code class="language-git">hexo n <span class="token string">"我的第一篇文章"</span> #创建新的文章 </code></pre><p>可以看到在source文件夹下的_posts文件夹下创建了.md文件。</p><p>打开文件就可以编辑内容，里面是基于markdown语法的。</p><p>想了解Markdown语法如何使用，请看b站视频<a href="https://www.bilibili.com/video/BV1hJ411X75X?from=search&amp;seid=9433284770037044167">15分钟快速上手Markdown教程</a></p><hr><h2 id="部署到gitee"><a href="#部署到gitee" class="headerlink" title="部署到gitee"></a>部署到gitee</h2><p>输入命令：</p><pre class=" language-git"><code class="language-git">hexo clean #清理hexo g #生成hexo s  #启动本地服务器</code></pre><p>这时可以再本地 <a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%9C%AA%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">http://localhost:4000/查看自己未发布的版本。</a></p><p>然后我们可以把它部署到网上了，部署的方案有很多种，可以把它部署到github，也可以部署到gitee，由于github访问速度较慢，且有的地区无法访问，因此我个人是部署到了gitee上。</p><p>首先你必须有个gitee账号，创建一个公开仓库，注意命名和路径必须与你的用户名一致（不是昵称）。</p><p>创建完仓库后，点击管理</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/2.jpg" class=""><p>此处可以查看仓库的路径，复制这个路径，等下用到。</p><hr><p>打开位于Blog文件夹下的_config.yml文件，这个文件是用来配置你的博客的。滑到底端，改下面的三行代码并保存：</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git  repo: https://gitee.com/用户名/用户名.git    #你的仓库地址+.git  branch: master</code></pre><p>然后安装git部署插件：</p><pre class=" language-git"><code class="language-git">cnpm install --save hexo-deployer-git</code></pre><p>然后在git bash上输入命令：</p><pre class=" language-git"><code class="language-git">hexo d     # 部署到仓库</code></pre><p>然后输入你gitee的用户名和密码，等部署完毕，点开仓库，可以发现里面有你部署进去的文件。</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/3.jpg" class=""><p>此时点击服务里面的gitee Pages，对内容进行更新：</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/4.jpg" class=""><p>更新完成后就可以登录https://你的用户名.gitee.io/对你的博客进行访问啦！</p><hr><h1 id="Matery主题的搭建和完善"><a href="#Matery主题的搭建和完善" class="headerlink" title="Matery主题的搭建和完善"></a>Matery主题的搭建和完善</h1><h2 id="主题下载和更改"><a href="#主题下载和更改" class="headerlink" title="主题下载和更改"></a>主题下载和更改</h2><pre class=" language-git"><code class="language-git"> git clone https://github.com/blinkfox/hexo-theme-matery   #在themes文件夹下执行命令，下载matery主题到本地</code></pre><p>打开blog文件夹下的_config.yml，对其中的内容进行更改：</p><pre class=" language-yml"><code class="language-yml"># Sitetitle: 微笑紫瞳星subtitle: '感谢各位的来访，请在留言板上留下你的足迹'description: '本站记录本人各种学习的旅途，用于巩固自我并启发后来人'keywords: [博客制作,个人经验分享,Unity,人工智能等]author: 微笑紫瞳星language: zh-CNtimezone: ''</code></pre><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'url: http://tianjuewudi.gitee.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks</code></pre><p>主题修改找到关键词theme把内容替换成自己的主题：</p><pre class=" language-yml"><code class="language-yml">theme: hexo-theme-matery</code></pre><p>其他还有很多内容关于各种插件，我将一一讲述。</p><hr><h2 id="Matery主题配置"><a href="#Matery主题配置" class="headerlink" title="Matery主题配置"></a>Matery主题配置</h2><p>效果预览：</p><p>｛% asset_img 5.jpg %｝</p><p>打开themes文件夹下的Matery主题文件夹。首先打开media文件夹,对里面的文件进行一一说明:</p><ol><li>banner中存放的是在首页展示的图片，一天换一张，共7张，一个星期轮一次，可对其进行替换，图片名称须相同。</li><li>fetureimages中的图片将被展示在相册中，且在没有给文章设置封面时，随机挑选一张作为封面，可替换。</li><li>reward中存放着别人打赏你扫描的二维码，一张微信，一张支付宝，可替换。</li><li>comment_bg.png是评论区上的图片。</li><li>icp.png是备案标志。</li><li>logo.png是你昵称旁的标志，可替换。</li></ol><p>打开matery文件夹下的_config.yml可对主题进行配置</p><p>首页的轮播设置（页首语和文章推送）：</p><pre class=" language-yml"><code class="language-yml">cover:  showPrevNext: true # 是否显示左右切换按钮. Whether to display the left and right toggle buttons.  showIndicators: true # 是否显示指示器. # Whether to display the indicators  autoLoop: true # 是否自动轮播. Whether it is automatically rotated.  duration: 120 # 切换延迟时间. Switching delay time.  intervalTime: 5000 # 自动切换下一张的间隔时间. Automatically switch the interval of the next one.  useConfig: false # 是否使用配置文件, 在 _data/covers.json 下配置推荐文章, false则使用主题在文章中的配置 cover coverImg  # useConfig 使用方式: 将主题 hexo-theme-matery/source/_data/covers.json 移动到 my-blog/source/_data/下修改配置即可</code></pre><p>我的梦想模块：</p><pre class=" language-yml"><code class="language-yml">dream:  enable: true  showTitle: true  title: 关于多巴胺的兴趣驱动  text: 了解自身的兴趣产生和作用机制是控制自我的重要一步，多巴胺是能让自身产生兴奋愉悦感的物质，对于任何事物的任何兴趣都是基于多巴胺驱动的，但奈何人体对于多巴胺具有耐受性，长期沉浸于高多巴胺分泌的环境下会使得人体对于快乐的感觉变得迟钝。因此，让自己沉浸于技术学习的最好办法是平时隔绝高多巴胺分泌的娱乐活动，但又把这种活动作为阶段性成就的奖赏，你便会得到数倍于平时的快乐。</code></pre><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/6.jpg" class=""><p>其他以此类推，代码注释非常友好，可以轻易知道其功能。</p><hr><h2 id="看板娘模块的安装和使用"><a href="#看板娘模块的安装和使用" class="headerlink" title="看板娘模块的安装和使用"></a>看板娘模块的安装和使用</h2><p>模块安装：</p><pre class=" language-git"><code class="language-git">cnpm install --save hexo-helper-live2d</code></pre><p>下载完成后，可以在node_modules文件夹中找到自己安装的插件。</p><p>然后下载你想要的看板娘模块（可以自己到网上找哪个合心意的），执行命令：</p><pre class=" language-git"><code class="language-git">cnpm install &amp;#123;packagename&amp;#125;<span class="token comment" spellcheck="true"># 例如cnpm install live2d-widget-model-haru</span></code></pre><p>下载完成后，回到blog根目录下配置_config.yml，添加以下代码（model要根据自己情况设置）：</p><pre class=" language-yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-z16  display:    position: right    width: 200    height: 400  mobile:    show: false</code></pre><p>这样在右下角有看板娘啦！</p><hr><h2 id="音乐播放器的使用"><a href="#音乐播放器的使用" class="headerlink" title="音乐播放器的使用"></a>音乐播放器的使用</h2><p>进入matery主题文件夹下的_config.yml，可以发现matery主题自带一个音乐播放器模块,对其进行修改：</p><pre class=" language-yml"><code class="language-yml"># Whether to display the musics.# 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: 听听音乐  autoHide: true    # hide automaticaly  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 5456680252     # require song id / playlist id / album id / search keyword  # 503838841  fixed: true       # 开启吸底模式  autoplay: true   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠  hideLrc: true     # 隐藏歌词</code></pre><p>这里最重要的是id号，这决定了我们播放的歌单，默认是播放网易云音乐（server: netease），腾讯，酷狗，虾米，百度音乐都可以，这里以网易云为例：</p><p>首先在网易云上创建自己的歌单，然后用浏览器打开网易云音乐，打开你的歌单页面，看网址，网站后面的一串数字就是你歌单的id，把它填到配置中去。</p><hr><h2 id="Valine评论系统的使用"><a href="#Valine评论系统的使用" class="headerlink" title="Valine评论系统的使用"></a>Valine评论系统的使用</h2><p>可以看到在matery主题_config.yml有这么一段代码（enable改为true）：</p><pre class=" language-yml"><code class="language-yml"># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: true  appId:   appKey:   notify: true  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: '请畅所欲言' # Comment Box placeholder  background: /medias/comment_bg.png</code></pre><p>在这里，我们只需填写的内容只有appId和appKey。具体操作访问<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><p>然后把你得到的appId和appKey填入其中，那么在留言板和每篇文章的最后都会出现这么一个评论区：</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/7.jpg" class=""><p>这样利用leanCloud就可以无后端得开发出一个评论区啦，非常简单便捷。</p><hr><h2 id="文章图片无法显示问题"><a href="#文章图片无法显示问题" class="headerlink" title="文章图片无法显示问题"></a>文章图片无法显示问题</h2><p>hexo根目录下运行</p><pre class=" language-script"><code class="language-script">cnpm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>安装成功后这个插件的内容需要修改（可能有bug）</p><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><pre class=" language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>    <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>            <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>              <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>              <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:--&gt;"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后打开_config.yml文件，修改下述内容</p><pre class=" language-yml"><code class="language-yml">post_asset_folder: true</code></pre><hr><blockquote><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p></blockquote><p>​        也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>​        正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><pre class=" language-script"><code class="language-script">{% asset_img example.jpg This is an example image %}</code></pre><hr><h2 id="如何消除首页的颜色变化蒙版效果"><a href="#如何消除首页的颜色变化蒙版效果" class="headerlink" title="如何消除首页的颜色变化蒙版效果"></a>如何消除首页的颜色变化蒙版效果</h2><p>打开themes文件夹→matery→source→css→matery.css，找到这么一大段代码，注释其中的代码。</p><pre class=" language-yml"><code class="language-yml">@-webkit-keyframes rainbow {    /*注释内容*/}@keyframes rainbow {    /*注释内容*/}</code></pre><p>完成之后，重新部署到网站上，ctrl+F5刷新网页。</p><hr><h2 id="多平台一键部署（未尝试）"><a href="#多平台一键部署（未尝试）" class="headerlink" title="多平台一键部署（未尝试）"></a>多平台一键部署（未尝试）</h2><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class=" language-yml"><code class="language-yml">deploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: git    repo: https://gitee.com/lxl80/lxl80.git    branch: master    ignore_hidden: false</code></pre><p>安装：</p><pre class=" language-yml"><code class="language-yml">cnpm install hexo-deployer-cos-enhanced --save</code></pre><p>_config.yml配置如下：</p><pre class=" language-yml"><code class="language-yml">deploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: cos    bucket: lxl80-130****    region: ap-beijing    secretId: AKIDh9****F8FvL    secretKey: Z3IGiur****QZR3PgjXmlVg    cdnConfig:      enable: true      cdnUrl: https://static.lixl.cn      bucket: static-130****      region: ap-beijing      folder: static      secretId: AKIDh9****F8FvL      secretKey: Z3IGiur****QZR3PgjXmlVg</code></pre><p>用hexo c,hexo g ,hexo d三连可实现一键发布。</p><hr><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图</td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td>表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><p>实例：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: 基于Hexo的matery主题搭建博客date: 2020-01-09 16:44:00author: 微笑紫瞳星img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: 工具tags:  <span class="token list punctuation">-</span> blog  - <span class="token title important">hexo<span class="token punctuation">---</span></span></code></pre><hr><h2 id="百度优化（使百度发现我们的网站）"><a href="#百度优化（使百度发现我们的网站）" class="headerlink" title="百度优化（使百度发现我们的网站）"></a>百度优化（使百度发现我们的网站）</h2><p>登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/8.jpg" class=""><p>选择文件验证，下载文件将它上传到gitee仓库中，然后点击服务→gitee Pages进行更新，更新完成后验证文件就可以正常访问啦。</p><p>然后再把站内的各种连接提交上去：</p><img src="/2021/01/10/ge-ren-jian-li-hexo-bo-ke-matery-zhu-ti-de-guo-cheng-xin-de/9.jpg" class=""><p>自动提交分为主动推送、自动推送和sitemap。</p><p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p><p>般主动提交比手动提交效果好，这里介绍主动提交的三种方法从效率上来说：<strong>主动推送&gt;自动推送&gt;sitemap</strong>。</p><p><strong>安装sitemap插件</strong></p><pre class=" language-cmd"><code class="language-cmd">npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save</code></pre><p><strong>修改博客配置文件</strong></p><p>在根目录配置文件中修改url为你的站点地址</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://cherryblog.siteroot: /permalink: :title.htmlpermalink_defaults:123456</code></pre><p>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，可通过<a href="http://www.cherryblog.site/baidusitemap.xml,%E6%9F%A5%E7%9C%8B%E8%AF%A5%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E7%94%9F%E6%88%90%EF%BC%8C%E5%85%B6%E4%B8%ADsitemap.xml%E6%96%87%E4%BB%B6%E6%98%AF%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8Cbaidusitemap.xml%E6%98%AF%E7%99%BE%E5%BA%A6%E4%B8%93%E7%94%A8%E7%9A%84sitemap%E6%96%87%E4%BB%B6%E3%80%82">http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</a></p><h4 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h4><p>安装插件<code>npm install hexo-baidu-url-submit --save</code><br>然后再根目录的配置文件中新增字段</p><pre class=" language-yml"><code class="language-yml">baidu_url_submit:  count: 100 # 提交最新的一个链接  host: www.cherryblog.site # 在百度站长平台中注册的域名  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里12345</code></pre><p>在加入新的deploy</p><pre class=" language-yml"><code class="language-yml">deploy: - type:baidu_url_submitter</code></pre><p>这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了。</p><h4 id="设置自动推送"><a href="#设置自动推送" class="headerlink" title="设置自动推送"></a>设置自动推送</h4><p>在主题配置文件下设置,将baidu_push设置为true：</p><pre class=" language-yml"><code class="language-yml"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true</code></pre><p>然后就会将一下代码自动推送到百度,这样每次访问博客中的页面就会自动向百度提交sitemap</p><pre class=" language-ejs"><code class="language-ejs">{% if theme.baidu_push %}<script>(function()&#123;    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') &#123;        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            &#125;    else &#123;        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    &#125;    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);&#125;)();</script>{% endif %}</code></pre><h4 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h4><p>将我们上一步生成的sitemap文件提交到百度就可以了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
